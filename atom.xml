<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T23:18:57+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating from blogger to octopress]]></title>
    <link href="http://sandipransing.github.io/2014/02/migrating-from-blogger-to-octopress/"/>
    <updated>2014-02-09T19:00:56+05:30</updated>
    <id>http://sandipransing.github.io/2014/02/migrating-from-blogger-to-octopress</id>
    <content type="html"><![CDATA[<p>I almost spent 3 or more years blogging at <code>blogger.com</code> and found very happy to use it.
But as the years went there were many more blogging sites came in and but none of them attracted me.</p>

<p>From last 3 days, was evaluating with <a href="http://octopress.org">octopress</a>, its way of writing posts, customizations and found quick &amp; easy to use. Hence, i made decision of shifting my blog from <code>blogger</code> to <code>octopress</code>. I started doing <code>google</code> search about how this can be done.</p>

<p>Here is step by step guide:</p>

<h2>Export content from blogger</h2>

<p>First, you need to export your posts from blogger.
Goto <code>blogger admin area</code> and then go to <code>settings &gt;&gt; other &gt;&gt; Export Blog</code> and click on it. Please wait sometime and popup will comeup allowing you to download blog in <code>xml</code> format.</p>

<p><img src="http://sandipransing.github.io/images/export-blog.png" /></p>

<p>If you still finding some problem with exporting then see <a href="http://www.freetech4teachers.com/2013/01/how-to-export-your-blogger-and.html">here</a></p>

<h2>Formatting posts for octopress</h2>

<p>Now the big challenge ! We have <code>xml posts</code> downloaded from blogger but octopress posts format is different.
So, we need to convert xml posts to markdown formatted octopress posts.
If you do it manually then its not an easy task but don&rsquo;t worry. There is already a ruby code that will do it for you.
Thanks to <a href="https://gist.github.com/juniorz">Reinaldo de Souza </a> for sharing the script. Download the <code>import.rb</code> script from <a href="https://gist.github.com/baldowl/1578928">here</a></p>

<h2>Run the script against downloaded xml file</h2>

<p>Script requires <code>nokogiri</code>. if you not don&rsquo;t have already then install using <code>gem install nokogiri</code>
After successful run, this will be creating static markdown octopress formatted posts inside <code>_posts</code> and <code>_drafts</code> directories.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby import.rb blog-02-09-2014.xml</span></code></pre></td></tr></table></div></figure>


<h2>Copy generated posts to octopress blog posts</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv _posts/* blog/_posts/`
</span><span class='line'>mv _drafts/* blog/_drafts/`</span></code></pre></td></tr></table></div></figure>


<p>This finishes migration and run <code>rake preview</code> and you will start seeing your blogger posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Octopress blog posts using markdown]]></title>
    <link href="http://sandipransing.github.io/2014/02/writing-octopress-blog-posts-using-markdown/"/>
    <updated>2014-02-07T19:20:07+05:30</updated>
    <id>http://sandipransing.github.io/2014/02/writing-octopress-blog-posts-using-markdown</id>
    <content type="html"><![CDATA[<p><strong>Hello Octopress!</strong>
This an example post for more information see:</p>

<h2>Blockquote</h2>

<blockquote><p>Don&#8217;t stop when you&#8217;re tired, stop when you&#8217;re done.</p><footer><strong>@TheJeetBanerjee</strong> <cite><a href='http://twitter.com/TheJeetBanerjee'>twitter.com/TheJeetBanerjee/&hellip;</a></cite></footer></blockquote>


<blockquote><p>We have to go for what we think we&#8217;re fully capable of, not limit ourselves by what we&#8217;ve been in the past.</p><footer><strong>@Vivek Paul</strong></footer></blockquote>


<h2>Ruby</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">abc</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;hii&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Console</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> sudo apt-get install cakePHP
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git clone git@github.com:imathis/octopress.git <span class="c"># fork octopress</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Coffeescript</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;.help&#39;</span><span class="p">).</span><span class="nx">html</span> <span class="s">&quot;(?)&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;print something&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Gist Embedding</h2>

<div><script src='https://gist.github.com/cc14d6039f1ff35b4be3.js?file=multiple-ssh-config'></script>
<noscript><pre><code># Default GitHub user (sandip)
Host github.com
  HostName github.com
  User git
  IdentityFile /home/sandip/.ssh/id_rsa

# github user (client)
Host github-client
  HostName github.com
  User git
  IdentityFile /home/sandip/.ssh/id_rsa_client

# github user (friend)
Host github-swapnil
  HostName github.com
  User git
  IdentityFile /home/sandip/.ssh/id_dsa_swapnil
</code></pre></noscript></div>


<h2>Include Code Snippets</h2>

<p>File /home/sandip/octopress/source/downloads/code/[linenos:false] could not be found</p>

<h2>Selecting tags from sentence</h2>

<p>This is a <code>ruby</code> and <code>rails</code> blog</p>

<h2>Pullquote</h2>

<p><span class='pullquote-left' data-pullquote='almost exactly like the default,'>
Left-aligning pullquotes are good to alternate breaks in the text. They&rsquo;re
almost exactly like the default, right pullquotes, but a little different.
</span></p>

<h2>Images</h2>

<p><img src="http://placekitten.com/890/280"></p>

<h2>AngularJS Tutorial &ndash; YouTube</h2>

<p>AngularJS is a client-side JavaScript framework.A video tutorial to help you get started with AngularJS.
<a href="http://youtube.com/watch?v=WuiHuZq_cg4"><img src="http://img.youtube.com/vi/WuiHuZq_cg4/0.jpg" alt="Angular JS" /></a></p>

<h2>Inline HTML</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="k">class</span><span class="o">=</span><span class="s">&#39;well&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">All</span> <span class="o">is</span> <span class="nx">well</span><span class="p">.</span> <span class="nx">Way</span> <span class="nx">to</span> <span class="nx">go</span> <span class="o">!!</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>About Author</h2>

<p><img class="left" src="http://www.gravatar.com/avatar/37e0a0772ffc4ce993cedfb49c6ee6d2.png" title="Sandip Ransing" >
Sandip is a ruby on rails developer based in pune and also a blogger at funonrails. Opensource contributor and working with Josh software. Follow Sandip on <a href="http://twitter.com/sandipransing">Twitter</a> for updates. He shares code at <a href="http://github.com/sandipransing">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started: Octopress powered and Github hosted blog]]></title>
    <link href="http://sandipransing.github.io/2014/02/octopress-powered-and-github-hosted-blog/"/>
    <updated>2014-02-07T19:20:07+05:30</updated>
    <id>http://sandipransing.github.io/2014/02/octopress-powered-and-github-hosted-blog</id>
    <content type="html"><![CDATA[<p>There are various blogging sites like <code>blogspot</code>, <code>wordpress</code>, <code>posterious</code>, and many more. But each has their own limitations.
Anyone who has some technical background can start with octopress blog. This gives us the power of freedom of doing anything.
So, Lets first understand about octopress framework and its features.</p>

<h2>Octopress</h2>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator. more info can be found <a href="http://octopress.org/2011/07/23/octopress-20-surfaces/">here</a></p></blockquote>

<h2>Octopress Setup</h2>

<ol>
<li>Before starting make sure you have <code>git</code> installed. If not then &ndash;</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Install <code>ruby</code> 1.9.3 or higher</li>
</ol>


<p>Make git clone of octopress source code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h2>Installing Octopress theme</h2>

<p>Install the default Octopress theme using</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>In order to install custom themes,
Please <a href="http://opthemes.com/">browse through themes</a> and make a selection for your blog.
Once choice is made, you need to do <code>git clone</code> of theme source and install it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>git clone https://github.com/kAworu/octostrap3 .themes/octostrap3
</span><span class='line'>rake 'install[octostrap3]'</span></code></pre></td></tr></table></div></figure>


<p>To genrate infrastrcture for your blog i.e. <code>layouts</code>, <code>js</code> and <code>css</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>Edit <code>_config.yml</code> to configure blog <code>title</code>, <code>header</code>, <code>metadata</code>, <code>plugins</code> and <code>3rd Party Settings</code>.
more on configurations can be found <a href="http://octopress.org/docs/configuring/">here</a>.</p>

<p>We are almost done, and now ready to create our first blog post &ndash;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["My first octopress post"]
</span><span class='line'>mkdir -p source/_posts
</span><span class='line'>Creating new post: source/_posts/2014-02-09-my-first-octopress-post.markdown</span></code></pre></td></tr></table></div></figure>


<p>Now you can open a post inside editor and change as you wanted. More on writing markdown can be found <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet#wiki-html">here</a> and <a href="http://daringfireball.net/projects/markdown/syntax">here too</a></p>

<p>Well, now its time to view how our blog looks like &ndash;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>rake watch
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>Visit browser <code>http://localhost:4000</code> and you should be seeing blog running there.</p>

<h2>Deployment</h2>

<p>There are ways to deploy this blog. You can either deploy this blog on <code>heroku</code> or on <code>github</code> using github pages.</p>

<h3>Heroku</h3>

<p>More on Heroku deployment can be found <a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku/">here</a></p>

<h3>With Github Project pages</h3>

<p>Github deployment is simple. First you need to create a github repository called <code>username.github.io</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages
</span><span class='line'>git remote add origin git@github.com:username/username.github.io.git
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>Visit <code>http://username.github.io</code> to see your blog hosted on github.
Also, do not forget to commit and push your source code on github.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'octopress first blog'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>Adding custom domain</h2>

<p>First create a <code>CNAME</code> file and add naked domain name to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'funonrails.com' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>Then goto your domain provider website and point your <code>domain</code> i.e A record to github ip address <code>204.232.175.78</code>.</p>

<h3>Subdomain</h3>

<p>If you want to point subdomain to github blog then &ndash;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'blog.sandipransing.in' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>then goto your domain provider website and create a CNAME record for your <code>subdomain</code> i.e. <code>blog</code> pointing to <code>yourname.github.io.</code>
If you want more help then see <a href="http://octopress.org/docs/deploying/github/">here</a> and also <a href="http://help.github.com/pages/#custom_domains">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic conditions to rails associations]]></title>
    <link href="http://sandipransing.github.io/2012/10/dynamic-conditions-to-rails-associations/"/>
    <updated>2012-10-25T16:12:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/10/dynamic-conditions-to-rails-associations</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">We all know that rails models associations gets defined while class definitions are loaded and once defined can&#8217;t be changed. But still you can make use of block parameter to conditions to have dynamic query conditions inside associations.<br /><br />Below line explains <b>how to</b> define dynamic associations -<br /><br /><pre class=ruby>has_one :code_sequence, :class_name =&gt; 'Sequence', :conditions =&gt; 'kind = "#{self.kind}"'</pre><br /><br />Please make a note that below code won&#8217;t be working - <br /><pre class=ruby>has_one :code_sequence, :class_name =&gt; 'Sequence', :conditions =&gt; proc { |c| ['kind = ?', c.kind] }</pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading from Rails 2.1.x to Rails 2.3.11]]></title>
    <link href="http://sandipransing.github.io/2012/04/upgrading-from-rails-21x-to-rails-2311/"/>
    <updated>2012-04-04T22:13:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/04/upgrading-from-rails-21x-to-rails-2311</id>
    <content type="html"><![CDATA[<div class='post'>
If your application is currently on any version of Rails 2.1.x, The following changes needs to be done for upgrading your application to Rails 2.3.11<br /><br />1. First install Rails version 2.3.11<br /><pre class=ruby><br />gem install rails -v2.3.11<br /></pre><br /><br />2. Freeze app ruby gems<br /><pre class=ruby><br />rake rails:freeze:gems<br /></pre><br />Hopefully it should work for you but it gave me following error <br /><pre class=ruby><br />undefined method `manage_gems' for Gem:Module <br /></pre><br /><br />3. Create sample rails 2.3.11 app<br /><pre class=ruby><br />rails _2.3.11_ testsapp<br /></pre><br /><br />Now, Copy all missing &#8220;config/initializers/*&#8221; files from new &#8220;testapp to the application that to be upgraded.<br /><pre class=ruby><br />cp testapp/config/initializers/* config/initializers<br /></pre><br /><br />4. Change Rails version inside <i>environment.rb</i> to <i>Rails 2.3.11</i><br /><pre class=ruby> <br /># Specifies gem version of Rails to use when vendor/rails is not present <br />RAILS_GEM_VERSION = '2.3.11'<br /></pre><br /><br />5. Rename <i>app/controllers/application.rb</i> file to <i>app/controllers/application_controller.rb</i><br /><br /><b>OR</b><br /><br /><pre class=ruby><br />rails:update:application_controller<br /></pre><br /><br />6. Start rails server and fix the issues one by one.<br /><pre class=ruby><br />ruby script/server<br /></pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby enumerable & to_proc (ampersond & symbol shortcut)]]></title>
    <link href="http://sandipransing.github.io/2012/02/ruby-enumerable-toproc-ampersond-colon/"/>
    <updated>2012-02-23T02:09:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/02/ruby-enumerable-toproc-ampersond-colon</id>
    <content type="html"><![CDATA[<div class='post'>
Basically Enumerable mixin gives collection classes a variety of traverse, search, sort methods.<br/> <b>understanding ruby blocks i.e. proc </b><br/>blocks are statements of code written in ruby. one can take them as similar to c language macro&#8217;s<br/> <b>Different ways to define blocks</b><br/><pre class=ruby>a = proc do   puts "hello" end a.call #=> hello  b = lambda do |u|   puts "hello #{u}" end b.call('sandip')#=> hello sandip  c = proc {|user| puts user } c.call('sandip') #=> sandip </pre> <b>Passing block to enumerator </b><br/>Lets assume we have collection array of strings and we want to print it<br/> <pre class=ruby> a = ['hi', 'sandip', 'how', 'you', 'doing', '?'] => ["hi", "sandip", "how", "you", "doing", "?"]  a.each {|w| puts w }  q = proc {|w| puts w } => #<Proc:0x00007f9d2be13140@(irb):89> a.each(&q) #=>hi sandip how you doing ?  a.map{|r| q.call(r)} #=>hi sandip how you doing ? </pre>  <b>Understanding symbol#to_proc </b><br/>Symbol has method to_proc which converts symbol to block where symbol is taken as method to be executed on first argument of proc<br/><b>How to_proc got implemented inside Symbol class</b><pre class=ruby>class Symbol   def to_proc     Proc.new { |*args| args.shift.__send__(self, *args) }   end end </pre>Lets have some examples <br/><pre class=ruby>v = :even?.to_proc # equivalent to proc {|a| a.even?} #=> #<Proc:0x00007f9d2bddcb90@(irb):97> q = [1, 2, 3, 5, 67]  q.map(&v) => [false, true, false, false, false] </pre> <b>Is there any shortcut?</b><br/>Yes, there is shortcut to have block passed to enumerators on the fly using ampersand followed by colon (i.e. symbol)<br/> <pre class=ruby>q = [1, 2, 3, 5, 67]  q.map(&:even?) <=> q.map(&:even?.to_proc)  q.map(&:even?.to_proc) #=> [false, true, false, false, false]  q.map(&:even?) #=> [false, true, false, false, false] </pre> <b>Some handy examples </b><br/><pre class=ruby>[1, 2, 3, 5, 67].inject(&:+) #=> 78 [1, 2, 3, 5, 67].inject(:+) #=> 78 [1, 2, 3, 5, 67].any?(&:even?) #=> true [1, 2, 3, 5, 67].detect(&:even?) #=> 2 ['ruby', 'on', 'rails'].map(&:upcase) #=> ["RUBY", "ON", "RAILS"] </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dynamic & bounded parameters and named routes]]></title>
    <link href="http://sandipransing.github.io/2012/01/dynamic-bounded-parameters-and-named/"/>
    <updated>2012-01-31T02:43:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/dynamic-bounded-parameters-and-named</id>
    <content type="html"><![CDATA[<div class='post'>
Rails routes can be customized as your own routes with parameters but first you should understand how routes behaves. <br/> <b>Adding dynamic parameters to routes </b> <br/>Here exact parameters are matched to route and presence of each parameter is mandatory in order to construct urls. blank parameter will raise RoutingError exception. <br/>Exact matched named route declared as -  <pre class=ruby>  match ':a/:b/:c', :to => 'home#index', :as => :q </pre> now go to the rails console - <pre class=ruby> ruby-1.9.3-head :005 > app.q_url(:a, :b, :c)   => "http://www.example.com/a/b/c"        ruby-1.9.3-head :006 > app.q_url(:a, :b, '')   ActionController::RoutingError: No route matches {:controller=>"home", :a=>:a, :b=>:b, :c=>""} </pre><b>Bound parameters to named routes</b><br/>If you are too sure that certain parameter can be blank then you can define it as optional parameter inside route -  <br/><pre class=ruby> match ':a/:b(/:c)', :to => 'home#index', :as => :q </pre><b>rails console</b><pre class=ruby> ruby-1.9.3-head :010 > app.q_url(:a, :b, '')   => "http://www.example.com/a/b?c="   ruby-1.9.3-head :011 > app.q_url(:a, :b)   => "http://www.example.com/a/b" </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[puts, to_s and inspect on ruby object]]></title>
    <link href="http://sandipransing.github.io/2012/01/puts-tos-and-inspect-on-ruby-object/"/>
    <updated>2012-01-31T01:07:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/puts-tos-and-inspect-on-ruby-object</id>
    <content type="html"><![CDATA[<div class='post'>
`puts` converts ruby object into string by invoking to_s method on object. The default to_s prints the object&#8217;s class and an encoding of the object id. In order to print human readable form of object use inspect<br/> <pre class=ruby>locs = Location.find_by_sql('select * from locations')   Location Load (0.5ms)  select * from locations </pre><b>Puts Object internally invokes to_s method on object to print</b><pre class=ruby>locs.each do |l|   # it calls to_s method on object   puts l end  #&lt;Location:0x000000055bb328&gt; #&lt;Location:0x000000055bb058&gt; </pre><br/><b>puts object followed by subsequent invoke of inspect method outputs readable object</b><pre class=ruby>locs.each do |l|   puts l.inspect # prints actual object end  #&lt;Location id: 15, name: &quot;Annettaside3&quot;, street: &quot;71838 Ritchie Cape&quot;, city: &quot;East Destanystad&quot;, state: &quot;Utah&quot;, zip: &quot;58054&quot;, phone: 123456, other_phone: 987654, staff_strength: 40, is_active: true, created_at: &quot;2012-01-25 11:17:26&quot;, updated_at: &quot;2012-01-25 11:17:26&quot;, country_name: &quot;Korea&quot;&gt; #&lt;Location id: 16, name: &quot;Sporerbury4&quot;, street: &quot;73057 Jerad Shoal&quot;, city: &quot;South Kyliefurt&quot;, state: &quot;Delaware&quot;, zip: &quot;46553-3376&quot;, phone: 123456, other_phone: 987654, staff_strength: 40, is_active: true, created_at: &quot;2012-01-25 11:24:48&quot;, updated_at: &quot;2012-01-25 11:24:48&quot;, country_name: &quot;Australia&quot;&gt; </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[csv file import / export in rails 3]]></title>
    <link href="http://sandipransing.github.io/2012/01/csv-file-importexport-in-rails-3/"/>
    <updated>2012-01-27T14:28:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/csv-file-importexport-in-rails-3</id>
    <content type="html"><![CDATA[<div class='post'>
CSV (comma separated values) files are frequently used to import/export data. <br/>In rails 3, FasterCSV comes as default and below is the way to upload csv files inside rails applications. The code below will also show you how to generate csv in memory, parse on csv data, skip header, iterate over records, save records inside db, export upload error file and many more. <br/>First, View to upload file <br/><pre class=ruby>= form_tag upload_url, :multipart => true do   %label{:for => "file"} File to Upload   = file_field_tag "file"   = submit_tag </pre>Assume upload_url maps to import action of customers controller <br/>Controller code <br/><pre class=ruby>class CustomersController < ApplicationController     [...]    def import     if request.post? && params[:file].present?       infile = params[:file].read       n, errs = 0, []        CSV.parse(infile) do |row|         n += 1         # SKIP: header i.e. first row OR blank row         next if n == 1 or row.join.blank?         # build_from_csv method will map customer attributes &          # build new customer record         customer = Customer.build_from_csv(row)         # Save upon valid          # otherwise collect error records to export         if customer.valid?           customer.save         else           errs << row         end       end       # Export Error file for later upload upon correction       if errs.any?         errFile ="errors_#{Date.today.strftime('%d%b%y')}.csv"         errs.insert(0, Customer.csv_header)         errCSV = CSV.generate do |csv|           errs.each {|row| csv << row}         end         send_data errCSV,           :type => 'text/csv; charset=iso-8859-1; header=present',           :disposition => "attachment; filename=#{errFile}.csv"       else         flash[:notice] = I18n.t('customer.import.success')         redirect_to import_url #GET       end     end   end   [...] end </pre>Customer model <br/><pre class=ruby>class Customer < ActiveRecord::Base   scope :active, where(:active => true)   scope :latest, order('created_at desc')      def self.csv_header     "First Name,Last Name,Email,Phone,Mobile, Address, FAX, City".split(',')   end      def self.build_from_csv(row)     # find existing customer from email or create new     cust = find_or_initialize_by_email(row[2])     cust.attributes ={:first_name => row[0],       :last_name => row[1],       :email => row[3],       :phone => row[4],       :mobile => row[5],       :address => row[6],       :fax => row[7],       :city => row[8]}     return cust   end      def to_csv     [first_name, last_name, email, phone, mobile, address, fax, city]   end end </pre><br/>Export customer records in CSV format<br/>Below code loads customer records from database then generate csv_data inside memory and  exports data to browser using send_data method.<br/>Note: As we are not writing on file system hence code can easily work heroku. <pre class=ruby>  def export     # CRITERIA : to select customer records     #=> Customer.active.latest.limit(100)     custs = Customer.limit(10)     filename ="customers_#{Date.today.strftime('%d%b%y')}"     csv_data = FasterCSV.generate do |csv|       csv << Customer.csv_header       custs.each do |c|          csv << c.to_csv       end      end      send_data csv_data,       :type => 'text/csv; charset=iso-8859-1; header=present',       :disposition => "attachment; filename=#{filename}.csv"   end  </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongoid embeded_in and Array field management]]></title>
    <link href="http://sandipransing.github.io/2012/01/mongoid-embededin-and-array-field/"/>
    <updated>2012-01-20T01:12:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/mongoid-embededin-and-array-field</id>
    <content type="html"><![CDATA[<div class='post'>
Previous post explains on <a href="http://www.funonrails.com/2012/01/mongoid-array-field-and-rails-form.html">mongoid document array field and rails form implementation</a><br/>Below example shows rails form integration of array field of embedded mongoid document <br/>consider scenario, student embeds one family who has many assets<br/><pre class=ruby>class Student   include Mongoid::Document    field :name   field :phone      embeds_one  :family    validates_associated :family   accepts_nested_attributes_for :family end </pre><br/><pre class=ruby>class Family   include Mongoid::Document   ASSETS = ['flat', 'car', 'business', 'bunglow', 'cash']      field :members, type: Integer   field :assets, type: Array   field :religon    embedded_in :student end </pre>Brief controller code </br/>  <pre class=ruby>class StudentsController < ApplicationController  def new    @student = Student.new    @student.family ||= @student.build_family  end   def create    @student = Student.new(params[:student])    @student.family.assets.reject!(&:blank?)    if @student.save      [...]    else      render :action => :new    end  end end </pre>view form will look like- <br/><pre class=ruby>= form_for(@student) do |s|   = s.text_field :name   = s.text_field :phone   - s.fields_for :family do |f|     = f.text_field :members     = f.text_field :religion     - Family::ASSETS.each do |asset|       /Here f.object_name #=> student[family]       = f.check_box :assets, :name => "#{f.object_name}[assets][]", asset </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongoid array field and rails form]]></title>
    <link href="http://sandipransing.github.io/2012/01/mongoid-array-field-and-rails-form/"/>
    <updated>2012-01-19T23:59:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/mongoid-array-field-and-rails-form</id>
    <content type="html"><![CDATA[<div class='post'>
mongoid document supports array as field. array field in mongoid document is a ruby array but its quite complex to manage array field in rails forms.<br/>After lot of google and reading comments from stack-overflow at last i felt helpless. Finally after doing research on rails form helper object(form_for, fields_for) am pleased to get it working as expected :)<br/>In below example, product can have multiple categories<br/><pre class=ruby>class Product   CATEGORIES = %w(Apparel Media Software Sports Agri Education)   include Mongoid::Document   field :name, :type => String   field :categories, :type => Array end </pre>Here is form code <br/><pre class=ruby>= form_for(@product) do |f|   = f.text_field :name   - Product::CATEGORIES.each do |category|     = f.check_box :categories, :name => "product[categories][]", category </pre><br/>Here is products controller code <br/><pre class=ruby>class ProductsController < ApplicationController   before_filter :load_product, :only => [:new, :create]      [...]      # We don't need new action to be defined      def create     @product.attributes = params[:product]     # Here we need to reject blank categories     @product.categories.reject!(&:blank?)     if @product.save       flash[:notice] = I18n.t('product.create.success')       redirect_to(:action => :index)     else       render :action => :new     end   end      [...]      private   def load_product     @product = Product.new   end end </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[twitter-bootstrap form builder for rails]]></title>
    <link href="http://sandipransing.github.io/2012/01/twitter-bootstrap-form-builder-for/"/>
    <updated>2012-01-17T05:39:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/twitter-bootstrap-form-builder-for</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://twitter.github.com/bootstrap/">twitter-bootstrap</a> is pluggable css suit provided by twitter. <br/>To know more about how to get started on it <a href="http://www.funonrails.com/2011/11/rails-311-haml-sass-jquery-coffee-rails.html">click here</a><br/>Below post will help you out in getting started bootstrap css with rails app. One need to add below files to helpers directory. MainForm can be used as base version of form builder and can be overriden for its subsequent use inside other custom form builders. <br/><b>1. MainForm </b> <br/><pre class=ruby># app/helpers/main_form.rb  class MainForm < ActionView::Helpers::FormBuilder # NestedForm::Builder   CSS = {     :label => 'label-control',     :hint => 'hint',     :hint_ptr => 'hint-pointer',     :error => 'help-inline',     :field_error => 'error',     :main_class => 'clearfix'   }    FIELDS = %w(radio_button check_box text_field text_area password_field select file_field collection_select email_field date_select)      def main_class(error=nil)     return CSS[:main_class] unless error     [CSS[:main_class], CSS[:field_error]].join(' ')   end    def required(name)     object.class.validators_on(name).map(&:class).include?(ActiveModel::Validations::PresenceValidator) rescue nil   end    def cancel(options={})     link = options.fetch(:return, "/")     @template.content_tag(:a, "Cancel", :href => link, :class => "btn_form button np_cancel_btn #{options[:class]}")   end    def submit(value="Save", options={})     options[:class] = "send_form_btn #{options[:class]}"     super   end    def label_class     {:class => CSS[:label]}   end    def label_tag(attribute, arg)     # Incase its a mandatory field, the '*' is added to the field.     txt = arg[:label] && arg[:label].to_s || attribute.to_s.titleize     txt<< '*' if(arg[:required] || required(attribute)) && arg[:required] != false     label(attribute, txt, label_class)   end    def error_tag(method_name, attribute)     errs = field_error(method_name, attribute)     @template.content_tag(:span, errs.first, :class => CSS[:error]) if errs.present?   end    def field_error(method_name, attribute)     return if @object && @object.errors.blank?     return @object.errors[attribute] if method_name != 'file_field'     @object.errors["#{attribute.to_s}_file_name"] | @object.errors["#{attribute.to_s}_file_size"] | @object.errors["#{attribute.to_s}_content_type"]   end    def hint_tag(txt)     hintPtr = @template.content_tag(:span, '', :class => CSS[:hint_ptr])     hintT = @template.content_tag(:span, txt + hintPtr, {:class => CSS[:hint]}, false)    end     def spinner_tag     @template.image_tag('spinner.gif', :class => :spinner,:id => :spinner)    end end   </pre>ZeroForm is custom form builder which is inherited from main_form and its going to be actually used inside forms. Feel free to make custom form related changes inside this<br/><b>ZeroForm</b><br/><pre class=ruby>cat app/helpers/zero_form.rb  class ZeroForm < MainForm   # Overridden label_class here as we dont need class to be applied   def label_class     {}   end    def self.create_tagged_field(method_name)     define_method(method_name) do |attribute, *args|       arg = args.last && args.last.is_a?(Hash) && args.last || {}        # Bypass form-builder and do your own custom stuff!       return super(attribute, *args) if arg[:skip] && args.last.delete(:skip)        errT = error_tag(method_name, attribute)       labelT = label_tag(attribute, arg)        mainT = super(attribute, *args)       baseT = @template.content_tag(:div, mainT + errT)        hintT = hint_tag(arg[:hint]) if arg[:hint]       spinnerT = spinner_tag if arg[:spinner]        allT = labelT + baseT + spinnerT + hintT       @template.content_tag(:div, allT, :class => main_class(errT))     end   end    FIELDS.each do |name|     create_tagged_field(name)   end end </pre><br/>In order to use Nested Forms you need to extend MainForm with NestedForm Builder<br/><b>Integrate NestedForm with FormBuilder</b><pre class=ruby>class MainForm < NestedForm::Builder end </pre><b>View Form</b><br/><pre class=ruby>= form_for @address ||= Address.new, :builder => ZeroForm do |f|   = f.text_field :street_address   = f.text_area :detail_address, :rows => 2   = f.text_field :city   = f.select :state, %w(US IN AUS UK UKRAINE)   = f.submit 'Save & Continue', :class => 'btn primary'   = link_to 'Skip &raquo', '#' </pre><br/>To know more on twitter-bootstrap pagination in rails <a herf="http://www.funonrails.com/2011/12/twitter-bootstrap-paginate-and-rails-3.html">click here</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get models list inside rails app]]></title>
    <link href="http://sandipransing.github.io/2012/01/get-models-list-inside-rails-app/"/>
    <updated>2012-01-17T05:16:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/get-models-list-inside-rails-app</id>
    <content type="html"><![CDATA[<div class='post'>
How to get collection of models inside your application. Certainly there are many ways to do it.<br/>Lets have a look at different ways starting from worst - <br/><b> Get table names inside database and then iterating over to get model name</b><pre class=ruby>@models = ActiveRecord::Base.connection.tables.collect{|t| t.underscore.singularize.camelize}  #=> ["AdhearsionAudit", "AudioLog", "AuditDetail","TinyPrint", "TinyVideo", "UnknownCall", "UserAudit", "User"] </pre><br/><b>Select those with associated class</b><br/><pre class=ruby>@models.delete_if{|m| m.constantize rescue true} </pre><br/><b>Load models dir</b><br/><pre class=ruby>@models = Dir['app/models/*.rb'].map {|f| File.basename(f, '.*').camelize.constantize.name } </pre><b>Select ActiveRecord::Base extended class only</b><pre class=ruby>@models.reject!{|m| m.constantize.superclass != ActiveRecord::Base } </pre><b>Get Active Record subclasses</b><br/><pre class=ruby># make sure relevant models are loaded otherwise # require them prior # Dir.glob(RAILS_ROOT + '/app/models/*.rb').each { |file| require file } class A < ActiveRecord::Base end class B < A end ActiveRecord::Base.send(:subclasses).collect(&:name) #=> [...., A] </pre><b>How to get Inherited models too</b> <br/><pre class=ruby>class A < ActiveRecord::Base end class B < A end ActiveRecord::Base.descendants.collect(&:name) #=> [...., A, B] </pre> Below is more elegant solution provide by <a href="http://stackoverflow.com/users/268/vincent-robert">Vincent-robert</a> over stack overflow which recursively looks for subsequent descendent&#8217;s of class and gives you list from all over application<br/><pre class=ruby>class Class   def extend?(klass)     not superclass.nil? and ( superclass == klass or superclass.extend? klass )   end end  def models    Module.constants.select do |constant_name|     constant = eval constant_name     if not constant.nil? and constant.is_a? Class and constant.extend? ActiveRecord::Base     constant     end   end end </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stripe gateway payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2012/01/stripe-gateway-payment-integration-with/"/>
    <updated>2012-01-15T00:53:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/stripe-gateway-payment-integration-with</id>
    <content type="html"><![CDATA[<div class='post'>
Stripe is simple website payment solution and its very easy to easy setup<br/>It currently supports only in US and seems to be very popular compared to other payment gateways because of its api & pricing<br/><br/>Stripe API provides -<br/>1. charge (regular payments)<br/>2. subscription (recurring payments)<br/>3. managing customers (via stripe_customer_token)<br/> <br/><b>What you need to do ?</b><br/>Create a stripe account by providing email address and password. There after go to the <a href="https://manage.stripe.com/account">manage account page</a> to obtain stripe public & api keys.<br/> <b>Rails Integration</b><br/><pre class=ruby># Gemfile   gem stripe </pre><br/><pre class=ruby># config/initializers/stripe.rb  Stripe.api_key = "rGaNWsIG3Gy6zvXB8wv4rEcizJp6XjF5" STRIPE_PUBLIC_KEY = "vk_BcSyS2qPWdT5SdrwkQg0vTSyhZgqN" </pre><br/><pre class=ruby># app/views/layouts/application.html.haml  = javascript_include_tag 'https://js.stripe.com/v1/' = tag :meta, :name => 'stripe-key', :content => STRIPE_PUBLIC_KEY </pre><br/><b>Payment Form</b><br/><pre class=ruby># app/views/payments/new.html.haml   #stripe_error   %noscript JavaScript is not enabled and is required for this form. First enable it in your web browser settings.  = form_for @payment ||= Payment.new, :html => {:id => :payForm} do |p|   = p.hidden_field :stripe_card_token   .field     = p.text_field :amount   .credit_card_form     %h3.title       Enter Credit Card     - if @payment.stripe_card_token.present?       Credit card has been provided.     - else       .field         = label_tag :card_number, "Credit Card Number"         = text_field_tag :card_number, nil, name: nil       .field         = label_tag :card_code, "Security Code (CVV)"         = text_field_tag :card_code, nil, name: nil       .field         = label_tag :card_month, "Expiry Date"         = select_month nil, {add_month_numbers: true}, {name: nil, id: "card_month"}         = select_year nil, {start_year: Date.today.year, end_year: Date.today.year+15}, {name: nil, id: "card_year"}   </pre><br/><b>Javascript Code</b><br/><pre class=ruby> # app/views/payments/new.js   var payment; jQuery(function() {    Stripe.setPublishableKey($('meta[name="stripe-key"]').attr('content'));   return payment.setupForm(); });  payment = {    setupForm: function() {      $('.head').click(function() {       $(this).css('disabled', true);        if($('#payment_stripe_card_token').val()){         $('#payForm').submit();       }       else{         payment.processCard();       }     });   },    processCard: function() {      var card;     card = {       number: $('#card_number').val(),       cvc: $('#card_code').val(),       expMonth: $('#card_month').val(),       expYear: $('#card_year').val()     };     return Stripe.createToken(card, payment.handleStripeResponse);   },   handleStripeResponse: function(status, response) {     if (status === 200) {       $('#payment_stripe_card_token').val(response.id)       $('#stripe_error').remove();       $('#payForm').submit();     } else {       $('#stripe_error').addClass('error').text(response.error.message);       $('.head').css('disabled', false);     }   } };  </pre><br/><b>Generate & Migrate Payment Model</b><br/><pre class=ruby>  rails g model payment status:string amount:float email:string transaction_number:string   rake db:migrate </pre><br/><b>Payment Model</b><br/><pre class=ruby># app/models/payment.rb  class Payment < ActiveRecord::Base   PROCESSING, FAILED, SUCCESS = 1, 2, 3      attr_accessible :stripe_card_token      validates :amount, :stripe_card_token, :presence => true, :numericality => { :greater_than => 0 }    def purchase     self.status = PROCESSING          customer = Stripe::Customer.create(description:email, card: stripe_card_token)     # OPTIONAL: save customer token for further reference     stripe_customer_token = customer.id          # Charge     charge = Stripe::Charge.create(      :amount => amount * 100, # $15.00 this time      :currency => "usd",      :customer => stripe_customer_token     )      if charge.paid       self.transaction_num = charge.id       self.status = SUCCESS     else       self.status = FAILED     end     return self   rescue Exception => e     errors.add :base, "There was a problem with your credit card."     self.status = FAILED     return self   end end </pre><br/><b>Payments Controller</b><br/><pre class=ruby># app/controllers/payments_controller.rb   class PaymentsController < ApplicationController   def create     @payment = Payment.new(params[:payment])      if @payment.valid? && @payment.purchase       flash[:notice] = 'Thanks for Purchase!'       redirect_to root_url     else       render :action => :new     end   end end </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[understanding rails uri]]></title>
    <link href="http://sandipransing.github.io/2012/01/understanding-rails-uri/"/>
    <updated>2012-01-14T02:18:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/understanding-rails-uri</id>
    <content type="html"><![CDATA[<div class='post'>
rails-uri module provide us with url manipulation methods<br/> <b>Parse string url</b><pre class=ruby>url = URI.parse('http://funonrails.com/search/label/rails3') url.host #=> "http://funonrails.com" url.port #=> 80 </pre><br/><b>URL with Basic Authentication </b><br/><pre class=ruby>url = URI.parse('http://sandip:2121@funonrails.com/search/label/rails3') url.user #=> "sandip" url.password #=> "2121" </pre><br/><b>Extracting urls form string paragraph</b><br/><pre class=ruby>URI.extract('http://funonrails.com is rails blog authored by http://sandipransing.github.com contact mailto://sandip@funonrails.com') #=> ["http://funonrails.com", "http://sandipransing.github.com", "mailto://sandip@funonrails.com"] </pre> <b>Split & Join URI</b><br/><pre class=ruby>URI.split('http://sandip:2121@funonrails.com/search/label/rails3') #=> ["http", "sandip:2121", "funonrails.com", nil, nil, "/search/label/rails3", nil, nil, nil]  <=> [Scheme, Userinfo, Host, Port, Registry, Path, Opaque, Query, Fragment]    URI.join('http://funonrails.com','search/label/rails3') #=> #<URI::HTTP:0x7fbf9202efc8 URL:http://funonrails.com/search/label/rails3></pre><br/><b>Escape & Unescape alias encode/decode URI</b><br/><pre class=ruby>URI.escape('http://funonrails.com/search/?label=\\rails\3') URI.encode('http://funonrails.com/search/?label=\\rails\3') #=> "http://funonrails.com/search/?label=%5Crails%5C3"  URI.unescape("http://funonrails.com/search/?label=%5Crails%5C3") URI.decode("http://funonrails.com/search/?label=%5Crails%5C3") #=> "http://funonrails.com/search/?label=\\rails\\3" </pre><br/><b>Match urls using regular expressions </b><br/><pre class=ruby>"http://funonrails.com/search/label/rails3".sub(URI.regexp(['search'])) do |*matchs|   p $& end #=> "http://funonrails.com/search/label/rails3" </pre><br/><b>Getting requested url inside rails</b><br/><pre class=ruby>request.request_uri request.env['REQUEST_URI'] </pre><br/><b>Getting previous page url inside rails</b><br/><pre class=ruby>request.referrer </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypal payments integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails/"/>
    <updated>2011-12-30T18:00:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails</id>
    <content type="html"><![CDATA[<div class='post'>
Paypal standard website payment service allows online payment transactions for websites. <br />Before implementing payments inside rails app needs to have following things in place- <br />1. <a href="http://developer.paypal.com/">Register Paypal sandbox account</a><br />2. Paypal Merchant account api credentials i.e. login, password, signature, application_id<br />3. Paypal Buyer account creds to test payments<br /><br /><b>Bundle Install</b><br /><pre class='ruby'># Gemfile     <br />gem 'activemerchant <br /></pre><b>Gateway config</b><br /><pre class='ruby'># config/gateway.yml <br />development: &development     <br />  mode: test     <br />  login: rana_1317365002_biz_api1.gmail.com     <br />  password: '1311235050'     <br />  signature: ACxcVrB3mFChvPIe8aDWQlLhAPN46oPBQCj7rJWPza6CDZmBURg.     <br />  application_id: APP-76y884485P519543T  <br /><br />production:    <br />  <<: *development<br /><br />test:<br />  <<: *development<br /></pre><b>New Payment Form</b><pre class='ruby'>= form_for @payment ||= Payment.new, :url => pay_bill_url, :html => {:id => :payForm} do |p|    <br />  = p.text_field :amount   <br />  = p.submit 'Pay' <br /></pre><b>Generate & Migrate Payment Model</b><pre class='ruby'>rails g model payment status:string amount:float transaction_number:string   <br />rake db:migrate <br /></pre><b>Payment Model</b><pre class='ruby'># app/models/payment.rb  <br />class Payment < ActiveRecord::Base<br /><br />  PROCESSING, FAILED, SUCCESS = 1, 2, 3<br /><br />  validates :amount, :presence => true, :numericality => { :greater_than => 0 }    <br />  def self.conf<br />    @@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   <br />  end    <br />  <br />  ## Paypal    <br />  def setup_purchase(options)     <br />    gateway.setup_purchase(amount * 100, options)   <br />  end    <br />  <br />  def redirect_url_for(token)      <br />    gateway.redirect_url_for(token)   <br />  end <br />  <br />  def purchase(options={}) <br />    self.status = PROCESSING  <br />    #:ip       => request.remote_ip,<br />    #:payer_id => params[:payer_id],<br />    #:token    => params[:token]<br />    response = gateway.purchase(amt, options)      <br />    if response.success?       <br />      self.transaction_num = response.params['transaction_id']       <br />      self.status = SUCCESS     <br />    else       <br />      self.status = FAILED     <br />    end     <br />    return self   <br />  rescue Exception => e     <br />    self.status = FAILED     <br />    return self   <br />  end    <br /><br />  private   <br />  def gateway <br />    ActiveMerchant::Billing::Base.mode = auth['mode'].to_sym <br />    ActiveMerchant::Billing::PaypalExpressGateway.new(<br />      :login => auth['login'], :password => auth['password'],<br />      :signature => auth['signature']) <br />  end<br /><br />  def auth <br />    self.class.conf <br />  end<br />end <br /></pre><b>Billing routes </b><pre class='ruby'>## Callback URL   <br />match '/billing/paypal/:id/confirm', :to => 'billing#paypal', :as => :confirm_paypal   <br />## Create payment   <br />match '/billing', :to => 'billing#create', :as => :pay_bill   <br />## Request URL   <br />match '/billing/paypal/:id', :to => 'billing#checkout', :as => :billing   <br />match '/billing/thank_you/:id', :to => 'billing#checkout', :as => :billing_thank_you </pre><b>Billing Controller</b>  <pre class='ruby'># app/controllers/billing_controller.rb<br />class BillingController < ApplicationController<br />  before_filter :get_payment, :only => [:checkout, :paypal, :thank_you]      <br />  <br />  def create     <br />    @payment = Payment.new params[:payment]     <br />    if @payment.save       <br />      ## Paypal Checkout page       <br />      redirect_to billing_url    <br />    else     <br />      render :action => :new    <br />    end <br />  end    <br />  <br />  # ASSUMPTION   # payment is valid i.e. amount is entered   <br />  def checkout    <br />    response = @payment.setup_purchase(:return_url => confirm_paypal_url(@payment), :cancel_return_url => root_url)     <br />    redirect_to @payment.redirect_url_for(response.token)   <br />  end    <br />  <br />  ## CALL BACK   <br />  def paypal    <br />    @payment = @payment.purchase(:token => params[:token], :payer_id => params[:PayerID], :ip => request.remote_ip)    <br />    @payment.save    <br />    redirect_to thank_you_billing_url(@order)  <br />  end    <br />  <br />  private   <br />  def get_payment     <br />    @payment = Payment.find_by_id(params[:id])     <br />    @payment && @payment.valid? || invalid_url   <br />  end <br />end<br /></pre><b>Views</b><pre class='ruby'># app/views/billing/thank_you.html.haml  <br />- if @payment.success?   <br />  %p The transaction is successfully completed <br />- else   <br />  %p The transaction failed <br /></pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net (SIM) payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration/"/>
    <updated>2011-12-30T16:16:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration</id>
    <content type="html"><![CDATA[<div class='post'>
Authorize Net SIM gateway transaction skips merchant side creditcard details form and directs transaction to be take place on gateway server.<br/> <pre class=ruby>  # Gemfile   gem 'authorize-net' </pre><br/>Register for authorize net sandbox account <a href='https://developer.authorize.net/testaccount/'>click here</a><br/><br/><b>Payment gateway credentials</b><br/><pre class=ruby># config/gateway.yml development: &development     mode: test     login: 9gdLh6T     key: 67fu45xw6VP92LX1  production:    <<: *development  test:    <<: *development </pre><br/> <b>Generate & Migrate Payment Model</b><br/><pre class=ruby>  rails g model payment status:string amount:float transaction_number:string   rake db:migrate </pre><br/> SIM gateway methods extracted and added to payment model <br/><pre class=ruby># app/models/payment.rb class Payment < ActiveRecord::Base      PROCESSING, FAILED, SUCCESS = 1, 2, 3      validates :amount, :presence => true, :numericality => { :greater_than => 0 }    def self.conf     @@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   end      def success?     self.status == SUCCESS   end    ## Authorize :: SIM   def setup_transaction(options ={})     options.merge!(:link_method => AuthorizeNet::SIM::HostedReceiptPage::LinkMethod::POST)     t = AuthorizeNet::SIM::Transaction.new(       auth['login'], auth['key'], amount,       :hosted_payment_form => true,       :test => auth['mode']     )     t.set_hosted_payment_receipt(AuthorizeNet::SIM::HostedReceiptPage.new(options))     return t   end    def auth     self.class.conf   end end </pre>Payment routes <br><pre class=ruby> ## Callback URL   match '/billing/:id/confirm', :to => 'billing#authorize', :as => :confirm_billing     ## Request URL   match '/billing/:id', :to => 'billing#checkout', :as => :billing   match '/billing/:id/thank_you', :to => 'billing#thank_you', :as => :thank_you_billing </pre> Billing controller <br/><pre class=ruby># app/controllers/billing_controller.rb  class BillingController < ApplicationController   helper :authorize_net    before_filter :get_order, :only => [:checkout, :authorize, :thank_you]    def checkout     # ASSUMPTION order is valid means amount is entered     @transaction = @order.setup_transaction(       {:link_text => 'Continue',         :link_url => confirm_billing_url(@order)})   end    ## CALL BACK   def authorize     resp = AuthorizeNet::SIM::Response.new(params)     if resp.approved?       @order.status = Payment::SUCCESS       @order.transaction_num = resp.transaction_id     else       @order.status = Payment::FAILED      end     @order.save(:validate => false)     redirect_to thank_you_billing_url(@order)   end    private   def auth     Payment.conf   end    def get_order     @order = Payment.find_by_id(params[:id])     @order && @order.valid? || invalid_url   end end </pre><br/>Views Forms<br/><pre class=ruby># app/views/billing/checkout.html.haml  = form_for :sim_transaction, :url => AuthorizeNet::SIM::Transaction::Gateway::TEST, :html => {:id => :authForm} do |f|   = sim_fields(@transaction) :javascript   $(document).ready(function(){     $('#authForm').submit();   }) </pre><br/><pre class=ruby># app/views/billing/thank_you.html.haml  - if @order.success?   %p The transaction is successfully completed - else   %p The transaction failed </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing rails default form builder]]></title>
    <link href="http://sandipransing.github.io/2011/12/using-formbuilder-in-rails/"/>
    <updated>2011-12-29T01:29:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/using-formbuilder-in-rails</id>
    <content type="html"><![CDATA[<div class='post'>
Customizing default rails form builder to adopt for labels, input fields, errors, hints, etc. in order to build forms just in minutes <br/><br/><pre class=ruby># app/helpers/app_form_builder.rb class AppFormBuilder < ActionView::Helpers::FormBuilder      HELPERS = %w[check_box text_field text_area password_field select date_select datetime_select file_field collection_select state_select label calendar_date_select]   def self.create_tagged_field(method_name)     define_method(method_name) do |name, *args|       errs = object.errors.on(name.to_sym) if object && object.errors        # initialize some local variables       if args.last.is_a?(Hash)         label = args.last.delete(:label)         suffix = args.last.delete(:suffix)         klass = args.last.delete(:class)         req = args.last.delete(:required)       end       label = 'none' if method_name == 'hidden_field'        label ||= name.to_s.titleize       label = nil if label == 'none'        klass = klass ? [klass] : []       # Custom class if it exists       if method_name =~ /text_field|check_box|select/         klass << method_name       end       klass << 'f' #A default selector       klass << 'error' if errs.present?       klass = klass.join(' ')        # Required Field Notations       if req == 'all' || (req == 'new' && object.new_record?)         label << @template.content_tag(:span, :*, :class => :req)       end        suffix = @template.content_tag(:label, suffix) if suffix.present?       label = @template.content_tag(:label, label) if label.present?       errs = @template.content_tag(:span, errs.to_s, :class => :message) if errs.present?       reverse = true if method_name == 'check_box'       if reverse         content = "#{super} #{suffix} #{label} #{errs}"       else         content = "#{label} #{super} #{suffix} #{errs}"       end        @template.content_tag(:div, content, :class => klass)     end   end    HELPERS.each do |name|     create_tagged_field(name)   end end </pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net Payment Gateway integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorize-net-payment-gateway/"/>
    <updated>2011-12-29T00:36:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorize-net-payment-gateway</id>
    <content type="html"><![CDATA[<div class='post'>
Authorize Net Payment gateway provides api access to enable online payments  <br/>Gateway provides different api options to integrate- <br/><br/> <b>1. Direct Post Method</b><br/> In this method gateway handles all steps required in payment transaction flow securely and clean manner. To know more on this <a href="https://developer.authorize.net/api/dpm">click here</a><br/><br/> <b>2. Server Integration Method (SIM)</b><br/> Here, Payment form and creditcard detail form resides on gateway site and all the steps in transaction carried out at gateway server <br/><br/> <b>3. Advance Integration Method (AIM)</b><br/> Provides full control of all the transaction steps at merchant server. Payment form resides on merchant side. merchnat server sends authorization and payment capture requests to gateway server where actual transaction takes place and response is sent back to merchant server to notify transaction status. To know detail integration on this <a href="http://www.funonrails.com/2011/12/authorizenet-aim-payment-integration.html">click here</a><br/><br/> <b>Prerequisites before getting started with integration</b> <br/><a href="https://developer.authorize.net/testaccount">Sign up for a test account</a> to obtain an API Login ID and Transaction Key. These keys will authenticate requests to the payment gateway.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railroady UML diagram generator for rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/railroady-uml-diagram-generator-for/"/>
    <updated>2011-12-28T23:42:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/railroady-uml-diagram-generator-for</id>
    <content type="html"><![CDATA[<div class='post'>
railroady is UML class diagram generator for rails.<br/> First you need to install `graphviz` pkg in order to have `dot` , `neato` commands available<br/><pre class=ruby>group :development, :test do   gem railroady end </pre><br/>Run below command to generate MVC diagrams<br/><pre class=ruby>bundle install  rake diagram:all </pre><br/>Individual diagram generation<br/><b>Model Diagram</b><pre class=ruby>railroady -M | dot -Tpng > models.png </pre><b>Controller Diagram</b><pre class=ruby>railroady -C | dot -Tpng > controllers.png </pre><b>AASM Diagram</b><pre class=ruby>railroady -A | dot -Tpng > aasm.png </pre> <b>Commands</b><br/><pre class=ruby>-M, --models                     Generate models diagram -C, --controllers                Generate controllers diagram -A, --aasm                       Generate "acts as state machine" diagram </pre><br/><b>Options</b><br/><pre class=ruby># Common options -b, --brief                      Generate compact diagram                                    (no attributes nor methods) -s, --specify file1[,fileN]      Specify given files only for the diagram                                    (can take a glob pattern) -e, --exclude file1[,fileN]      Exclude given files                                    (can take a glob pattern) -i, --inheritance                Include inheritance relations -l, --label                      Add a label with diagram information                                    (type, date, migration, version) -o, --output FILE                Write diagram to file FILE -v, --verbose                    Enable verbose output                                    (produce messages to STDOUT) </pre><br/><b>Models diagram options:</b><br/><pre class=ruby>-a, --all                        Include all models                                    (not only ActiveRecord::Base derived)     --all-columns                Show all columns                                     (not just content columns)     --hide-magic                 Hide magic field names     --hide-types                 Hide attributes type -j, --join                       Concentrate edges -m, --modules                    Include modules -p, --plugins-models             Include plugins models -t, --transitive                 Include transitive associations                                  (through inheritance) </pre><br/><b>Controllers diagram options:</b><pre class=ruby>--hide-public                Hide public methods --hide-protected             Hide protected methods --hide-private               Hide private methods </pre><br/><b>Other Options</b><pre class=ruby>-h, --help                       Show this message     --version                    Show version and copyright </pre></div>
]]></content>
  </entry>
  
</feed>

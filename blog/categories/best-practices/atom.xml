<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: best-practices | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/best-practices/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T23:18:57+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVC coding principles in rails]]></title>
    <link href="http://sandipransing.github.io/2010/03/mvc-coding-principles-in-rails/"/>
    <updated>2010-03-13T05:26:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/03/mvc-coding-principles-in-rails</id>
    <content type="html"><![CDATA[<div class='post'>
I believe this post should clear basic coding standards before getting started with rails development. <br />I just came with conversion started for declaring variables on rubyonrailstalk google group and that ended up with&nbsp;exploring the concepts of rails MVC coding principles. so, i thought it would be nice if they gets summarized somewhere.<br /><br />The question raised was -<br /><blockquote>"How to declare variables like arrays so that they are available everytime that layout or its related</blockquote><blockquote>partials are used. Putting @myarray = MyArray.all into every action in every controller doesn't seem very dry, so I guess I'm just looking for a very simple straighforward convention, but can't seem to find it documented anywhere or figure it out"&nbsp;-- capsized</blockquote>Before getting into actual conversion, I would like to notedown what rails is.<br /><blockquote>Rails is web framework developed in ruby language. The main purpose behind is to make programmers life easy and development would be a fun. It is &nbsp;built over MVC framework and philosophy includes DRY, Convention over configuration and REST.</blockquote>Pasting debate conversion as it is.<br /><blockquote>Normally something like that goes into a high-level filter, like one&nbsp;<br/>in ApplicationController. &nbsp;--&nbsp;Xavier Noria</blockquote><blockquote>&nbsp;Put a before_filter in your ApplicationController. <br/>class ApplicationController <br/>&nbsp;&nbsp;before_filter :set_my_array<br/>&nbsp;&nbsp;private<br/>&nbsp;&nbsp;def set_my_array<br/>&nbsp;&nbsp; &nbsp;@myarray = MyArray.all<br/>&nbsp;&nbsp;end<br/>end<br/>-- Andy </blockquote><br /><blockquote>If it is literally something as simple as MyArray.all I believe there<br/>is nothing wrong with calling the model direct from the view.&nbsp;-- Colin</blockquote>And here goes the debate started. First of all, i was also agreed with this suggestion but next reply<br />started conversion.<br /><blockquote>It's dirty, horrible, bad form, breaks the separation of layers...<br/>Don't call the model from the view!&nbsp;-- Andy</blockquote><blockquote>Beware of the MVC police Colin, this suggestion will certanly not get<br/>good housekeeping seal of approval :D<br/>I agree through. I'm not gonna add a before filter just to set<br/>MyArray.all into a class variable. I'd rather call it directly and claim<br/>to be pragmatic.&nbsp;--Sharagoz</blockquote><br /><blockquote>But you are wrong. &nbsp;The view should never, ever, ever touch the&nbsp;database.<br/>Claim all you like. &nbsp;The fact is that in MVC architecture, database<br/>queries don't belong in the view. &nbsp;A before_filter is the proper place<br/>for this.&nbsp;--Marnen</blockquote><br /><blockquote>Is it considered ok to call model methods if they do not touch the db,<br/>or are model methods forbidden also? --&nbsp;Colin</blockquote><blockquote>I would say the view can call instance methods of the model (attributes - real and virtual) but no class methods.&nbsp;So:&nbsp;is OK, but:<br/>is not. &nbsp;It's a bit of a contrived example, but there you go. &nbsp;Accessing the model through instance variables you've created is OK, going directly to the model bypassing the controller is not.&nbsp;--Andy</blockquote><blockquote>I think it is appropriate for the view to call methods on the objects&nbsp;passed in by the controller, provided that these methods do not change&nbsp;the model or touch the database.<br/>Example:<br/># controller<br/>def my_action<br/>&nbsp;@person = Person.find(params[:id])<br/>end<br/>#my_action.html.erb<br/>Good:&nbsp;-- Marnen</blockquote><br />Here started conclusion on topic<br /><blockquote>Good example. I just want to throw in a couple more twists and see what<br/>you think.<br/>1. What about methods on models that change themselves in some way?<br/>Suppose the last_viewed_at method returned a previously stored time,<br/>then updated the model to store a new current time. Maybe a bad example,<br/>but I hope you get my meaning.<br/>2. What about aggregating class methods like count, sum or avg?<br/>Obviously a class methods and does touch the database. I assume it would<br/>be better to let the controller deal with stuff like this.<br/>Controller<br/>&nbsp;@person_count = Person.count<br/>View&nbsp;-- Robert</blockquote><blockquote>I don't know what you mean by dirty, it saves several lines of code<br/>and when looking at the view code it is easier to see what is<br/>happening than to see a variable that has to be hunted for in a filter<br/>somewhere to find out what it is.<br/>It does not break the separation of layers any more than calling an<br/>instance method of a model does when using something like&nbsp;&amp;gt; Don't call the model from the view!<br/>@person.name is a model call from the view&nbsp;-- Colin</blockquote><blockquote>But think how many lines of code you are going to have to go edit when you realize that you need to change it.&nbsp;<br/>Also, I wouldn't consider Person.all to be more clean than @people. What if you need to exclude some? Person.all :conditions =&amp;gt; {whatever}, if you are just using a before filter, it is easy to override, you can override it for any given controller, and for any given controller method. If it's hard coded into the view, then that view has to serve everybody's wishes, it ends up having to know how it is to be used, and having lots of brittle conditional code for each of these situations.<br/>This is why the controller must be responsible for supplying the appropriate data to the view, not the view being responsible for creating it's own data.&nbsp;<br/>It might start as innocently as Person.all, it can easily turn into&nbsp;<br/>if this<br/>&nbsp;&nbsp;Person.all<br/>elsif that<br/>&nbsp;&nbsp;OtherPerson.all<br/>else<br/>&nbsp;&nbsp;Person.all + OtherPerson.all<br/>end&nbsp;-- Josh</blockquote>This took another turn in conversion -<br /><blockquote>Did you misunderstand my post? &nbsp;I was arguing for putting it in a filter rather than in the view (hence saying the 4 lines of before_filter, private, def and end was worth it).<br/>It sounds like - when you start with "But" - that you disagree, but the rest of your post seems to be arguing from the same side as my posts.&nbsp;-- Andy</blockquote>And finally Colin ended up conversion with conclusion -<br /><blockquote>An excellent post if I may say so that brings out the salient points I<br/>think. &nbsp;Can the issues be summarised as follows?</blockquote><blockquote><ul><li>The controller should provide all the data that the view should display in instance variables (@person for example).</li><li>The view is expected to understand the structure of the objects and so can access attributes (virtual or otherwise) of the objects.</li><li>If the model needs to access the db in order to provide an attribute value, or accessing the attribute has some side effect that affects the db, then this is ok, providing the view does not 'know' that the side effect or db access is happening. (Not very well written but I hope you know what I mean).</li><li>The view must not call any method of the model who's purpose is to perform an action rather than return a value.</li><li>The view should not make any explicit use of model classes. &nbsp;For example there should be no reference to Person or any other model class&nbsp;-- Colin</li></ul></blockquote></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Coding Standards]]></title>
    <link href="http://sandipransing.github.io/2009/05/rails-coding-standards/"/>
    <updated>2009-05-13T16:48:00+05:30</updated>
    <id>http://sandipransing.github.io/2009/05/rails-coding-standards</id>
    <content type="html"><![CDATA[<div class='post'>
<strong> IN ESSENCE: ALL CODE SHOULD BE READABLE!</strong><br/><br/># DO NOT OPTIMISE for performance - OPTIMISE FOR CLARITY OF CODE<br/><br/># STYLE: use 2 spaces for indent (not tabs)<br/><br/># STYLE: Line up hash arrows for readability<br/><br/># STYLE: put spaces around =&gt; hash arrows<br/><br/># STYLE: put spaces after ',' in method params - but none between method names and '('<br/><br/># VIEWS: use HAML for views<br/><br/># VIEWS: break up the structure with white space to help readability - VERTICALLY TOO!<br/><br/># VIEWS STYLE: Rely on structure of page, without having to insert messages or new components...<br/><br/># LOGIC:  <strong>Rails Models should be as heavy as in logic and controllers should be lightweight as much as .</strong><br/><br/>* Example: Effect to visually highlight then drop out an existing element rather than flash a message<br/><br/>* Example: Highlight newly added row rather than a message about it<br/><br/># AVOID logic in views - they should be simple<br/><br/># Views indentation should be well formatted.<br/>not like this<br/><pre class=ruby><br/>&lt;% for joke in @jokes %&gt;<br/>&lt;div class="joke"&gt;<br/>&lt;p&gt;<br/>&lt;%= h(truncate(joke.joketext, 20)) %&gt;<br/>&lt;%= link_to 'Read this joke', {:action =&gt; 'show_joke', :id =&gt; joke} %&gt;<br/>&lt;/p&gt;<br/>&lt;p class="author&gt;<br/>by &lt;%= h(joke.author.full_name) %&gt;&lt;/p&gt;<br/>&lt;/div&gt;<br/>&lt;% end %&gt;</pre><br/><br/>* put html generating logic into helpers<br/><br/>* instead of inline ruby logic, add to models (filtering, checking)<br/><br/># NEVER use ActiveRecord models in migrations unless you re-define them within the migration<br/><br/>* ...otherwise the migration fails when you later remove/rename the AR class<br/><br/>* BETTER SOLUTION: use bootstrapping until deployed!!!<br/><br/># AJAX only for sub-components of an object, and avoid over-use<br/><br/><hr /><br/><br/><strong>CONTROLLER CODING STANDARDS<br/></strong><br/><br/>1. Before filter should be added at the top of controller.<br/><br/>2. Before filter implementation should be immediate after filter declaration<br/><br/>3. Standard rails actions<br/><br/>4. Own custom actions<br/><br/>5. Inter-related actions should be clubbed together.<br/><br/>6. please, try to use of protected, private methods and they should be declared at the bottom of page in order.<br/><br/>7. Controller Actions should be like -<br/>use 2 spaces for indent (not tabs)<br/><pre class=ruby><br/>def self.published_jokes<br/>find(:all, :conditions =&gt; "published = 1")<br/>end</pre><br/><br/><strong>MODEL CODING STANDARDS</strong><br/><br/><pre class=ruby><br/>#======= HEADER SECTION=========</pre><br/><pre class=ruby><br/># SCHEMA INFORMATION WILL BE HERE<br/># REQUIRE FILES WILL GO HERE</pre><br/><br/>class Model &lt; ActiveRecord::Base<br/><br/><pre class=ruby> #======== TOP ===================</pre><br/><pre class=ruby><br/># LIBRARY OR INCLUDE METHODS<br/># MODEL RELATIONSHIPS<br/># VIRTUAL ATTRIBUTES<br/># ACTIVE RECORD VALIDATIONS</pre><br/><pre class=ruby> #======== MIDDLE ===============</pre><br/><pre class=ruby> # CUSTOM VALIDATIONS<br/># PUBLIC METHODS</pre><br/><pre class=ruby> #======== BASE ==================</pre><br/><pre class=ruby> # PROTECTED METHODS<br/># PRIVATE METHODS</pre><br/>end<br/><br/>Cheers !!!<br/>Sandip</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>sandipransing</div>
<div class='content'>
Some more ..........<br>http://rails.learnhub.com/lesson/5017-ruby-coding-convention</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>

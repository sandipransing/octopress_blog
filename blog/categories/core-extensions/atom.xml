<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: core-extensions | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/core-extensions/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-10T04:35:27+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Overriding to_s method for BigDecimal instance]]></title>
    <link href="http://sandipransing.github.io/2010/10/overriding-tos-method-for-bigdecimal/"/>
    <updated>2010-10-22T19:31:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/10/overriding-tos-method-for-bigdecimal</id>
    <content type="html"><![CDATA[<div class='post'>
requirement was to display decimal numbers which are having scale values present to be displayed in decimal format otherwise display them as integer.<br/><br/><b>Output expected</b><br/>12.23 => 12.23<br/>12.00 => 12<br/><br/><br/>While rendering any object on html page by default "to_s" method gets executed. So, i overwrote "to_s" method of BigDecimal class as below. <br/><br/>Anyone having better solution. Please reply with your solutions. Many thanks!<br/>Put below code in file "config/intializers/core_extensions.rb" <br/><br/><pre class=ruby>  class BigDecimal     alias :old_s :to_s     def to_s       return to_i.to_s if eql? to_i       self.old_s     end   end </pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extend enumerable to add method collect_with_index]]></title>
    <link href="http://sandipransing.github.io/2010/02/extend-enumerable-to-add-method/"/>
    <updated>2010-02-18T14:24:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/02/extend-enumerable-to-add-method</id>
    <content type="html"><![CDATA[<div class='post'>
<b> Extend enumerable functionality to iterate along with index </b><br/><pre class=ruby>module Enumerable   def collect_with_index(i=0)     collect{|elm| yield(elm, i+=1)}   end   alias map_with_index collect_with_index end </pre><br/><b> Example use : </b><br/><pre class=ruby> ree-1.8.7-2010.01 > ['ruby', 'rails', 'sandip'].map_with_index{ |w,i|  [w, i] }  #=> [["ruby", 1], ["rails", 2], ["sandip", 3]]    ree-1.8.7-2010.01 > ['ruby', 'rails', 'sandip'].collect_with_index{ |w,i|  [w,  i] }  #=> [["ruby", 1], ["rails", 2], ["sandip", 3]]   #By default index starts from zero to specify custom index to start from,  #pass index to collect_with_index   ree-1.8.7-2010.01 > ['ruby', 'rails', 'sandip'].map_with_index(-1){ |w,i|  [w, i] }  #=> [["ruby", 0], ["rails", 1], ["sandip", 2]]   ree-1.8.7-2010.01 > ['ruby', 'rails', 'sandip'].map_with_index(5){ |w,i|  [w, i] }  #=> [["ruby", 6], ["rails", 7], ["sandip", 8]] </pre></div>

]]></content>
  </entry>
  
</feed>

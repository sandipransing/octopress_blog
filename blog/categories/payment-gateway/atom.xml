<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: payment gateway | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/payment-gateway/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T23:18:57+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[stripe gateway payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2012/01/stripe-gateway-payment-integration-with/"/>
    <updated>2012-01-15T00:53:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/stripe-gateway-payment-integration-with</id>
    <content type="html"><![CDATA[<div class='post'>
Stripe is simple website payment solution and its very easy to easy setup<br/>It currently supports only in US and seems to be very popular compared to other payment gateways because of its api & pricing<br/><br/>Stripe API provides -<br/>1. charge (regular payments)<br/>2. subscription (recurring payments)<br/>3. managing customers (via stripe_customer_token)<br/> <br/><b>What you need to do ?</b><br/>Create a stripe account by providing email address and password. There after go to the <a href="https://manage.stripe.com/account">manage account page</a> to obtain stripe public & api keys.<br/> <b>Rails Integration</b><br/><pre class=ruby># Gemfile   gem stripe </pre><br/><pre class=ruby># config/initializers/stripe.rb  Stripe.api_key = "rGaNWsIG3Gy6zvXB8wv4rEcizJp6XjF5" STRIPE_PUBLIC_KEY = "vk_BcSyS2qPWdT5SdrwkQg0vTSyhZgqN" </pre><br/><pre class=ruby># app/views/layouts/application.html.haml  = javascript_include_tag 'https://js.stripe.com/v1/' = tag :meta, :name => 'stripe-key', :content => STRIPE_PUBLIC_KEY </pre><br/><b>Payment Form</b><br/><pre class=ruby># app/views/payments/new.html.haml   #stripe_error   %noscript JavaScript is not enabled and is required for this form. First enable it in your web browser settings.  = form_for @payment ||= Payment.new, :html => {:id => :payForm} do |p|   = p.hidden_field :stripe_card_token   .field     = p.text_field :amount   .credit_card_form     %h3.title       Enter Credit Card     - if @payment.stripe_card_token.present?       Credit card has been provided.     - else       .field         = label_tag :card_number, "Credit Card Number"         = text_field_tag :card_number, nil, name: nil       .field         = label_tag :card_code, "Security Code (CVV)"         = text_field_tag :card_code, nil, name: nil       .field         = label_tag :card_month, "Expiry Date"         = select_month nil, {add_month_numbers: true}, {name: nil, id: "card_month"}         = select_year nil, {start_year: Date.today.year, end_year: Date.today.year+15}, {name: nil, id: "card_year"}   </pre><br/><b>Javascript Code</b><br/><pre class=ruby> # app/views/payments/new.js   var payment; jQuery(function() {    Stripe.setPublishableKey($('meta[name="stripe-key"]').attr('content'));   return payment.setupForm(); });  payment = {    setupForm: function() {      $('.head').click(function() {       $(this).css('disabled', true);        if($('#payment_stripe_card_token').val()){         $('#payForm').submit();       }       else{         payment.processCard();       }     });   },    processCard: function() {      var card;     card = {       number: $('#card_number').val(),       cvc: $('#card_code').val(),       expMonth: $('#card_month').val(),       expYear: $('#card_year').val()     };     return Stripe.createToken(card, payment.handleStripeResponse);   },   handleStripeResponse: function(status, response) {     if (status === 200) {       $('#payment_stripe_card_token').val(response.id)       $('#stripe_error').remove();       $('#payForm').submit();     } else {       $('#stripe_error').addClass('error').text(response.error.message);       $('.head').css('disabled', false);     }   } };  </pre><br/><b>Generate & Migrate Payment Model</b><br/><pre class=ruby>  rails g model payment status:string amount:float email:string transaction_number:string   rake db:migrate </pre><br/><b>Payment Model</b><br/><pre class=ruby># app/models/payment.rb  class Payment < ActiveRecord::Base   PROCESSING, FAILED, SUCCESS = 1, 2, 3      attr_accessible :stripe_card_token      validates :amount, :stripe_card_token, :presence => true, :numericality => { :greater_than => 0 }    def purchase     self.status = PROCESSING          customer = Stripe::Customer.create(description:email, card: stripe_card_token)     # OPTIONAL: save customer token for further reference     stripe_customer_token = customer.id          # Charge     charge = Stripe::Charge.create(      :amount => amount * 100, # $15.00 this time      :currency => "usd",      :customer => stripe_customer_token     )      if charge.paid       self.transaction_num = charge.id       self.status = SUCCESS     else       self.status = FAILED     end     return self   rescue Exception => e     errors.add :base, "There was a problem with your credit card."     self.status = FAILED     return self   end end </pre><br/><b>Payments Controller</b><br/><pre class=ruby># app/controllers/payments_controller.rb   class PaymentsController < ApplicationController   def create     @payment = Payment.new(params[:payment])      if @payment.valid? && @payment.purchase       flash[:notice] = 'Thanks for Purchase!'       redirect_to root_url     else       render :action => :new     end   end end </pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypal payments integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails/"/>
    <updated>2011-12-30T18:00:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails</id>
    <content type="html"><![CDATA[<div class='post'>
Paypal standard website payment service allows online payment transactions for websites. <br />Before implementing payments inside rails app needs to have following things in place- <br />1. <a href="http://developer.paypal.com/">Register Paypal sandbox account</a><br />2. Paypal Merchant account api credentials i.e. login, password, signature, application_id<br />3. Paypal Buyer account creds to test payments<br /><br /><b>Bundle Install</b><br /><pre class='ruby'># Gemfile     <br />gem 'activemerchant <br /></pre><b>Gateway config</b><br /><pre class='ruby'># config/gateway.yml <br />development: &development     <br />  mode: test     <br />  login: rana_1317365002_biz_api1.gmail.com     <br />  password: '1311235050'     <br />  signature: ACxcVrB3mFChvPIe8aDWQlLhAPN46oPBQCj7rJWPza6CDZmBURg.     <br />  application_id: APP-76y884485P519543T  <br /><br />production:    <br />  <<: *development<br /><br />test:<br />  <<: *development<br /></pre><b>New Payment Form</b><pre class='ruby'>= form_for @payment ||= Payment.new, :url => pay_bill_url, :html => {:id => :payForm} do |p|    <br />  = p.text_field :amount   <br />  = p.submit 'Pay' <br /></pre><b>Generate & Migrate Payment Model</b><pre class='ruby'>rails g model payment status:string amount:float transaction_number:string   <br />rake db:migrate <br /></pre><b>Payment Model</b><pre class='ruby'># app/models/payment.rb  <br />class Payment < ActiveRecord::Base<br /><br />  PROCESSING, FAILED, SUCCESS = 1, 2, 3<br /><br />  validates :amount, :presence => true, :numericality => { :greater_than => 0 }    <br />  def self.conf<br />    @@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   <br />  end    <br />  <br />  ## Paypal    <br />  def setup_purchase(options)     <br />    gateway.setup_purchase(amount * 100, options)   <br />  end    <br />  <br />  def redirect_url_for(token)      <br />    gateway.redirect_url_for(token)   <br />  end <br />  <br />  def purchase(options={}) <br />    self.status = PROCESSING  <br />    #:ip       => request.remote_ip,<br />    #:payer_id => params[:payer_id],<br />    #:token    => params[:token]<br />    response = gateway.purchase(amt, options)      <br />    if response.success?       <br />      self.transaction_num = response.params['transaction_id']       <br />      self.status = SUCCESS     <br />    else       <br />      self.status = FAILED     <br />    end     <br />    return self   <br />  rescue Exception => e     <br />    self.status = FAILED     <br />    return self   <br />  end    <br /><br />  private   <br />  def gateway <br />    ActiveMerchant::Billing::Base.mode = auth['mode'].to_sym <br />    ActiveMerchant::Billing::PaypalExpressGateway.new(<br />      :login => auth['login'], :password => auth['password'],<br />      :signature => auth['signature']) <br />  end<br /><br />  def auth <br />    self.class.conf <br />  end<br />end <br /></pre><b>Billing routes </b><pre class='ruby'>## Callback URL   <br />match '/billing/paypal/:id/confirm', :to => 'billing#paypal', :as => :confirm_paypal   <br />## Create payment   <br />match '/billing', :to => 'billing#create', :as => :pay_bill   <br />## Request URL   <br />match '/billing/paypal/:id', :to => 'billing#checkout', :as => :billing   <br />match '/billing/thank_you/:id', :to => 'billing#checkout', :as => :billing_thank_you </pre><b>Billing Controller</b>  <pre class='ruby'># app/controllers/billing_controller.rb<br />class BillingController < ApplicationController<br />  before_filter :get_payment, :only => [:checkout, :paypal, :thank_you]      <br />  <br />  def create     <br />    @payment = Payment.new params[:payment]     <br />    if @payment.save       <br />      ## Paypal Checkout page       <br />      redirect_to billing_url    <br />    else     <br />      render :action => :new    <br />    end <br />  end    <br />  <br />  # ASSUMPTION   # payment is valid i.e. amount is entered   <br />  def checkout    <br />    response = @payment.setup_purchase(:return_url => confirm_paypal_url(@payment), :cancel_return_url => root_url)     <br />    redirect_to @payment.redirect_url_for(response.token)   <br />  end    <br />  <br />  ## CALL BACK   <br />  def paypal    <br />    @payment = @payment.purchase(:token => params[:token], :payer_id => params[:PayerID], :ip => request.remote_ip)    <br />    @payment.save    <br />    redirect_to thank_you_billing_url(@order)  <br />  end    <br />  <br />  private   <br />  def get_payment     <br />    @payment = Payment.find_by_id(params[:id])     <br />    @payment && @payment.valid? || invalid_url   <br />  end <br />end<br /></pre><b>Views</b><pre class='ruby'># app/views/billing/thank_you.html.haml  <br />- if @payment.success?   <br />  %p The transaction is successfully completed <br />- else   <br />  %p The transaction failed <br /></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net (SIM) payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration/"/>
    <updated>2011-12-30T16:16:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration</id>
    <content type="html"><![CDATA[<div class='post'>
Authorize Net SIM gateway transaction skips merchant side creditcard details form and directs transaction to be take place on gateway server.<br/> <pre class=ruby>  # Gemfile   gem 'authorize-net' </pre><br/>Register for authorize net sandbox account <a href='https://developer.authorize.net/testaccount/'>click here</a><br/><br/><b>Payment gateway credentials</b><br/><pre class=ruby># config/gateway.yml development: &development     mode: test     login: 9gdLh6T     key: 67fu45xw6VP92LX1  production:    <<: *development  test:    <<: *development </pre><br/> <b>Generate & Migrate Payment Model</b><br/><pre class=ruby>  rails g model payment status:string amount:float transaction_number:string   rake db:migrate </pre><br/> SIM gateway methods extracted and added to payment model <br/><pre class=ruby># app/models/payment.rb class Payment < ActiveRecord::Base      PROCESSING, FAILED, SUCCESS = 1, 2, 3      validates :amount, :presence => true, :numericality => { :greater_than => 0 }    def self.conf     @@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   end      def success?     self.status == SUCCESS   end    ## Authorize :: SIM   def setup_transaction(options ={})     options.merge!(:link_method => AuthorizeNet::SIM::HostedReceiptPage::LinkMethod::POST)     t = AuthorizeNet::SIM::Transaction.new(       auth['login'], auth['key'], amount,       :hosted_payment_form => true,       :test => auth['mode']     )     t.set_hosted_payment_receipt(AuthorizeNet::SIM::HostedReceiptPage.new(options))     return t   end    def auth     self.class.conf   end end </pre>Payment routes <br><pre class=ruby> ## Callback URL   match '/billing/:id/confirm', :to => 'billing#authorize', :as => :confirm_billing     ## Request URL   match '/billing/:id', :to => 'billing#checkout', :as => :billing   match '/billing/:id/thank_you', :to => 'billing#thank_you', :as => :thank_you_billing </pre> Billing controller <br/><pre class=ruby># app/controllers/billing_controller.rb  class BillingController < ApplicationController   helper :authorize_net    before_filter :get_order, :only => [:checkout, :authorize, :thank_you]    def checkout     # ASSUMPTION order is valid means amount is entered     @transaction = @order.setup_transaction(       {:link_text => 'Continue',         :link_url => confirm_billing_url(@order)})   end    ## CALL BACK   def authorize     resp = AuthorizeNet::SIM::Response.new(params)     if resp.approved?       @order.status = Payment::SUCCESS       @order.transaction_num = resp.transaction_id     else       @order.status = Payment::FAILED      end     @order.save(:validate => false)     redirect_to thank_you_billing_url(@order)   end    private   def auth     Payment.conf   end    def get_order     @order = Payment.find_by_id(params[:id])     @order && @order.valid? || invalid_url   end end </pre><br/>Views Forms<br/><pre class=ruby># app/views/billing/checkout.html.haml  = form_for :sim_transaction, :url => AuthorizeNet::SIM::Transaction::Gateway::TEST, :html => {:id => :authForm} do |f|   = sim_fields(@transaction) :javascript   $(document).ready(function(){     $('#authForm').submit();   }) </pre><br/><pre class=ruby># app/views/billing/thank_you.html.haml  - if @order.success?   %p The transaction is successfully completed - else   %p The transaction failed </pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net Payment Gateway integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorize-net-payment-gateway/"/>
    <updated>2011-12-29T00:36:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorize-net-payment-gateway</id>
    <content type="html"><![CDATA[<div class='post'>
Authorize Net Payment gateway provides api access to enable online payments  <br/>Gateway provides different api options to integrate- <br/><br/> <b>1. Direct Post Method</b><br/> In this method gateway handles all steps required in payment transaction flow securely and clean manner. To know more on this <a href="https://developer.authorize.net/api/dpm">click here</a><br/><br/> <b>2. Server Integration Method (SIM)</b><br/> Here, Payment form and creditcard detail form resides on gateway site and all the steps in transaction carried out at gateway server <br/><br/> <b>3. Advance Integration Method (AIM)</b><br/> Provides full control of all the transaction steps at merchant server. Payment form resides on merchant side. merchnat server sends authorization and payment capture requests to gateway server where actual transaction takes place and response is sent back to merchant server to notify transaction status. To know detail integration on this <a href="http://www.funonrails.com/2011/12/authorizenet-aim-payment-integration.html">click here</a><br/><br/> <b>Prerequisites before getting started with integration</b> <br/><a href="https://developer.authorize.net/testaccount">Sign up for a test account</a> to obtain an API Login ID and Transaction Key. These keys will authenticate requests to the payment gateway.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net (AIM) payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorizenet-aim-payment-integration/"/>
    <updated>2011-12-28T17:15:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorizenet-aim-payment-integration</id>
    <content type="html"><![CDATA[<div class='post'>
Authorize Net (AIM) method enables internet merchants to accept online payments via credit card.<br/>Below post will show you how to integrate authorize net payment gateway inside rails app to accept online payments using activemerchant library.<br/> <pre class=ruby>  # Gemfile   gem 'activemerchant', :require => 'active_merchant' </pre><br/>Register for authorize net sandbox account <a href='https://developer.authorize.net/testaccount/'>click here</a><br/><br/><b>Payment gateway credentials</b><br/><pre class=ruby># config/authorize_net.yml development: &development     mode: test     login: 9gdLh6T     key: 67fu45xw6VP92LX1  production:    <<: *development  test:    <<: *development </pre><br/><b>Payment & creditcard form </b><br/><pre class=ruby># app/views/payments/new = form_for @payment, :url => payments_url do |f|   = f.text_field :amount   = fields_for :creditcard, @creditcard do |cc|     = cc.text_field :name     = cc.text_field :number     = cc.select :month, Date::ABBR_MONTHNAMES.compact.each_with_index.collect{|m, i| [m, i+1]}, {:prompt => 'Select'}     = cc.select :year, Array.new(15){|i| Date.current.year+i}, {:prompt => 'Select'}     = cc.text_field :verification_value   = f.submit 'Pay' </pre><br/><b>Payments Controller </b><br/><pre class=ruby># app/controllers/payments_controller.rb  class PaymentsController < ApplicationController    def new     @payment = Payment.new     @creditcard = ActiveMerchant::Billing::CreditCard.new   end    def create     @payment = Payment.new(params[:payment])     @creditcard = ActiveMerchant::Billing::CreditCard.new(params[:creditcard])     @payment.valid_card = @creditcard.valid?     if @payment.valid?        @payment = @payment.process_payment(@creditcard)       if @payment.success?         @payment.save         flash[:notice] = I18n.t('payment.success')         redirect_to payments_url and return       else         flash[:error] = I18n.t('payment.failed')       end     end     render :action => :new   end end </pre><br/><b>Generate & Migrate Payment Model</b><br/><pre class=ruby>  rails g model payment status:string amount:float transaction_number:string   rake db:migrate </pre><br/><b>Payment Model</b><br/><pre class=ruby># app/models/payment.rb  class Payment < ActiveRecord::Base    PROCESSING, FAILED, SUCCESS = 1, 2, 3    validates :valid_card, :inclusion => {:in => [true], :message => 'Invalid Credit Card'}   validates :amount, :presence => true, :numericality => { :greater_than => 0 }    def process_payment(creditcard)     ActiveMerchant::Billing::Base.mode = auth['mode'].to_sym     self.status = PROCESSING     response = gateway.purchase(amount * 100, creditcard)      if response.success?       self.transaction_number = response.subscription_id       self.status = SUCCESS     else       self.status = FAILED     end     return self   rescue Exception => e     self.status = FAILED     return self   end    def success?     self.status == SUCCESS   end    private   def gateway     ActiveMerchant::Billing::AuthorizeNetGateway.new(       :login    => auth['login'],       :password => auth['key'])   end    def auth     @@auth ||= YAML.load_file("#{Rails.root}/config/authorize_net.yml")[Rails.env]   end end </pre></div>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-10T16:30:05+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading from Rails 2.1.x to Rails 2.3.11]]></title>
    <link href="http://sandipransing.github.io/2012/04/upgrading-from-rails-21x-to-rails-2311/"/>
    <updated>2012-04-04T22:13:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/04/upgrading-from-rails-21x-to-rails-2311</id>
    <content type="html"><![CDATA[<p>If your application is currently on any version of Rails 2.1.x,
Then following changes needs to be done for upgrading your application to Rails <code>2.3.11</code></p>

<ol>
<li>First install Rails version <code>2.3.11</code>
<code>
gem install rails -v2.3.11
</code></li>
<li>Freeze app ruby gems
<code>
rake rails:freeze:gems
</code>
Hopefully it should work for you but it gave me following error

<blockquote><p>undefined method `manage_gems' for Gem:Module</p></blockquote></li>
<li>Create sample rails 2.3.11 app
<code>
rails _2.3.11_ testsapp
</code>
Now, Copy all missing &ldquo;config/initializers/*&rdquo; files from new &ldquo;testapp to the application that to be upgraded.
<code>
cp testapp/config/initializers/* config/initializers
</code></li>
<li>Change Rails version inside <em>environment.rb</em> to <em>Rails 2.3.11</em>
```ruby

<h1>Specifies gem version of Rails to use when vendor/rails is not present</h1>

<p>RAILS_GEM_VERSION = &lsquo;2.3.11&rsquo;
```</p></li>
<li>Rename <i>app/controllers/application.rb</i> file to <i>app/controllers/application_controller.rb</i>
<strong>OR</strong>
<code>
rails:update:application_controller
</code></li>
<li>Start rails server and fix the issues one by one.
<code>
ruby script/server
</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongoid embeded_in and Array field management]]></title>
    <link href="http://sandipransing.github.io/2012/01/mongoid-embededin-and-array-field/"/>
    <updated>2012-01-20T01:12:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/mongoid-embededin-and-array-field</id>
    <content type="html"><![CDATA[<p>Previous post explains on <a href="http://www.funonrails.com/2012/01/mongoid-array-field-and-rails-form.html">mongoid document array field and rails form implementation</a>
Below example shows rails form integration of array field of embedded mongoid document
consider scenario, student embeds one family who has many assets
```ruby
class Student
  include Mongoid::Document</p>

<p>  field :name
  field :phone</p>

<p>  embeds_one  :family</p>

<p>  validates_associated :family
  accepts_nested_attributes_for :family
end
<code>
</code>ruby
class Family
  include Mongoid::Document
  ASSETS = [&lsquo;flat&rsquo;, &lsquo;car&rsquo;, &lsquo;business&rsquo;, &lsquo;bunglow&rsquo;, &lsquo;cash&rsquo;]</p>

<p>  field :members, type: Integer
  field :assets, type: Array
  field :religon</p>

<p>  embedded_in :student
end
<code>
Brief controller code
</code>ruby
class StudentsController &lt; ApplicationController
 def new
   @student = Student.new
   @student.family ||= @student.build_family
 end</p>

<p> def create
   @student = Student.new(params[:student])
   @student.family.assets.reject!(&amp;:blank?)
   if @student.save</p>

<pre><code> [...]
</code></pre>

<p>   else</p>

<pre><code> render :action =&gt; :new
</code></pre>

<p>   end
 end
end
<code>
view form will look like-
</code>haml
= form_for(@student) do |s|
  = s.text_field :name
  = s.text_field :phone
  &ndash; s.fields_for :family do |f|</p>

<pre><code>= f.text_field :members
= f.text_field :religion
- Family::ASSETS.each do |asset|
  /Here f.object_name #=&gt; student[family]
  = f.check_box :assets, :name =&gt; "#{f.object_name}[assets][]", asset
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[understanding rails uri]]></title>
    <link href="http://sandipransing.github.io/2012/01/understanding-rails-uri/"/>
    <updated>2012-01-14T02:18:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/understanding-rails-uri</id>
    <content type="html"><![CDATA[<p>rails-uri module provides us with url manipulation methods</p>

<p>Parse string url
<code>ruby
url = URI.parse('http://funonrails.com/search/label/rails3')
url.host #=&gt; "http://funonrails.com"
url.port #=&gt; 80
</code>
URL with Basic Authentication
<code>ruby
url = URI.parse('http://sandip:2121@funonrails.com/search/label/rails3')
url.user #=&gt; "sandip"
url.password #=&gt; "2121"
</code></p>

<p>Extracting urls form string paragraph
```ruby
URI.extract(&lsquo;<a href="http://funonrails.com">http://funonrails.com</a> is rails blog authored by <a href="http://sandipransing.github.com">http://sandipransing.github.com</a> contact <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#47;&#x2f;&#x73;&#97;&#x6e;&#100;&#105;&#112;&#x40;&#102;&#117;&#x6e;&#111;&#110;&#114;&#97;&#x69;&#108;&#x73;&#x2e;&#99;&#x6f;&#109;">&#x2f;&#x2f;&#x73;&#97;&#110;&#100;&#105;&#x70;&#64;&#x66;&#117;&#110;&#111;&#110;&#114;&#97;&#x69;&#108;&#115;&#46;&#x63;&#x6f;&#x6d;</a>&rsquo;)</p>

<h1>=> [&ldquo;<a href="http://funonrails.com">http://funonrails.com</a>&rdquo;, &ldquo;<a href="http://sandipransing.github.com">http://sandipransing.github.com</a>&rdquo;, &ldquo;<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#47;&#47;&#x73;&#x61;&#x6e;&#100;&#105;&#x70;&#x40;&#102;&#117;&#x6e;&#x6f;&#110;&#x72;&#x61;&#105;&#108;&#115;&#46;&#x63;&#x6f;&#x6d;">&#47;&#47;&#115;&#x61;&#110;&#x64;&#x69;&#112;&#x40;&#x66;&#117;&#x6e;&#111;&#110;&#x72;&#x61;&#x69;&#x6c;&#x73;&#46;&#99;&#x6f;&#x6d;</a>&rdquo;]</h1>

<p>```</p>

<p>Split &amp; Join URI
```ruby
URI.split(&lsquo;<a href="http://sandip:2121@funonrails.com/search/label/rails3">http://sandip:2121@funonrails.com/search/label/rails3</a>&rsquo;)</p>

<h1>=> [&ldquo;http&rdquo;, &ldquo;sandip:2121&rdquo;, &ldquo;funonrails.com&rdquo;, nil, nil, &ldquo;/search/label/rails3&rdquo;, nil, nil, nil]</h1>

<p>&lt;=> [Scheme, Userinfo, Host, Port, Registry, Path, Opaque, Query, Fragment]</p>

<p>URI.join(&lsquo;<a href="http://funonrails.com">http://funonrails.com</a>&rsquo;,&lsquo;search/label/rails3&rsquo;)</p>

<h1>=> #&lt;URI::<a href="HTTP:0x7fbf9202efc8">HTTP:0x7fbf9202efc8</a> URL:<a href="http://funonrails.com/search/label/rails3">http://funonrails.com/search/label/rails3</a>></h1>

<p><code>
Escape &amp; Unescape alias encode/decode URI
</code>ruby
URI.escape(&lsquo;<a href="http://funonrails.com/search/?label=\rails\3">http://funonrails.com/search/?label=\rails\3</a>&rsquo;)
URI.encode(&lsquo;<a href="http://funonrails.com/search/?label=\rails\3">http://funonrails.com/search/?label=\rails\3</a>&rsquo;)</p>

<h1>=> &ldquo;<a href="http://funonrails.com/search/?label=%5Crails%5C3">http://funonrails.com/search/?label=%5Crails%5C3</a>&rdquo;</h1>

<p>URI.unescape(&ldquo;<a href="http://funonrails.com/search/?label=%5Crails%5C3">http://funonrails.com/search/?label=%5Crails%5C3</a>&rdquo;)
URI.decode(&ldquo;<a href="http://funonrails.com/search/?label=%5Crails%5C3">http://funonrails.com/search/?label=%5Crails%5C3</a>&rdquo;)</p>

<h1>=> &ldquo;<a href="http://funonrails.com/search/?label=\rails\3">http://funonrails.com/search/?label=\rails\3</a>&rdquo;</h1>

<p>```</p>

<p>Match urls using regular expressions
```
&ldquo;<a href="http://funonrails.com/search/label/rails3">http://funonrails.com/search/label/rails3</a>&rdquo;.sub(URI.regexp([&lsquo;search&rsquo;])) do |*matchs|
  p $&amp;
end</p>

<h1>=> &ldquo;<a href="http://funonrails.com/search/label/rails3">http://funonrails.com/search/label/rails3</a>&rdquo;</h1>

<p>```</p>

<p>Getting requested url inside rails
<code>ruby
request.request_uri
request.env['REQUEST_URI']
</code></p>

<p>Getting previous page url inside rails
<code>
request.referrer
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypal payments integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails/"/>
    <updated>2011-12-30T18:00:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails</id>
    <content type="html"><![CDATA[<p>Paypal standard website payment service allows online payment transactions for websites.
Before implementing payments inside rails app needs to have following things in place &ndash;</p>

<ol>
<li><a href="http://developer.paypal.com/">Register Paypal sandbox account</a></li>
<li>Paypal Merchant account api credentials i.e. login, password, signature, application_id</li>
<li>Paypal Buyer account creds to test payments</li>
</ol>


<p>Bundle Install
```</p>

<h1>Gemfile</h1>

<p>gem &lsquo;activemerchant
<code>
Gateway config
</code></p>

<h1>config/gateway.yml</h1>

<p>development: &amp;development   <br/>
  mode: test   <br/>
  login: rana_1317365002_biz_api1.gmail.com   <br/>
  password: &lsquo;1311235050&rsquo;   <br/>
  signature: ACxcVrB3mFChvPIe8aDWQlLhAPN46oPBQCj7rJWPza6CDZmBURg.   <br/>
  application_id: APP-76y884485P519543T</p>

<p>production:  <br/>
  &lt;&lt;: *development</p>

<p>test:
  &lt;&lt;: *development
<code>
New Payment Form
</code>haml
= form_for @payment ||= Payment.new, :url => pay_bill_url, :html => {:id => :payForm} do |p|  <br/>
  = p.text_field :amount <br/>
  = p.submit &lsquo;Pay&rsquo;
```</p>

<p>Generate &amp; Migrate Payment Model
<code>
rails g model payment status:string amount:float transaction_number:string   
rake db:migrate
</code></p>

<p>Payment Model
```ruby</p>

<h1>app/models/payment.rb</h1>

<p>class Payment &lt; ActiveRecord::Base</p>

<p>  PROCESSING, FAILED, SUCCESS = 1, 2, 3</p>

<p>  validates :amount, :presence => true, :numericality => { :greater_than => 0 }  <br/>
  def self.conf</p>

<pre><code>@@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   
</code></pre>

<p>  end</p>

<p>  ## Paypal  <br/>
  def setup_purchase(options)</p>

<pre><code>gateway.setup_purchase(amount * 100, options)   
</code></pre>

<p>  end</p>

<p>  def redirect_url_for(token)</p>

<pre><code>gateway.redirect_url_for(token)   
</code></pre>

<p>  end</p>

<p>  def purchase(options={})</p>

<pre><code>self.status = PROCESSING  
#:ip       =&gt; request.remote_ip,
#:payer_id =&gt; params[:payer_id],
#:token    =&gt; params[:token]
response = gateway.purchase(amt, options)      
if response.success?       
  self.transaction_num = response.params['transaction_id']       
  self.status = SUCCESS     
else       
  self.status = FAILED     
end     
return self   
</code></pre>

<p>  rescue Exception => e</p>

<pre><code>self.status = FAILED     
return self   
</code></pre>

<p>  end</p>

<p>  private <br/>
  def gateway</p>

<pre><code>ActiveMerchant::Billing::Base.mode = auth['mode'].to_sym 
ActiveMerchant::Billing::PaypalExpressGateway.new(
  :login =&gt; auth['login'], :password =&gt; auth['password'],
  :signature =&gt; auth['signature']) 
</code></pre>

<p>  end</p>

<p>  def auth</p>

<pre><code>self.class.conf 
</code></pre>

<p>  end
end
<code>
Billing routes
</code>ruby</p>

<h2>Callback URL</h2>

<p>match &lsquo;/billing/paypal/:id/confirm&rsquo;, :to => &lsquo;billing#paypal&rsquo;, :as => :confirm_paypal</p>

<h2>Create payment</h2>

<p>match &lsquo;/billing&rsquo;, :to => &lsquo;billing#create&rsquo;, :as => :pay_bill</p>

<h2>Request URL</h2>

<p>match &lsquo;/billing/paypal/:id&rsquo;, :to => &lsquo;billing#checkout&rsquo;, :as => :billing <br/>
match &lsquo;/billing/thank_you/:id&rsquo;, :to => &lsquo;billing#checkout&rsquo;, :as => :billing_thank_you
```</p>

<p>Billing Controller
```ruby</p>

<h1>app/controllers/billing_controller.rb</h1>

<p>class BillingController &lt; ApplicationController
  before_filter :get_payment, :only => [:checkout, :paypal, :thank_you]</p>

<p>  def create</p>

<pre><code>@payment = Payment.new params[:payment]     
if @payment.save       
  ## Paypal Checkout page       
  redirect_to billing_url    
else     
  render :action =&gt; :new    
end 
</code></pre>

<p>  end</p>

<p>  # ASSUMPTION   # payment is valid i.e. amount is entered <br/>
  def checkout</p>

<pre><code>response = @payment.setup_purchase(:return_url =&gt; confirm_paypal_url(@payment), :cancel_return_url =&gt; root_url)     
redirect_to @payment.redirect_url_for(response.token)   
</code></pre>

<p>  end</p>

<p>  ## CALL BACK <br/>
  def paypal</p>

<pre><code>@payment = @payment.purchase(:token =&gt; params[:token], :payer_id =&gt; params[:PayerID], :ip =&gt; request.remote_ip)    
@payment.save    
redirect_to thank_you_billing_url(@order)  
</code></pre>

<p>  end</p>

<p>  private <br/>
  def get_payment</p>

<pre><code>@payment = Payment.find_by_id(params[:id])     
@payment &amp;&amp; @payment.valid? || invalid_url   
</code></pre>

<p>  end
end
```</p>

<p>Views
```haml</p>

<h1>app/views/billing/thank_you.html.haml</h1>

<ul>
<li>if @payment.success? <br/>
%p The transaction is successfully completed</li>
<li>else <br/>
%p The transaction failed
```</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net (SIM) payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration/"/>
    <updated>2011-12-30T16:16:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration</id>
    <content type="html"><![CDATA[<p>Authorize Net SIM gateway transaction skips merchant side creditcard details form and directs transaction to be take place on gateway server.
```</p>

<h1>Gemfile</h1>

<p>gem &lsquo;authorize-net&rsquo;
```
Register for authorize net sandbox account click <a href="https://developer.authorize.net/testaccount/">here</a></p>

<p>Payment gateway credentials
```</p>

<h1>config/gateway.yml</h1>

<p>development: &amp;development</p>

<pre><code>mode: test
login: 9gdLh6T
key: 67fu45xw6VP92LX1
</code></pre>

<p>production:
   &lt;&lt;: *development</p>

<p>test:
   &lt;&lt;: *development
```</p>

<p>Generate &amp; Migrate Payment Model
<code>ruby
rails g model payment status:string amount:float transaction_number:string
rake db:migrate
</code></p>

<p>SIM gateway methods extracted and added to payment model
```ruby</p>

<h1>app/models/payment.rb</h1>

<p>class Payment &lt; ActiveRecord::Base</p>

<p>  PROCESSING, FAILED, SUCCESS = 1, 2, 3</p>

<p>  validates :amount, :presence => true, :numericality => { :greater_than => 0 }</p>

<p>  def self.conf</p>

<pre><code>@@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]
</code></pre>

<p>  end</p>

<p>  def success?</p>

<pre><code>self.status == SUCCESS
</code></pre>

<p>  end</p>

<p>  ## Authorize :: SIM
  def setup_transaction(options ={})</p>

<pre><code>options.merge!(:link_method =&gt; AuthorizeNet::SIM::HostedReceiptPage::LinkMethod::POST)
t = AuthorizeNet::SIM::Transaction.new(
  auth['login'], auth['key'], amount,
  :hosted_payment_form =&gt; true,
  :test =&gt; auth['mode']
)
t.set_hosted_payment_receipt(AuthorizeNet::SIM::HostedReceiptPage.new(options))
return t
</code></pre>

<p>  end</p>

<p>  def auth</p>

<pre><code>self.class.conf
</code></pre>

<p>  end
end
```</p>

<p>Payment routes
```ruby</p>

<h2>Callback URL</h2>

<p>match &lsquo;/billing/:id/confirm&rsquo;, :to => &lsquo;billing#authorize&rsquo;, :as => :confirm_billing</p>

<h2>Request URL</h2>

<p>match &lsquo;/billing/:id&rsquo;, :to => &lsquo;billing#checkout&rsquo;, :as => :billing
match &lsquo;/billing/:id/thank_you&rsquo;, :to => &lsquo;billing#thank_you&rsquo;, :as => :thank_you_billing
```</p>

<p>Billing controller
```ruby</p>

<h1>app/controllers/billing_controller.rb</h1>

<p>class BillingController &lt; ApplicationController
  helper :authorize_net</p>

<p>  before_filter :get_order, :only => [:checkout, :authorize, :thank_you]</p>

<p>  def checkout</p>

<pre><code># ASSUMPTION order is valid means amount is entered
@transaction = @order.setup_transaction(
  {:link_text =&gt; 'Continue',
    :link_url =&gt; confirm_billing_url(@order)})
</code></pre>

<p>  end</p>

<p>  ## CALL BACK
  def authorize</p>

<pre><code>resp = AuthorizeNet::SIM::Response.new(params)
if resp.approved?
  @order.status = Payment::SUCCESS
  @order.transaction_num = resp.transaction_id
else
  @order.status = Payment::FAILED 
end
@order.save(:validate =&gt; false)
redirect_to thank_you_billing_url(@order)
</code></pre>

<p>  end</p>

<p>  private
  def auth</p>

<pre><code>Payment.conf
</code></pre>

<p>  end</p>

<p>  def get_order</p>

<pre><code>@order = Payment.find_by_id(params[:id])
@order &amp;&amp; @order.valid? || invalid_url
</code></pre>

<p>  end
end
```</p>

<p>View Forms
```haml</p>

<h1>app/views/billing/checkout.html.haml</h1>

<p>= form_for :sim_transaction, :url => AuthorizeNet::SIM::Transaction::Gateway::TEST, :html => {:id => :authForm} do |f|
  = sim_fields(@transaction)
:javascript
  $(document).ready(function(){</p>

<pre><code>$('#authForm').submit();
</code></pre>

<p>  })
<code>
</code>haml</p>

<h1>app/views/billing/thank_you.html.haml</h1>

<ul>
<li>if @order.success?
%p The transaction is successfully completed</li>
<li>else
%p The transaction failed
```</li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T20:36:37+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading from Rails 2.1.x to Rails 2.3.11]]></title>
    <link href="http://sandipransing.github.io/2012/04/upgrading-from-rails-21x-to-rails-2311"/>
    <updated>2012-04-04T22:13:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/04/upgrading-from-rails-21x-to-rails-2311</id>
    <content type="html"><![CDATA[<div class='post'>
If your application is currently on any version of Rails 2.1.x, The following changes needs to be done for upgrading your application to Rails 2.3.11<br /><br />1. First install Rails version 2.3.11<br /><code><br />gem install rails -v2.3.11<br /></code><br /><br />2. Freeze app ruby gems<br /><code><br />rake rails:freeze:gems<br /></code><br />Hopefully it should work for you but it gave me following error <br /><code><br />undefined method `manage_gems' for Gem:Module <br /></code><br /><br />3. Create sample rails 2.3.11 app<br /><code><br />rails _2.3.11_ testsapp<br /></code><br /><br />Now, Copy all missing "config/initializers/*" files from new "testapp to the application that to be upgraded.<br /><code><br />cp testapp/config/initializers/* config/initializers<br /></code><br /><br />4. Change Rails version inside <i>environment.rb</i> to <i>Rails 2.3.11</i><br /><code> <br /># Specifies gem version of Rails to use when vendor/rails is not present <br />RAILS_GEM_VERSION = '2.3.11'<br /></code><br /><br />5. Rename <i>app/controllers/application.rb</i> file to <i>app/controllers/application_controller.rb</i><br /><br /><b>OR</b><br /><br /><code><br />rails:update:application_controller<br /></code><br /><br />6. Start rails server and fix the issues one by one.<br /><code><br />ruby script/server<br /></code></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongoid embeded_in and Array field management]]></title>
    <link href="http://sandipransing.github.io/2012/01/mongoid-embededin-and-array-field"/>
    <updated>2012-01-20T01:12:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/mongoid-embededin-and-array-field</id>
    <content type="html"><![CDATA[<div class='post'>
Previous post explains on <a href="http://www.funonrails.com/2012/01/mongoid-array-field-and-rails-form.html">mongoid document array field and rails form implementation</a><br/>Below example shows rails form integration of array field of embedded mongoid document <br/>consider scenario, student embeds one family who has many assets<br/><code>class Student   include Mongoid::Document    field :name   field :phone      embeds_one  :family    validates_associated :family   accepts_nested_attributes_for :family end </code><br/><code>class Family   include Mongoid::Document   ASSETS = ['flat', 'car', 'business', 'bunglow', 'cash']      field :members, type: Integer   field :assets, type: Array   field :religon    embedded_in :student end </code>Brief controller code </br/>  <code>class StudentsController < ApplicationController  def new    @student = Student.new    @student.family ||= @student.build_family  end   def create    @student = Student.new(params[:student])    @student.family.assets.reject!(&:blank?)    if @student.save      [...]    else      render :action => :new    end  end end </code>view form will look like- <br/><code>= form_for(@student) do |s|   = s.text_field :name   = s.text_field :phone   - s.fields_for :family do |f|     = f.text_field :members     = f.text_field :religion     - Family::ASSETS.each do |asset|       /Here f.object_name #=> student[family]       = f.check_box :assets, :name => "#{f.object_name}[assets][]", asset </code></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[understanding rails uri]]></title>
    <link href="http://sandipransing.github.io/2012/01/understanding-rails-uri"/>
    <updated>2012-01-14T02:18:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/understanding-rails-uri</id>
    <content type="html"><![CDATA[<div class='post'>
rails-uri module provide us with url manipulation methods<br/> <b>Parse string url</b><code>url = URI.parse('http://funonrails.com/search/label/rails3') url.host #=> "http://funonrails.com" url.port #=> 80 </code><br/><b>URL with Basic Authentication </b><br/><code>url = URI.parse('http://sandip:2121@funonrails.com/search/label/rails3') url.user #=> "sandip" url.password #=> "2121" </code><br/><b>Extracting urls form string paragraph</b><br/><code>URI.extract('http://funonrails.com is rails blog authored by http://sandipransing.github.com contact mailto://sandip@funonrails.com') #=> ["http://funonrails.com", "http://sandipransing.github.com", "mailto://sandip@funonrails.com"] </code> <b>Split & Join URI</b><br/><code>URI.split('http://sandip:2121@funonrails.com/search/label/rails3') #=> ["http", "sandip:2121", "funonrails.com", nil, nil, "/search/label/rails3", nil, nil, nil]  <=> [Scheme, Userinfo, Host, Port, Registry, Path, Opaque, Query, Fragment]    URI.join('http://funonrails.com','search/label/rails3') #=> #<URI::HTTP:0x7fbf9202efc8 URL:http://funonrails.com/search/label/rails3></code><br/><b>Escape & Unescape alias encode/decode URI</b><br/><code>URI.escape('http://funonrails.com/search/?label=\\rails\3') URI.encode('http://funonrails.com/search/?label=\\rails\3') #=> "http://funonrails.com/search/?label=%5Crails%5C3"  URI.unescape("http://funonrails.com/search/?label=%5Crails%5C3") URI.decode("http://funonrails.com/search/?label=%5Crails%5C3") #=> "http://funonrails.com/search/?label=\\rails\\3" </code><br/><b>Match urls using regular expressions </b><br/><code>"http://funonrails.com/search/label/rails3".sub(URI.regexp(['search'])) do |*matchs|   p $& end #=> "http://funonrails.com/search/label/rails3" </code><br/><b>Getting requested url inside rails</b><br/><code>request.request_uri request.env['REQUEST_URI'] </code><br/><b>Getting previous page url inside rails</b><br/><code>request.referrer </code></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypal payments integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails"/>
    <updated>2011-12-30T18:00:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/paypal-payments-integration-with-rails</id>
    <content type="html"><![CDATA[<div class='post'>
Paypal standard website payment service allows online payment transactions for websites. <br />Before implementing payments inside rails app needs to have following things in place- <br />1. <a href="http://developer.paypal.com/">Register Paypal sandbox account</a><br />2. Paypal Merchant account api credentials i.e. login, password, signature, application_id<br />3. Paypal Buyer account creds to test payments<br /><br /><b>Bundle Install</b><br /><pre class='ruby'># Gemfile     <br />gem 'activemerchant <br /></pre><b>Gateway config</b><br /><pre class='ruby'># config/gateway.yml <br />development: &development     <br />  mode: test     <br />  login: rana_1317365002_biz_api1.gmail.com     <br />  password: '1311235050'     <br />  signature: ACxcVrB3mFChvPIe8aDWQlLhAPN46oPBQCj7rJWPza6CDZmBURg.     <br />  application_id: APP-76y884485P519543T  <br /><br />production:    <br />  <<: *development<br /><br />test:<br />  <<: *development<br /></pre><b>New Payment Form</b><pre class='ruby'>= form_for @payment ||= Payment.new, :url => pay_bill_url, :html => {:id => :payForm} do |p|    <br />  = p.text_field :amount   <br />  = p.submit 'Pay' <br /></pre><b>Generate & Migrate Payment Model</b><pre class='ruby'>rails g model payment status:string amount:float transaction_number:string   <br />rake db:migrate <br /></pre><b>Payment Model</b><pre class='ruby'># app/models/payment.rb  <br />class Payment < ActiveRecord::Base<br /><br />  PROCESSING, FAILED, SUCCESS = 1, 2, 3<br /><br />  validates :amount, :presence => true, :numericality => { :greater_than => 0 }    <br />  def self.conf<br />    @@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   <br />  end    <br />  <br />  ## Paypal    <br />  def setup_purchase(options)     <br />    gateway.setup_purchase(amount * 100, options)   <br />  end    <br />  <br />  def redirect_url_for(token)      <br />    gateway.redirect_url_for(token)   <br />  end <br />  <br />  def purchase(options={}) <br />    self.status = PROCESSING  <br />    #:ip       => request.remote_ip,<br />    #:payer_id => params[:payer_id],<br />    #:token    => params[:token]<br />    response = gateway.purchase(amt, options)      <br />    if response.success?       <br />      self.transaction_num = response.params['transaction_id']       <br />      self.status = SUCCESS     <br />    else       <br />      self.status = FAILED     <br />    end     <br />    return self   <br />  rescue Exception => e     <br />    self.status = FAILED     <br />    return self   <br />  end    <br /><br />  private   <br />  def gateway <br />    ActiveMerchant::Billing::Base.mode = auth['mode'].to_sym <br />    ActiveMerchant::Billing::PaypalExpressGateway.new(<br />      :login => auth['login'], :password => auth['password'],<br />      :signature => auth['signature']) <br />  end<br /><br />  def auth <br />    self.class.conf <br />  end<br />end <br /></pre><b>Billing routes </b><pre class='ruby'>## Callback URL   <br />match '/billing/paypal/:id/confirm', :to => 'billing#paypal', :as => :confirm_paypal   <br />## Create payment   <br />match '/billing', :to => 'billing#create', :as => :pay_bill   <br />## Request URL   <br />match '/billing/paypal/:id', :to => 'billing#checkout', :as => :billing   <br />match '/billing/thank_you/:id', :to => 'billing#checkout', :as => :billing_thank_you </pre><b>Billing Controller</b>  <pre class='ruby'># app/controllers/billing_controller.rb<br />class BillingController < ApplicationController<br />  before_filter :get_payment, :only => [:checkout, :paypal, :thank_you]      <br />  <br />  def create     <br />    @payment = Payment.new params[:payment]     <br />    if @payment.save       <br />      ## Paypal Checkout page       <br />      redirect_to billing_url    <br />    else     <br />      render :action => :new    <br />    end <br />  end    <br />  <br />  # ASSUMPTION   # payment is valid i.e. amount is entered   <br />  def checkout    <br />    response = @payment.setup_purchase(:return_url => confirm_paypal_url(@payment), :cancel_return_url => root_url)     <br />    redirect_to @payment.redirect_url_for(response.token)   <br />  end    <br />  <br />  ## CALL BACK   <br />  def paypal    <br />    @payment = @payment.purchase(:token => params[:token], :payer_id => params[:PayerID], :ip => request.remote_ip)    <br />    @payment.save    <br />    redirect_to thank_you_billing_url(@order)  <br />  end    <br />  <br />  private   <br />  def get_payment     <br />    @payment = Payment.find_by_id(params[:id])     <br />    @payment && @payment.valid? || invalid_url   <br />  end <br />end<br /></pre><b>Views</b><pre class='ruby'># app/views/billing/thank_you.html.haml  <br />- if @payment.success?   <br />  %p The transaction is successfully completed <br />- else   <br />  %p The transaction failed <br /></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net (SIM) payment integration with rails]]></title>
    <link href="http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration"/>
    <updated>2011-12-30T16:16:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/authorize-net-sim-payment-integration</id>
    <content type="html"><![CDATA[<div class='post'>
Authorize Net SIM gateway transaction skips merchant side creditcard details form and directs transaction to be take place on gateway server.<br/> <console>  # Gemfile   gem 'authorize-net' </console><br/>Register for authorize net sandbox account <a href='https://developer.authorize.net/testaccount/'>click here</a><br/><br/><b>Payment gateway credentials</b><br/><console># config/gateway.yml development: &development     mode: test     login: 9gdLh6T     key: 67fu45xw6VP92LX1  production:    <<: *development  test:    <<: *development </console><br/> <b>Generate & Migrate Payment Model</b><br/><console>  rails g model payment status:string amount:float transaction_number:string   rake db:migrate </console><br/> SIM gateway methods extracted and added to payment model <br/><console># app/models/payment.rb class Payment < ActiveRecord::Base      PROCESSING, FAILED, SUCCESS = 1, 2, 3      validates :amount, :presence => true, :numericality => { :greater_than => 0 }    def self.conf     @@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]   end      def success?     self.status == SUCCESS   end    ## Authorize :: SIM   def setup_transaction(options ={})     options.merge!(:link_method => AuthorizeNet::SIM::HostedReceiptPage::LinkMethod::POST)     t = AuthorizeNet::SIM::Transaction.new(       auth['login'], auth['key'], amount,       :hosted_payment_form => true,       :test => auth['mode']     )     t.set_hosted_payment_receipt(AuthorizeNet::SIM::HostedReceiptPage.new(options))     return t   end    def auth     self.class.conf   end end </console>Payment routes <br><console> ## Callback URL   match '/billing/:id/confirm', :to => 'billing#authorize', :as => :confirm_billing     ## Request URL   match '/billing/:id', :to => 'billing#checkout', :as => :billing   match '/billing/:id/thank_you', :to => 'billing#thank_you', :as => :thank_you_billing </console> Billing controller <br/><console># app/controllers/billing_controller.rb  class BillingController < ApplicationController   helper :authorize_net    before_filter :get_order, :only => [:checkout, :authorize, :thank_you]    def checkout     # ASSUMPTION order is valid means amount is entered     @transaction = @order.setup_transaction(       {:link_text => 'Continue',         :link_url => confirm_billing_url(@order)})   end    ## CALL BACK   def authorize     resp = AuthorizeNet::SIM::Response.new(params)     if resp.approved?       @order.status = Payment::SUCCESS       @order.transaction_num = resp.transaction_id     else       @order.status = Payment::FAILED      end     @order.save(:validate => false)     redirect_to thank_you_billing_url(@order)   end    private   def auth     Payment.conf   end    def get_order     @order = Payment.find_by_id(params[:id])     @order && @order.valid? || invalid_url   end end </console><br/>Views Forms<br/><console># app/views/billing/checkout.html.haml  = form_for :sim_transaction, :url => AuthorizeNet::SIM::Transaction::Gateway::TEST, :html => {:id => :authForm} do |f|   = sim_fields(@transaction) :javascript   $(document).ready(function(){     $('#authForm').submit();   }) </console><br/><console># app/views/billing/thank_you.html.haml  - if @order.success?   %p The transaction is successfully completed - else   %p The transaction failed </console></div>

]]></content>
  </entry>
  
</feed>

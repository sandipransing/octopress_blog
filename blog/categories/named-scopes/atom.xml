<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: named-scopes | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/named-scopes/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-10T19:59:07+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best practices to use named scopes inside models]]></title>
    <link href="http://sandipransing.github.io/2011/12/best-practices-to-use-named-scopes/"/>
    <updated>2011-12-22T18:50:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/best-practices-to-use-named-scopes</id>
    <content type="html"><![CDATA[<blockquote><p>Scopes are partial query conditions to database queries. scopes are always prefixed to class finders. There are several ways to use scopes inside rails models.</p></blockquote>

<p><strong>1.  Scope defined below gets loaded while class definition loads</strong>
<code>ruby
scope :active, where(:active =&gt; true)
scope :archived, where(:archived =&gt; true, :post_type =&gt; :general)
</code>
<strong>2.  Dynamic scopes needs to be always defined inside lambda</strong>
<code>ruby
scope :not_expired, lambda { where('expiry_date &lt;= ?', Date.today) }
</code>
<strong>3.  Combining scopes</strong>
<code>ruby
scope :visible, published.not_expired
</code>
<strong>4.  Passing parameters to scopes</strong>
```ruby</p>

<h1>avoid below</h1>

<p>scope :created_by_user, lambda {|user|
  where(&lsquo;user_id = ?&rsquo;, user)
}</p>

<h1>use this</h1>

<p>scope :created_by_user, lambda {|user|
  where(:user_id => user)
}
```</p>

<p><strong>5.  passing multiple parameters</strong>
```ruby</p>

<h1>avoid below</h1>

<p>scope :made_between, lambda{|from, to|
  where(&lsquo;created_date >= ? and created_date &lt;= ?&rsquo;, from, to)
}</p>

<h1>use this</h1>

<p>scope :made_between, lambda{|from, to|
  where(&lsquo;created_date >= :from and created_date &lt;= :to&rsquo;, :from => from, :to => to)
}
```</p>

<p><strong>6.  associations inside scope (joins and includes)</strong>
```ruby</p>

<h1>below will perform eager loading effective when rendering posts with comments</h1>

<p>scope :with_user_comments, lambda{|user|
  includes(:comments).where(&lsquo;comments.user_id = ?&rsquo;, user)
}</p>

<h1>faster</h1>

<h1>also can be done as post.comments.where(:user_id => user)</h1>

<p>scope :with_user_comments, lambda{|user|
  joins(:comments).where(&lsquo;comments.user_id = ?&rsquo;, user)
}
```</p>

<p>So, at last would suggest making use of symbols when there are multiple parameters to scopes and make maximum use of scopes rather than having where conditions everywhere :)</p>
]]></content>
  </entry>
  
</feed>

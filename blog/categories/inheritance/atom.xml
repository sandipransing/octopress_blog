<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: inheritance | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/inheritance/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T20:36:37+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple resources, registrations with devise, STI and single sign sign on]]></title>
    <link href="http://sandipransing.github.io/2011/12/multiple-resources-registrations-with"/>
    <updated>2011-12-22T02:51:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/multiple-resources-registrations-with</id>
    <content type="html"><![CDATA[<div class='post'>
Devise handles authentication, authorization part inside rails application quite easily and its customizable too. One can always customize default devise configurations. <br/> This Post will show how to manage multiple resources (like admin, staff, employees, guests etc.) through devise and STI with individual registrations process but login section will be the same for all. <br/><console># Gemfile gem 'devise' </console><br/> <console># console bundle install rails g devise_install rails g devise User rake db:migrate rake routes </console><br/><console># User model class User < ActiveRecord::Base   # Include default devise modules. Others available are:   # :token_authenticatable, :lockable, :timeoutable, :confirmable and :activatable   devise :database_authenticatable, :registerable,          :recoverable, :rememberable, :trackable, :validatable    # Setup accessible (or protected) attributes for your model   attr_accessible :email, :password, :password_confirmation end  ## Single Table Inheritance # Admin model class Admin < User end  # Staff class Staff < User end  # Employee class Employee < User end  # Guest class Guest < User end </console><br/> <console># routes devise_for :users, :skip => :registrations devise_for :admins, :skip => :sessions devise_for :staffs, :skip => :sessions devise_for :employees, :skip => :sessions devise_for :guests, :skip => :sessions </console><br/> <console># customizing default login/logout routes, views, actions devise_for :users, :controller => {:sessions  => 'sessions'}, :skip => [:sessions, :registrations] do     delete '/logout', :to => 'sessions#destroy', :as => :destroy_user_session     get '/login', :to => 'sessions#new', :as => :new_user_session     post '/login', :to => 'sessions#create', :as => :user_session end  # app/controllers/sessions_controller class SessionsController < Devise::SessionsController end </console><br/><console>## overriding default after sign in path # app/controller/application_controller.rb class ApplicationController < ActionController::Base   protect_from_forgery   helper_method :account_url   def account_url     return new_user_session_url unless user_signed_in?     case current_user.class.name     when 'Customer'       edit_customer_registration_url     when 'Admin'       edit_home_page_section_url     else       root_url     end if user_signed_in?   end end  # app/controllers/sessions_controller.rb  class SessionsController < Devise::SessionsController    def after_sign_in_path_for(resource)     stored_location_for(resource) || account_url   end end </console><br/> <console>## Changing default login field email to username # config/initializers/devise.rb  config.authentication_keys = [ :username ]  # app/models/user.rb   validates :username, :presence => true,      :uniqueness => {:allow_blank => true},     :format => {:with => /^\w+[\w\s:?']+$/i, :allow_blank => true}    def email_required?     false   end  </console><br/>Adding devise authentication and authorization helper methods for above resources. <a href="http://www.funonrails.com/2011/12/dynamic-methods-inside-ruby-classes.html">read more here</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Record Inheritance in Rails (ARI)]]></title>
    <link href="http://sandipransing.github.io/2010/12/active-record-inheritance-in-rails-ari"/>
    <updated>2010-12-09T01:28:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/12/active-record-inheritance-in-rails-ari</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://www.scribd.com/doc/44922200/Active-Record-Inheritance-ARI" style="display: block; font: 14px Helvetica,Arial,Sans-serif; margin: 12px auto 6px; text-decoration: underline;" title="View Active Record Inheritance (ARI) on Scribd">Active Record Inheritance (ARI)</a> <object data="http://d1.scribdassets.com/ScribdViewer.swf" height="600" id="doc_427046804884780" name="doc_427046804884780" style="outline: medium none;" type="application/x-shockwave-flash" width="100%">  <param name="movie" value="http://d1.scribdassets.com/ScribdViewer.swf">  <param name="wmode" value="opaque">   <param name="bgcolor" value="#ffffff">   <param name="allowFullScreen" value="true">   <param name="allowScriptAccess" value="always">   <param name="FlashVars" value="document_id=44922200&access_key=key-2ix0qbm381eltbaykpu7&page=1&viewMode=list">   <embed id="doc_427046804884780" name="doc_427046804884780" src="http://d1.scribdassets.com/ScribdViewer.swf?document_id=44922200&access_key=key-2ix0qbm381eltbaykpu7&page=1&viewMode=list" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" height="600" width="100%" wmode="opaque" bgcolor="#ffffff"></embed>  </object></div>

]]></content>
  </entry>
  
</feed>

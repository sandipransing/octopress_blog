<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geokit | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/geokit/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T23:18:57+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zipcode validation using geokit in rails]]></title>
    <link href="http://sandipransing.github.io/2010/08/zipcode-validation-using-geokit-in/"/>
    <updated>2010-08-21T04:58:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/08/zipcode-validation-using-geokit-in</id>
    <content type="html"><![CDATA[<div class='post'>
<b>1.Install geokit gem</b><br/><pre class=ruby>gem install geokit</pre>OR  <pre class=ruby># Add following line inside rails initialize block Rails::Initializer.run do |config|  config.gem 'geokit' end </pre><br/>And then run command<br/><pre class=ruby>rake gems:install</pre> <b>2. Consider User model with zipcode as attribute field</b><br/><pre class=ruby>include Geokit::Geocoders    class User < ActiveRecord::Base      set_table_name :users      validate_presence_of :zipcode      validate :request_zipcode_validation_using_geokit, :if => :zipcode            private      def request_zipcode_validation_using_geokit       # Method request google api for location       # if location found then zipcode is valid otherwise       # add validation error on zipcode field       # as it method contacts with google api and takes time       # to return result, poll request only when zipcode gets       # changed       poll = true # default true for new objects       if self.id ## this means already existing user and zipcode is valid last time        # Hack to find where zipcode got modified or not         # old_user = User.find self.id        poll = false if old_user.zipcode == self.zipcode       end              # Actual requesting api to return location associated with zipcode       if poll        loc = MultiGeocoder.geocode(self.zip_code)       end       # Add Validation Error if location is not found       errors.add(:zip_code, "Unable to geocode your location from zipcode entered.") unless loc.success      end </pre> <br/>Please note that same method can also be used to validate state, city and country.<br/> Again we can use combination of fields to validate each other. <br/>Like -<br/><b>1. Based on country entered, state validation</b><br/><b>2. Based on state, city validation</b><br/><b>3. Based on city, zipcode validation</b><br/>or<br/><b>4. Based on zipcode and country, state and city validation</b><br/><br/>Here is another method to validate state and city based on zipcode and country.<br/>Lets take example of 'US'<br/><pre class=ruby> def request_state_and_city_validation_based_on_zipcode       poll = true # default true for new objects       if self.id ## this means already existing user and all attributes were valid last time        # Hack to find any one of location attribute got modified        # old_user = User.find self.id        loc_attrs = %w{zipcode state city} # keep in mind country US is default assumed        if loc_attrs.all? {|attr| self.attribute_for_inspect(attr) == old_user.attribute_for_inspect(attr)}          self.poll = false        end       end              # Actual requesting api to return location associated with zipcode       if poll        loc = MultiGeocoder.geocode("#{self.zip_code}, US")       end       # Add Validation Error if location is not found       unless loc.success         errors.add(:zip_code, "Unable to geocode your location from zipcode entered.")       else       # Validate state and city fields in compare to loc object returned by geocode         errors.add(:state, "State doesn't matches with zipcode entered") if self.state != loc.state         errors.add(:city, "City doesn't matches with zipcode entered") if self.city != loc.city       end      end </pre><br/><b>Note*** </b><br/>If you are subscriber of blog and not displaying post correctly. I request you to visit post on blog itself. Somehow style is not getting correctly in email. I will try to fix this problem asap.<br/><br/> <b>Upcoming Posts</b><br/>1. Geokit finders: Find locations in/within/beyond particular radius from specified location using acts_as_mappable plugin<br/>2. Customizing authlogic for multiple sessions i.e. using different models for role based authentication.<br/></div>

]]></content>
  </entry>
  
</feed>

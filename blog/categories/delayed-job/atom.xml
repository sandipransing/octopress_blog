<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: delayed-job | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/delayed-job/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-10T04:31:35+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monitor Delayed Job in rails]]></title>
    <link href="http://sandipransing.github.io/2011/03/monitor-delayedjob-in-rails/"/>
    <updated>2011-03-01T01:22:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/03/monitor-delayedjob-in-rails</id>
    <content type="html"><![CDATA[<div class='post'>
<b>Delayed Job & Monit configuration</b><br/>We were struggling through how to monit delayed_job from past few months because monit doesn't work seamlessly with delayed_job start/stop commands and finally we got able to monit delayed_job. <br/><b>Here is our old configuration that wasn't working anyhow-</b><br/><pre class=ruby>check process delayed_job with pidfile /home/sandip/shared/pids/delayed_job.pid     stop program = "/bin/bash -c 'cd /home/sandip/current && RAILS_ENV=production script/delayed_job stop'"     start program = "/bin/bash -c 'cd /home/sandip/current && RAILS_ENV=production script/delayed_job start'"     if totalmem > 100.0 MB for 3 cycles then restart     if cpu usage > 95% for 3 cycles then restart </pre><br/>After doing google & looking at stackoverflow, we found different solutions to work with but none of them found useful to me. :( <br/>After reading google group someone (not remembering exactly) directed to write a init script for delayed_job server and that perfectly worked for me and my headache of self moniting delayed_job ended up ;)<br/> <b>Here is delayed_job init script</b><br/>## /etc/init.d/delayed_job<br/><pre class=ruby>#! /bin/sh set_path="cd /home/sandip/current"  case "$1" in     start)     echo -n "Starting delayed_job: "     su - root -c "$set_path; RAILS_ENV=production script/delayed_job start" >> /var/log/delayed_job.log 2>&1     echo "done."     ;;     stop)     echo -n "Stopping delayed_job: "     su - root -c "$set_path; RAILS_ENV=production script/delayed_job stop" >> /var/log/delayed_job.log 2>&1     echo "done."     ;;     *)     echo "Usage: $N {start|stop}" >&2     exit 1     ;; esac  exit 0 </pre><b>finally here is the working monit delayed_job configuration</b><br/> <pre class=ruby>check process delayed_job with pidfile /home/sandip/shared/pids/delayed_job.pid     stop program = "/etc/init.d/delayed_job stop"     start program = "/etc/init.d/delayed_job start"     if totalmem > 100.0 MB for 3 cycles then restart     if cpu usage > 95% for 3 cycles then restart </pre> <b>Thinking Sphinx monit configuration</b><br/><pre class=ruby>check process sphinx with pidfile /home/sandip/shared/pids/searchd.pid     stop program = "/bin/bash -c 'cd /home/sandip/current && /usr/bin/rake RAILS_ENV=production ts:stop'"     start program = "/bin/bash -c 'cd /home/sandip/current && /usr/bin/rake RAILS_ENV=production ts:start'"     if totalmem > 85.0 MB for 3 cycles then restart     if cpu usage > 95% for 3 cycles then restart </pre> <b>Adhearsion (ahn) monit confiuration</b><br/><pre class=ruby>check process ahn with pidfile /home/josh/shared/pids/ahnctl.pid     stop program = "/bin/bash -c 'cd /home/sandip/current && /usr/bin/ahnctl stop adhearsion'"     start program = "/bin/bash -c 'cd /home/sandip/current && /usr/bin/ahnctl start adhearsion'"     if totalmem > 100.0 MB for 3 cycles then restart     if cpu usage > 95% for 3 cycles then restart </pre> <b>Nginx monit configuration</b><br/><pre class=ruby>check process nginx with pidfile /opt/nginx/logs/nginx.pid     start program = "/opt/nginx/sbin/nginx"     stop  program = "/opt/nginx/sbin/nginx -s stop"     if cpu is greater than 70% for 3 cycles then alert     if cpu > 80% for 5 cycles then restart     if 10 restarts within 10 cycles then timeout </pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Delayed Job in rails]]></title>
    <link href="http://sandipransing.github.io/2011/03/monitor-delayedjob-in-rails/"/>
    <updated>2011-03-01T01:22:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/03/monitor-delayedjob-in-rails</id>
    <content type="html"><![CDATA[<p>Delayed Job &amp; Monit configuration</p>

<p>We were struggling through how to monit delayed_job from past few months because monit doesn&rsquo;t work seamlessly with delayed_job start/stop commands and finally we got able to monit delayed_job.</p>

<p>Here is our old configuration that wasn&rsquo;t working anyhow-</p>

<p>```
check process delayed_job with pidfile /home/sandip/shared/pids/delayed_job.pid</p>

<pre><code>stop program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; RAILS_ENV=production script/delayed_job stop'"
start program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; RAILS_ENV=production script/delayed_job start'"
if totalmem &gt; 100.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```
After doing google &amp; looking at stackoverflow, we found different solutions to work with but none of them found useful to me. :(</p>

<p>After reading google group someone (not remembering exactly) directed to write a init script for delayed_job server and that perfectly worked for me and my headache of self moniting delayed_job ended up ;)</p>

<p>Here is delayed_job init script</p>

<h1>/etc/init.d/delayed_job</h1>

<p>```</p>

<h1>! /bin/sh</h1>

<p>set_path=&ldquo;cd /home/sandip/current&rdquo;</p>

<p>case &ldquo;$1&rdquo; in</p>

<pre><code>start)
echo -n "Starting delayed_job: "
su - root -c "$set_path; RAILS_ENV=production script/delayed_job start" &gt;&gt; /var/log/delayed_job.log 2&gt;&amp;1
echo "done."
;;
stop)
echo -n "Stopping delayed_job: "
su - root -c "$set_path; RAILS_ENV=production script/delayed_job stop" &gt;&gt; /var/log/delayed_job.log 2&gt;&amp;1
echo "done."
;;
*)
echo "Usage: $N {start|stop}" &gt;&amp;2
exit 1
;;
</code></pre>

<p>esac</p>

<p>exit 0
```</p>

<p>finally here is the working monit delayed_job configuration
```
check process delayed_job with pidfile /home/sandip/shared/pids/delayed_job.pid</p>

<pre><code>stop program = "/etc/init.d/delayed_job stop"
start program = "/etc/init.d/delayed_job start"
if totalmem &gt; 100.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```</p>

<p>Thinking Sphinx monit configuration
```
check process sphinx with pidfile /home/sandip/shared/pids/searchd.pid</p>

<pre><code>stop program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/rake RAILS_ENV=production ts:stop'"
start program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/rake RAILS_ENV=production ts:start'"
if totalmem &gt; 85.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```</p>

<p>Adhearsion (ahn) monit confiuration
```
check process ahn with pidfile /home/josh/shared/pids/ahnctl.pid</p>

<pre><code>stop program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/ahnctl stop adhearsion'"
start program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/ahnctl start adhearsion'"
if totalmem &gt; 100.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```</p>

<p>Nginx monit configuration
```
check process nginx with pidfile /opt/nginx/logs/nginx.pid</p>

<pre><code>start program = "/opt/nginx/sbin/nginx"
stop  program = "/opt/nginx/sbin/nginx -s stop"
if cpu is greater than 70% for 3 cycles then alert
if cpu &gt; 80% for 5 cycles then restart
if 10 restarts within 10 cycles then timeout
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DelayedJOb's (DJ) fancy methods]]></title>
    <link href="http://sandipransing.github.io/2010/10/delayedjobs-dj-fancy-methods/"/>
    <updated>2010-10-06T19:39:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/10/delayedjobs-dj-fancy-methods</id>
    <content type="html"><![CDATA[<div class='post'>
<b>Delayed Job provides send_later and send_at as instance as well as class_methods methods along-with handle_asynchronously as class method to be written inside class</b><br/><br/><pre class=ruby>module Delayed   module MessageSending      def send_later(method, *args)        Delayed::Job.enqueue Delayed::PerformableMethod.new(self, method.to_sy m, args)      end       def send_at(time, method, *args)        Delayed::Job.enqueue(Delayed::PerformableMethod.new(self, method.to_sy m, args), 0, time)      end       module ClassMethods        def handle_asynchronously(method)          aliased_method, punctuation = method.to_s.sub(/([?!=])$/, ''), $1          with_method, without_method = "#{aliased_method}_with_send_later#{pu nctuation}", "#{aliased_method}_without_send_later#{punctuation}"          define_method(with_method) do |*args|            send_later(without_method, *args)          end          alias_method_chain method, :send_later        end      end   end end </pre><br/><b>Usage of send_later, send_at and handle_asynchronously</b><br/><pre class=ruby># instance method user.send_later(:deliver_welcome)  # class_method Notifier.send_later(:deliver_welcome, user)  Notifier.send_at(15.minutes.from_now, :deliver_welcome, user)  # Inside User class write below line after deliver_welcome method handle_asynchronously :deliver_welcome </pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution to DelayedJob(DJ) gem server start problem]]></title>
    <link href="http://sandipransing.github.io/2010/10/solution-to-delayedjobdj-gem-server/"/>
    <updated>2010-10-05T16:15:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/10/solution-to-delayedjobdj-gem-server</id>
    <content type="html"><![CDATA[<div class='post'>
<b>Solution to DelayedJob(DJ) gem server start problem </b><br />I had installed delayed_job gem 2.0.3, daemons gem but after staring DJ server it shows daemon started but actually process gets killed automatically. <br />I performed steps given by Kevin on google group and it worked like charm <br />Here are the steps:<br /><br />1) sudo gem sources -a http://gems.github.com<br />2) sudo gem install alexvollmer-daemon-spawn<br />3) Move the old daemons delayed job script out of the way -&gt; mv script/delayed_job script/delayed_job.daemons<br />4) Make this your new script/delayed_job: http://gist.github.com/104314<br /><br />Try it out again making sure it writes to the tmp/pids directory ok.<br />My line looks like this:<br /><pre class=ruby>RAILS_ENV=production script/delayed_job start </pre><br />then to check (besides running 'ps'), you can run this:<br /><pre class=ruby>RAILS_ENV=production script/delayed_job status </pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed Job changing job parameters in Rails]]></title>
    <link href="http://sandipransing.github.io/2010/01/delayed-job-changing-job-parameters-in/"/>
    <updated>2010-01-13T19:59:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/01/delayed-job-changing-job-parameters-in</id>
    <content type="html"><![CDATA[<div class='post'>
Delayed job variables initialization written on at collectiveidea / delayed_job doesn't work.<br/><pre class=ruby> # config/initializers/delayed_job_config.rb  Delayed::Worker.destroy_failed_jobs = false  Delayed::Worker.sleep_delay = 60  Delayed::Worker.max_attempts = 3  Delayed::Worker.max_run_time = 5.minutes </pre><br/>Here is the correct way of doing it as mentioned on tobi / delayed_job <br/><pre class=ruby> # config/initializers/delayed_job_config.rb  Delayed::Job.destroy_failed_jobs = false  silence_warnings do    Delayed::Job.const_set("MAX_ATTEMPTS", 3)    Delayed::Job.const_set("MAX_RUN_TIME", 5.minutes)  end </pre></div>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Fun On Rails]]></title>
  <link href="http://sandipransing.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://sandipransing.github.io/"/>
  <updated>2014-02-09T20:36:37+05:30</updated>
  <id>http://sandipransing.github.io/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby enumerable & to_proc (ampersond & symbol shortcut)]]></title>
    <link href="http://sandipransing.github.io/2012/02/ruby-enumerable-toproc-ampersond-colon"/>
    <updated>2012-02-23T02:09:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/02/ruby-enumerable-toproc-ampersond-colon</id>
    <content type="html"><![CDATA[<div class='post'>
Basically Enumerable mixin gives collection classes a variety of traverse, search, sort methods.<br/> <b>understanding ruby blocks i.e. proc </b><br/>blocks are statements of code written in ruby. one can take them as similar to c language macro's<br/> <b>Different ways to define blocks</b><br/><code>a = proc do   puts "hello" end a.call #=> hello  b = lambda do |u|   puts "hello #{u}" end b.call('sandip')#=> hello sandip  c = proc {|user| puts user } c.call('sandip') #=> sandip </code> <b>Passing block to enumerator </b><br/>Lets assume we have collection array of strings and we want to print it<br/> <code> a = ['hi', 'sandip', 'how', 'you', 'doing', '?'] => ["hi", "sandip", "how", "you", "doing", "?"]  a.each {|w| puts w }  q = proc {|w| puts w } => #<Proc:0x00007f9d2be13140@(irb):89> a.each(&q) #=>hi sandip how you doing ?  a.map{|r| q.call(r)} #=>hi sandip how you doing ? </code>  <b>Understanding symbol#to_proc </b><br/>Symbol has method to_proc which converts symbol to block where symbol is taken as method to be executed on first argument of proc<br/><b>How to_proc got implemented inside Symbol class</b><code>class Symbol   def to_proc     Proc.new { |*args| args.shift.__send__(self, *args) }   end end </code>Lets have some examples <br/><code>v = :even?.to_proc # equivalent to proc {|a| a.even?} #=> #<Proc:0x00007f9d2bddcb90@(irb):97> q = [1, 2, 3, 5, 67]  q.map(&v) => [false, true, false, false, false] </code> <b>Is there any shortcut?</b><br/>Yes, there is shortcut to have block passed to enumerators on the fly using ampersand followed by colon (i.e. symbol)<br/> <code>q = [1, 2, 3, 5, 67]  q.map(&:even?) <=> q.map(&:even?.to_proc)  q.map(&:even?.to_proc) #=> [false, true, false, false, false]  q.map(&:even?) #=> [false, true, false, false, false] </code> <b>Some handy examples </b><br/><code>[1, 2, 3, 5, 67].inject(&:+) #=> 78 [1, 2, 3, 5, 67].inject(:+) #=> 78 [1, 2, 3, 5, 67].any?(&:even?) #=> true [1, 2, 3, 5, 67].detect(&:even?) #=> 2 ['ruby', 'on', 'rails'].map(&:upcase) #=> ["RUBY", "ON", "RAILS"] </code></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[puts, to_s and inspect on ruby object]]></title>
    <link href="http://sandipransing.github.io/2012/01/puts-tos-and-inspect-on-ruby-object"/>
    <updated>2012-01-31T01:07:00+05:30</updated>
    <id>http://sandipransing.github.io/2012/01/puts-tos-and-inspect-on-ruby-object</id>
    <content type="html"><![CDATA[<div class='post'>
`puts` converts ruby object into string by invoking to_s method on object. The default to_s prints the object's class and an encoding of the object id. In order to print human readable form of object use inspect<br/> <code>locs = Location.find_by_sql('select * from locations')   Location Load (0.5ms)  select * from locations </code><b>Puts Object internally invokes to_s method on object to print</b><code>locs.each do |l|   # it calls to_s method on object   puts l end  #&lt;Location:0x000000055bb328&gt; #&lt;Location:0x000000055bb058&gt; </code><br/><b>puts object followed by subsequent invoke of inspect method outputs readable object</b><code>locs.each do |l|   puts l.inspect # prints actual object end  #&lt;Location id: 15, name: &quot;Annettaside3&quot;, street: &quot;71838 Ritchie Cape&quot;, city: &quot;East Destanystad&quot;, state: &quot;Utah&quot;, zip: &quot;58054&quot;, phone: 123456, other_phone: 987654, staff_strength: 40, is_active: true, created_at: &quot;2012-01-25 11:17:26&quot;, updated_at: &quot;2012-01-25 11:17:26&quot;, country_name: &quot;Korea&quot;&gt; #&lt;Location id: 16, name: &quot;Sporerbury4&quot;, street: &quot;73057 Jerad Shoal&quot;, city: &quot;South Kyliefurt&quot;, state: &quot;Delaware&quot;, zip: &quot;46553-3376&quot;, phone: 123456, other_phone: 987654, staff_strength: 40, is_active: true, created_at: &quot;2012-01-25 11:24:48&quot;, updated_at: &quot;2012-01-25 11:24:48&quot;, country_name: &quot;Australia&quot;&gt; </code></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugging around Active Support's Class.class_attribute extension]]></title>
    <link href="http://sandipransing.github.io/2011/12/bugging-around-active-supports"/>
    <updated>2011-12-28T19:14:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/bugging-around-active-supports</id>
    <content type="html"><![CDATA[<div class='post'>
We all know Active Support library constantly keeps adding new extensions to ruby core library and hence rails framework.<br/> Do you know now inside ruby class we can have class_attribute placeholder. <br/> <console>class A   class_attribute :counter, :access_time end  A.counter = 12 A.counter #=> 12 A.new.counter #=> 12 </console><br/><b>Inheritance </b><console>class B < A end  B.counter #=> 12 B.access_time #=> nil B.access_time = Time.now B.access_time #=> Wed Dec 28 18:55:06 +0530 2011 B.new.access_time #=> Wed Dec 28 18:55:06 +0530 2011 A.access_time = nil </console><br/>Restricting instance from writing class_attributes <br/><console>class V   class_attribute :counter, :instance_writer => false end  V.new.counter = 12 NoMethodError: undefined method `counter=' for #<V:0x7f8f9d66fee8></console><br/>Other ways <br/><console>a_class = Class.new{class_atrribute :counter}  a_class.counter = 13 a_class.counter #=> 13 a_class.new.counter #=> 13  p = Class.new { class_attribute :help, :instance_writer => false } p.new.help = 'Got a second!' NoMethodError: undefined method `help=' for #<#<Class:0x7f8f9d5c2fb8>:0x7f8f9d5b1038>p.help = 'Got a second!' p.help #=> "Got a second!" </console></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic methods inside ruby classes]]></title>
    <link href="http://sandipransing.github.io/2011/12/dynamic-methods-inside-ruby-classes"/>
    <updated>2011-12-22T17:54:00+05:30</updated>
    <id>http://sandipransing.github.io/2011/12/dynamic-methods-inside-ruby-classes</id>
    <content type="html"><![CDATA[<div class='post'>
Ruby language is dynamic and robust. We can define methods inside ruby classes at runtime. <br/> <console># bash class A   define_method :a do     puts "hello"   end      define_method :greeting do |message|     puts message   end end  A.new.a #=> hello A.new.greeting 'Ram ram' #=> Ram ram </console><br/> Can you imagine using dynamic methods below 24 lines of code is optimized to just 8 lines <br/>To know more on below code <a href="http://www.funonrails.com/2011/12/multiple-resources-registrations-with.html">read</a><console># Earlier code class ApplicationController < ActionController::Base   protect_from_forgery   helper_method :current_staff, :current_employee, current_admin    def authenticate_staff!(opts={})     current_staff || not_authorized   end    def current_staff     current_user if current_user.is_a? Staff   end    def authenticate_employee!(opts={})     current_employee || not_authorized   end    def current_employee     current_user if current_user.is_a? Employee   end      def authenticate_admin!(opts={})     current_admin || not_authorized   end    def current_admin     current_user if current_user.is_a? Admin   end end </console><br/><console># New Version using dynamic methods   %w(Staff Employee Admin).each do |k|     define_method "current_#{k.underscore}" do       current_user if current_user.is_a?(k.constantize)     end          define_method "authenticate_#{k.underscore}!" do |opts={}|       send("current_#{k.underscore}") || not_authorized     end   end </console></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Record Inheritance in Rails (ARI)]]></title>
    <link href="http://sandipransing.github.io/2010/12/active-record-inheritance-in-rails-ari"/>
    <updated>2010-12-09T01:28:00+05:30</updated>
    <id>http://sandipransing.github.io/2010/12/active-record-inheritance-in-rails-ari</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://www.scribd.com/doc/44922200/Active-Record-Inheritance-ARI" style="display: block; font: 14px Helvetica,Arial,Sans-serif; margin: 12px auto 6px; text-decoration: underline;" title="View Active Record Inheritance (ARI) on Scribd">Active Record Inheritance (ARI)</a> <object data="http://d1.scribdassets.com/ScribdViewer.swf" height="600" id="doc_427046804884780" name="doc_427046804884780" style="outline: medium none;" type="application/x-shockwave-flash" width="100%">  <param name="movie" value="http://d1.scribdassets.com/ScribdViewer.swf">  <param name="wmode" value="opaque">   <param name="bgcolor" value="#ffffff">   <param name="allowFullScreen" value="true">   <param name="allowScriptAccess" value="always">   <param name="FlashVars" value="document_id=44922200&access_key=key-2ix0qbm381eltbaykpu7&page=1&viewMode=list">   <embed id="doc_427046804884780" name="doc_427046804884780" src="http://d1.scribdassets.com/ScribdViewer.swf?document_id=44922200&access_key=key-2ix0qbm381eltbaykpu7&page=1&viewMode=list" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" height="600" width="100%" wmode="opaque" bgcolor="#ffffff"></embed>  </object></div>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sass | Fun On Rails]]></title>
  <link href="funonrails.com/categories/sass/atom.xml" rel="self"/>
  <link href="funonrails.com/"/>
  <updated>2014-02-21T02:23:40+05:30</updated>
  <id>funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[active-admin sass and rails 3]]></title>
    <link href="funonrails.com/2011/12/active-admin-sass-and-rails-3/"/>
    <updated>2011-12-28T14:58:00+05:30</updated>
    <id>funonrails.com/2011/12/active-admin-sass-and-rails-3</id>
    <content type="html"><![CDATA[<blockquote><p>Active Admin is the good way to provide rails administrative interface. It provides front-end db administration and its customizable too :)</p></blockquote>

<p>```</p>

<h1>Gemfile</h1>

<p>gem &lsquo;activeadmin&rsquo;
gem &lsquo;sass-rails&rsquo;
gem &ldquo;meta_search&rdquo;,    &lsquo;>= 1.1.0.pre&rsquo;
```</p>

<p>Bundle install, generate config &amp; migrate db
<code>
bundle install
rails g active_admin:install
rake db:migrate
</code></p>

<p>Config
```ruby</p>

<h1>config/initializers/active_admin.rb</h1>

<p>ActiveAdmin.setup do |config|
  config.site_title = &ldquo;Web Site :: Admin Panel&rdquo;
  config.site_title_link = &ldquo;/&rdquo;
  config.default_namespace = :siteadmin
  config.authentication_method = :authenticate_admin_user!
  config.current_user_method = :current_admin_user
  config.logout_link_method = :delete
end
```</p>

<p>Registering new resource
<code>
rails generate active_admin:resource category
</code></p>

<p>Customization
```ruby</p>

<h1>app/admin/categories.rb</h1>

<p>ActiveAdmin.register Category do
  scope :published</p>

<p>  form do |f|</p>

<pre><code>f.inputs do
  f.input :name, :label =&gt; 'Name'
  f.input :for_type, :label =&gt; "Category Type"
end
f.buttons
</code></pre>

<p>  end
end
```</p>

<p>Adding Dashboard
```
ActiveAdmin::Dashboards.build do
  section &ldquo;Recent Categories&rdquo; do</p>

<pre><code>table_for Category.published.recent.limit(2) do
  column :name do |c|
    link_to c.name, [:admin, c]
  end
  column :created_at
end
strong { link_to "View All Categories", admin_categories_path }
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[twitter bootstrap paginate and rails 3]]></title>
    <link href="funonrails.com/2011/12/twitter-bootstrap-paginate-and-rails-3/"/>
    <updated>2011-12-28T14:06:00+05:30</updated>
    <id>funonrails.com/2011/12/twitter-bootstrap-paginate-and-rails-3</id>
    <content type="html"><![CDATA[<p>Twitter bootstrap is css toolkit for rapid front-end UI development.
To get will-paginate working with bootstrap css we need to override default pagination link renderer.</p>

<p>Using Bootstrap-sass for rails 3
```</p>

<h1>Gemfile</h1>

<p>gem &lsquo;sass-rails&rsquo;
gem &lsquo;bootstrap-sass&rsquo;
```</p>

<p>```sass</p>

<h1>app/assets/stylesheets/application.css.sass</h1>

<p>// Place all the styles related to the home controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: <a href="http://sass-lang.com/">http://sass-lang.com/</a>
//= require bootstrap
```</p>

<p>Add WillPaginate LinkRenderer to intitializer
```ruby</p>

<h1>config/initializers/will_paginate.rb</h1>

<p>module WillPaginate
  module ActiveRecord</p>

<pre><code>module RelationMethods
  alias_method :per, :per_page
  alias_method :num_pages, :total_pages
  alias_method :total_count, :count
end
</code></pre>

<p>  end</p>

<p>  module ActionView</p>

<pre><code>def will_paginate(collection = nil, options = {})
  options[:inner_window] ||= 0
  options[:outer_window] ||= 0
  options[:class] ||= 'pagination pull-left'

  options[:renderer] ||= BootstrapLinkRenderer
  super.try :html_safe
end

class BootstrapLinkRenderer &lt; LinkRenderer
  protected

  def html_container(html)
    tag :div, tag(:ul, html), container_attributes
  end

  def page_number(page)
    tag :li, link(page, page, :rel =&gt; rel_value(page)), :class =&gt; ('active' if page == current_page)
  end

  def previous_or_next_page(page, text, classname)
    tag :li, link(text, page || 'javascript:void(0)'), :class =&gt; [classname[0..3], classname, ('disabled' unless page)].join(' ')
  end

  def gap
    tag :li, link(super, 'javascript:void(0)'), :class =&gt; 'disabled'
  end

end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>

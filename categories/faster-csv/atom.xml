<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: faster-csv | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/faster-csv/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-03-03T16:50:34+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[csv file import / export in rails 3]]></title>
    <link href="http://funonrails.com/2012/01/csv-file-import-export-in-rails-3/"/>
    <updated>2012-01-27T14:28:00+05:30</updated>
    <id>http://funonrails.com/2012/01/csv-file-import-export-in-rails-3</id>
    <content type="html"><![CDATA[<p>CSV (comma separated values) files are frequently used to import/export data.</p>

<p>In rails 3, <code>FasterCSV</code> comes as default and below is the way to upload csv files inside rails applications. The code below will also show you how to generate csv in memory, parse on csv data, skip header, iterate over records, save records inside db, export upload error file and many more.</p>

<p>First, View to upload file</p>

<p><code>haml
= form_tag upload_url, :multipart =&gt; true do
  %label{:for =&gt; "file"} File to Upload
  = file_field_tag "file"
  = submit_tag
</code>
Assume upload_url maps to import action of customers controller
Controller code</p>

<p>```ruby
class CustomersController &lt; ApplicationController<br/>
  [&hellip;]
  def import</p>

<pre><code>if request.post? &amp;&amp; params[:file].present?
  infile = params[:file].read
  n, errs = 0, []

  CSV.parse(infile) do |row|
    n += 1
    # SKIP: header i.e. first row OR blank row
    next if n == 1 or row.join.blank?
    # build_from_csv method will map customer attributes &amp; 
    # build new customer record
    customer = Customer.build_from_csv(row)
    # Save upon valid 
    # otherwise collect error records to export
    if customer.valid?
      customer.save
    else
      errs &lt;&lt; row
    end
  end
  # Export Error file for later upload upon correction
  if errs.any?
    errFile ="errors_#{Date.today.strftime('%d%b%y')}.csv"
    errs.insert(0, Customer.csv_header)
    errCSV = CSV.generate do |csv|
      errs.each {|row| csv &lt;&lt; row}
    end
    send_data errCSV,
      :type =&gt; 'text/csv; charset=iso-8859-1; header=present',
      :disposition =&gt; "attachment; filename=#{errFile}.csv"
  else
    flash[:notice] = I18n.t('customer.import.success')
    redirect_to import_url #GET
  end
end
</code></pre>

<p>  end
  [&hellip;]
end
```
Customer model</p>

<p>```ruby
class Customer &lt; ActiveRecord::Base
  scope :active, where(:active => true)
  scope :latest, order(&lsquo;created_at desc&rsquo;)</p>

<p>  def self.csv_header</p>

<pre><code>"First Name,Last Name,Email,Phone,Mobile, Address, FAX, City".split(',')
</code></pre>

<p>  end</p>

<p>  def self.build_from_csv(row)</p>

<pre><code># find existing customer from email or create new
cust = find_or_initialize_by_email(row[2])
cust.attributes ={:first_name =&gt; row[0],
  :last_name =&gt; row[1],
  :email =&gt; row[3],
  :phone =&gt; row[4],
  :mobile =&gt; row[5],
  :address =&gt; row[6],
  :fax =&gt; row[7],
  :city =&gt; row[8]}
return cust
</code></pre>

<p>  end</p>

<p>  def to_csv</p>

<pre><code>[first_name, last_name, email, phone, mobile, address, fax, city]
</code></pre>

<p>  end
end
```</p>

<p>Export customer records in CSV format
Below code loads customer records from database then generate csv_data inside memory and exports data to browser using send_data method.</p>

<p>Note: As we are not writing on file system hence code can easily work heroku.
```ruby
def export
  # CRITERIA : to select customer records
  #=> Customer.active.latest.limit(100)
  custs = Customer.limit(10)
  filename =&ldquo;customers_#{Date.today.strftime(&lsquo;%d%b%y&rsquo;)}&rdquo;
  csv_data = FasterCSV.generate do |csv|</p>

<pre><code>csv &lt;&lt; Customer.csv_header
custs.each do |c| 
  csv &lt;&lt; c.to_csv
end 
</code></pre>

<p>  end
  send_data csv_data,</p>

<pre><code>:type =&gt; 'text/csv; charset=iso-8859-1; header=present',
:disposition =&gt; "attachment; filename=#{filename}.csv"
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
</feed>

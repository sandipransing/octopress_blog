<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grape | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/grape/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-04-02T15:54:48+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grape API authentication using Devise Auth Token]]></title>
    <link href="http://funonrails.com/2014/03/api-authentication-using-devise-token/"/>
    <updated>2014-03-27T02:18:53+05:30</updated>
    <id>http://funonrails.com/2014/03/api-authentication-using-devise-token</id>
    <content type="html"><![CDATA[<p>In <a href="http://funonrails.com/2014/03/building-restful-api-using-grape-in-rails/">previous post</a> we saw how to buil RESTful API using Grape. In this post we will see how to add <em>devise auth token</em> to <em>users</em> and how to use it in <em>Grape API</em> authentication.</p>

<p>Lets see how this can be done assuming you already have devise setup ready.</p>

<h2>Add <em>token_authenticable</em> to devise modules</h2>

<p>In <em>user.rb</em> add <em>:token_authenticatable</em> to the list of devise modules, it should look something like below:
```ruby
class User &lt; ActiveRecord::Base</p>

<h1>..code..</h1>

<p>  devise :database_authenticatable,</p>

<pre><code>:token_authenticatable,
:invitable,
:registerable, 
:recoverable, 
:rememberable, 
:trackable, 
:validatable
</code></pre>

<p>  attr_accessible :name, :email, :authentication_token</p>

<p>  before_save :ensure_authentication_token</p>

<h1>..code..</h1>

<p>end
```</p>

<!-- more -->


<h2>Add migration for authentiction token</h2>

<p>```
rails g migration add_auth_token_to_users</p>

<pre><code>  invoke  active_record
  create    db/migrate/20140326204628_add_auth_token_to_users.rb
</code></pre>

<p><code>
Edit migration file to add `:authentication_token` column to users
</code></p>

<h1>db/migrate/20140326204628_add_auth_token_to_users.rb</h1>

<p>class AddAuthTokenToUsers &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>change_table :users do |t|
  t.string :authentication_token
end

add_index  :users, :authentication_token, :unique =&gt; true
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>remove_column :users, :authentication_token
</code></pre>

<p>  end
end
```</p>

<h4>Run migrations</h4>

<p><code>
rake db:migrate
</code></p>

<h4>Generate token for existing users</h4>

<p>We need to call save on every instance of user that will ensure authentication token is present for each user.
<code>
User.all.each(&amp;:save)
</code></p>

<h4>Secure Grape API using auth token</h4>

<p>You need to add below code to the <em>API::Root</em> in-order to add token based authentication. If you are unware of <em>API::Root</em> then please read <a href="http://funonrails.com/2014/03/building-restful-api-using-grape-in-rails/">Building RESTful API using Grape</a></p>

<p>In below example, We are authenticating user based on two scenarios
&ndash; If user is logged on to the web app then use the same session
&ndash; If session is not available and <em>auth token</em> is passed then find user based on the token
```ruby</p>

<h1>lib/api/root.rb</h1>

<p>module API
  class Root &lt; Grape::API</p>

<pre><code>prefix    'api'
format    :json

rescue_from :all, :backtrace =&gt; true
error_formatter :json, API::ErrorFormatter

before do
  error!("401 Unauthorized", 401) unless authenticated
end

helpers do
  def warden
    env['warden']
  end

  def authenticated
    return true if warden.authenticated?
    params[:access_token] &amp;&amp; @user = User.find_by_authentication_token(params[:access_token])
  end

  def current_user
    warden.user || @user
  end
end

mount API::V1::Root
mount API::V2::Root
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building RESTful API using Grape in Rails]]></title>
    <link href="http://funonrails.com/2014/03/building-restful-api-using-grape-in-rails/"/>
    <updated>2014-03-26T12:39:27+05:30</updated>
    <id>http://funonrails.com/2014/03/building-restful-api-using-grape-in-rails</id>
    <content type="html"><![CDATA[<p>While developing a <em>rich client side web</em> application or <em>mobile app</em>, we need <em>RESTful JSON API</em> which interacts with the <em>front-end javascript framework</em>. Here you may use <strong>backbone.js</strong>, <strong>ember.js</strong> or <strong>angular.js</strong> on the front-end side of application.</p>

<p>Here we&rsquo;ll be using <em>Ruby on Rails</em> on the <em>back-end</em> which will serve <em>JSON API</em> consumable by fron-end framework. If you look at the <a href="https://www.ruby-toolbox.com/categories/API_Builders">ruby toolbox</a> you&rsquo;ll see many API Builder gems available but it seems <em>grape</em> can be a good choice.</p>

<p><img class="left no-border <a" src="href="https://raw.githubusercontent.com/wiki/intridea/grape/grape_logo.png">https://raw.githubusercontent.com/wiki/intridea/grape/grape_logo.png</a>" width="186" height="67" title="Grape" > <em>Grape is a RESTful API microframework built to easily and quickly produce APIs for Ruby-rooted web applications.</em></p>

<p style='clear:both'>
Let's see how we can build RESTful JSON apis using <i>Grape</i> library:
</p>


<!--more-->


<h2>Getting Started</h2>

<p>Add <em>grape</em> to your <em>Gemfile</em> and then run <em>bundle</em> install
<code>
gem 'grape'
</code></p>

<h2>Modularizing API directory structure</h2>

<p>Place API files into <em>lib/api</em>. You need to create <em>api</em> folder inside <em>lib</em> directory.
As we are placing api directory inside lib you don&rsquo;t need to explicitly load it inside <em>application.rb</em>
If you want to place <em>api</em> directory at some other place then add below lines to to <em>application.rb</em>
<code>ruby
config.paths.add "app/api", glob: "**/*.rb"
config.autoload_paths += Dir["#{Rails.root}/app/api/*"]
</code>
First, Let&rsquo;s create <em>API::Root</em> class that will mount available api versions.
```ruby</p>

<h1>lib/api/root.rb</h1>

<p>module API
  class Root &lt; Grape::API</p>

<pre><code>prefix 'api'
mount API::V1::Root
# mount API::V2::Root (next version)
</code></pre>

<p>  end
end
<code>
Now, create a *API::V1::Root* class that will mount resources for version 1
</code>ruby</p>

<h1>lib/api/v1/root.rb</h1>

<p>module API
  module V1</p>

<pre><code>class Root &lt; Grape::API
  mount API::V1::Posts
  mount API::V1::Authors
end
</code></pre>

<p>  end
end
<code>
Now, add resource *Posts* available for api access in json format
</code>ruby</p>

<h1>lib/api/v1/posts.rb</h1>

<p>module API
  module V1</p>

<pre><code>class Posts &lt; Grape::API
  version 'v1'
  format :json

  resource :posts do
    desc "Return list of recent posts"
    get do
      Post.recent.all
    end
  end
end
</code></pre>

<p>  end
end
<code>
Now, lets add one more resource `Authors` to version v1
</code>ruby</p>

<h1>lib/api/v1/authors.rb</h1>

<p>module API
  module V1</p>

<pre><code>class Authors &lt; Grape::API
  version 'v1' 
  format :json 

  resource :authors do
    desc "Return list of authors"
    get do
      Author.all
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<h2>Mounting <em>API</em> under rails routes</h2>

<p>Mount <em>API::Root</em> under routes pointing to rails root
```</p>

<h1>config/routes.rb</h1>

<p>SampleApp::Application.routes.draw do
  mount API::Root => &lsquo;/&rsquo;
end
```</p>

<h2>Customize JSON API Errors</h2>

<p>We can control the api raised errors and customize them so that response is in our own format whenever there are exceptions.
```ruby</p>

<h1>lib/api/error_formatter.rb</h1>

<p>module API
  module ErrorFormatter</p>

<pre><code>def self.call message, backtrace, options, env
  { :response_type =&gt; 'error', :response =&gt; message }.to_json
end
</code></pre>

<p>  end
end
<code>
Now, you can plug this module inside *API::Root*
</code>ruby</p>

<h1>lib/api/root.rb</h1>

<p>module API
  class Root &lt; Grape::API</p>

<pre><code>#...
error_formatter :json, API::ErrorFormatter
#...
</code></pre>

<p>  end
end
<code>
You can override error formatter for particular api version. Let's customize errors for *API::v1::Root*:
</code>ruby</p>

<h1>lib/api/v1/error_formatter.rb</h1>

<p>module API
  module V1</p>

<pre><code>module ErrorFormatter
  def self.call message, backtrace, options, env
    { :response_type =&gt; 'error', :response =&gt; message }.to_json
  end
end
</code></pre>

<p>  end
end</p>

<h1>lib/api/v1/root.rb</h1>

<p>module API
  module V1</p>

<pre><code>class Root &lt; Grape::API
  #...
  error_formatter :json, API::V1::ErrorFormatter
  #...
end
</code></pre>

<p>  end
end
```</p>

<h2>Accessing <em>API</em> routes</h2>

<p>If you do <code>rake routes | grep api</code> then it will list only mount path for api but do not list all the paths.
```
rake routes | grep api</p>

<pre><code>api_root        /api                API::Root
</code></pre>

<p><code>
So, in-order to list all api paths, you may have to create api routes task:
</code>ruby</p>

<h1>lib/tasks/routes.rake</h1>

<p>namespace :api do
  desc &ldquo;API Routes&rdquo;
  task :routes => :environment do</p>

<pre><code>API::Root.routes.each do |api|
  method = api.route_method.ljust(10)
  path = api.route_path.gsub(":version", api.route_version)
  puts "     #{method} #{path}"
end
</code></pre>

<p>  end
end
<code>
Now, run task and it should print routes like this:
</code>
rake api:routes</p>

<pre><code>GET        /api/v1/posts(.:format)
GET        /api/v1/authors(.:format)
</code></pre>

<p>```</p>

<h2>Securing API</h2>

<p>Now we have got Grape <em>API</em> ready and working properly. Lets see how we can secure <em>API</em>. There are many approaches to authenticate API. Here lets first get it working with simple <em>HTTP Basic authentication</em>.</p>

<h4>HTTP Basic authentication</h4>

<p>In our case, lets add basic authentication to the <em>API::Root</em> and it will get applied to all versions of API.
```ruby</p>

<h1>lib/api/root.rb</h1>

<p>module API
  class Root &lt; Grape::API</p>

<pre><code>#...

http_basic do |email, password|
  user = User.find_by_email(email)
  user &amp;&amp; user.valid_password?(password)
end
#...
</code></pre>

<p>  end
end
<code>
Requesting API using basic http auth credentials:
</code>
curl <a href="http://localhost:3000/api/products">http://localhost:3000/api/products</a> -u &ldquo;admin:secret&rdquo;
```</p>

<h4>Authenticate using email and password</h4>

<p>Grape provides us with <em>before block</em> inside that we can add authenctication code.
```ruby</p>

<h1>lib/api/root.rb</h1>

<p>module API
  class Root &lt; Grape::API</p>

<pre><code>#...
before do
  error!("401 Unauthorized", 401) unless authenticated
end

helpers do
  def authenticated
    user = User.find_by_email(params[:email])
    user &amp;&amp; user.valid_password?(params[:password])
  end
end
#...
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>

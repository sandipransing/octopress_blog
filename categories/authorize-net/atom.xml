<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: authorize-net | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/authorize-net/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-03-27T15:27:50+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authorize Net (SIM) payment integration with rails]]></title>
    <link href="http://funonrails.com/2011/12/authorize-net-sim-payment-integration-with-rails/"/>
    <updated>2011-12-30T16:16:00+05:30</updated>
    <id>http://funonrails.com/2011/12/authorize-net-sim-payment-integration-with-rails</id>
    <content type="html"><![CDATA[<p>Authorize Net SIM gateway transaction skips merchant side creditcard details form and directs transaction to be take place on gateway server.
```</p>

<h1>Gemfile</h1>

<p>gem &lsquo;authorize-net&rsquo;
```
Register for authorize net sandbox account click <a href="https://developer.authorize.net/testaccount/">here</a></p>

<p>Payment gateway credentials
```</p>

<h1>config/gateway.yml</h1>

<p>development: &amp;development</p>

<pre><code>mode: test
login: 9gdLh6T
key: 67fu45xw6VP92LX1
</code></pre>

<p>production:
   &lt;&lt;: *development</p>

<p>test:
   &lt;&lt;: *development
```</p>

<p>Generate &amp; Migrate Payment Model
<code>ruby
rails g model payment status:string amount:float transaction_number:string
rake db:migrate
</code></p>

<p>SIM gateway methods extracted and added to payment model
```ruby</p>

<h1>app/models/payment.rb</h1>

<p>class Payment &lt; ActiveRecord::Base</p>

<p>  PROCESSING, FAILED, SUCCESS = 1, 2, 3</p>

<p>  validates :amount, :presence => true, :numericality => { :greater_than => 0 }</p>

<p>  def self.conf</p>

<pre><code>@@gateway_conf ||= YAML.load_file(Rails.root.join('config/gateway.yml').to_s)[Rails.env]
</code></pre>

<p>  end</p>

<p>  def success?</p>

<pre><code>self.status == SUCCESS
</code></pre>

<p>  end</p>

<p>  ## Authorize :: SIM
  def setup_transaction(options ={})</p>

<pre><code>options.merge!(:link_method =&gt; AuthorizeNet::SIM::HostedReceiptPage::LinkMethod::POST)
t = AuthorizeNet::SIM::Transaction.new(
  auth['login'], auth['key'], amount,
  :hosted_payment_form =&gt; true,
  :test =&gt; auth['mode']
)
t.set_hosted_payment_receipt(AuthorizeNet::SIM::HostedReceiptPage.new(options))
return t
</code></pre>

<p>  end</p>

<p>  def auth</p>

<pre><code>self.class.conf
</code></pre>

<p>  end
end
```</p>

<p>Payment routes
```ruby</p>

<h2>Callback URL</h2>

<p>match &lsquo;/billing/:id/confirm&rsquo;, :to => &lsquo;billing#authorize&rsquo;, :as => :confirm_billing</p>

<h2>Request URL</h2>

<p>match &lsquo;/billing/:id&rsquo;, :to => &lsquo;billing#checkout&rsquo;, :as => :billing
match &lsquo;/billing/:id/thank_you&rsquo;, :to => &lsquo;billing#thank_you&rsquo;, :as => :thank_you_billing
```</p>

<p>Billing controller
```ruby</p>

<h1>app/controllers/billing_controller.rb</h1>

<p>class BillingController &lt; ApplicationController
  helper :authorize_net</p>

<p>  before_filter :get_order, :only => [:checkout, :authorize, :thank_you]</p>

<p>  def checkout</p>

<pre><code># ASSUMPTION order is valid means amount is entered
@transaction = @order.setup_transaction(
  {:link_text =&gt; 'Continue',
    :link_url =&gt; confirm_billing_url(@order)})
</code></pre>

<p>  end</p>

<p>  ## CALL BACK
  def authorize</p>

<pre><code>resp = AuthorizeNet::SIM::Response.new(params)
if resp.approved?
  @order.status = Payment::SUCCESS
  @order.transaction_num = resp.transaction_id
else
  @order.status = Payment::FAILED 
end
@order.save(:validate =&gt; false)
redirect_to thank_you_billing_url(@order)
</code></pre>

<p>  end</p>

<p>  private
  def auth</p>

<pre><code>Payment.conf
</code></pre>

<p>  end</p>

<p>  def get_order</p>

<pre><code>@order = Payment.find_by_id(params[:id])
@order &amp;&amp; @order.valid? || invalid_url
</code></pre>

<p>  end
end
```</p>

<p>View Forms
```haml</p>

<h1>app/views/billing/checkout.html.haml</h1>

<p>= form_for :sim_transaction, :url => AuthorizeNet::SIM::Transaction::Gateway::TEST, :html => {:id => :authForm} do |f|
  = sim_fields(@transaction)
:javascript
  $(document).ready(function(){</p>

<pre><code>$('#authForm').submit();
</code></pre>

<p>  })
<code>
</code>haml</p>

<h1>app/views/billing/thank_you.html.haml</h1>

<ul>
<li>if @order.success?
%p The transaction is successfully completed</li>
<li>else
%p The transaction failed
```</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net Payment Gateway integration with rails]]></title>
    <link href="http://funonrails.com/2011/12/authorize-net-payment-gateway-with-rails/"/>
    <updated>2011-12-29T00:36:00+05:30</updated>
    <id>http://funonrails.com/2011/12/authorize-net-payment-gateway-with-rails</id>
    <content type="html"><![CDATA[<p>Authorize Net Payment gateway provides api access to enable online payments
Gateway provides different api options to integrate &ndash;</p>

<ol>
<li><p>Direct Post Method
In this method gateway handles all steps required in payment transaction flow securely and clean manner. To know more on this click <a href="https://developer.authorize.net/api/dpm">here</a>.</p></li>
<li><p>Server Integration Method (SIM)
Here, Payment form and creditcard detail form resides on gateway site and all the steps in transaction carried out at gateway server</p></li>
<li><p>Advance Integration Method (AIM)
Provides full control of all the transaction steps at merchant server. Payment form resides on merchant side. merchnat server sends authorization and payment capture requests to gateway server where actual transaction takes place and response is sent back to merchant server to notify transaction status. To know detail integration on this click <a href="http://www.funonrails.com/2011/12/authorizenet-aim-payment-integration">here</a>.</p></li>
</ol>


<p><strong>Prerequisites before getting started with integration</strong></p>

<p><a href="https://developer.authorize.net/testaccount">Sign up for a test account</a> to obtain an API Login ID and Transaction Key. These keys will authenticate requests to the payment gateway.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorize Net (AIM) payment integration with rails]]></title>
    <link href="http://funonrails.com/2011/12/authorizenet-aim-payment-integration/"/>
    <updated>2011-12-28T17:15:00+05:30</updated>
    <id>http://funonrails.com/2011/12/authorizenet-aim-payment-integration</id>
    <content type="html"><![CDATA[<p>Authorize Net (AIM) method enables internet merchants to accept online payments via credit card.
Below post will show you how to integrate authorize net payment gateway inside rails app to accept online payments using activemerchant library.</p>

<p>```</p>

<h1>Gemfile</h1>

<p>gem &lsquo;activemerchant&rsquo;, :require => &lsquo;active_merchant&rsquo;
```</p>

<p>Register for authorize net sandbox account click <a href="https://developer.authorize.net/testaccount/">here</a></p>

<p>Payment gateway credentials
```</p>

<h1>config/authorize_net.yml</h1>

<p>development: &amp;development</p>

<pre><code>mode: test
login: 9gdLh6T
key: 67fu45xw6VP92LX1
</code></pre>

<p>production:
   &lt;&lt;: *development</p>

<p>test:
   &lt;&lt;: *development
```</p>

<p>Payment &amp; creditcard form
```haml</p>

<h1>app/views/payments/new</h1>

<p>= form_for @payment, :url => payments_url do |f|
  = f.text_field :amount
  = fields_for :creditcard, @creditcard do |cc|</p>

<pre><code>= cc.text_field :name
= cc.text_field :number
= cc.select :month, Date::ABBR_MONTHNAMES.compact.each_with_index.collect{|m, i| [m, i+1]}, {:prompt =&gt; 'Select'}
= cc.select :year, Array.new(15){|i| Date.current.year+i}, {:prompt =&gt; 'Select'}
= cc.text_field :verification_value
</code></pre>

<p>  = f.submit &lsquo;Pay&rsquo;
```</p>

<p>Payments Controller
```ruby</p>

<h1>app/controllers/payments_controller.rb</h1>

<p>class PaymentsController &lt; ApplicationController</p>

<p>  def new</p>

<pre><code>@payment = Payment.new
@creditcard = ActiveMerchant::Billing::CreditCard.new
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@payment = Payment.new(params[:payment])
@creditcard = ActiveMerchant::Billing::CreditCard.new(params[:creditcard])
@payment.valid_card = @creditcard.valid?
if @payment.valid? 
  @payment = @payment.process_payment(@creditcard)
  if @payment.success?
    @payment.save
    flash[:notice] = I18n.t('payment.success')
    redirect_to payments_url and return
  else
    flash[:error] = I18n.t('payment.failed')
  end
end
render :action =&gt; :new
</code></pre>

<p>  end
end
```</p>

<p>Generate &amp; Migrate Payment Model
<code>ruby
rails g model payment status:string amount:float transaction_number:string
rake db:migrate
</code></p>

<p>Payment Model
```ruby</p>

<h1>app/models/payment.rb</h1>

<p>class Payment &lt; ActiveRecord::Base</p>

<p>  PROCESSING, FAILED, SUCCESS = 1, 2, 3</p>

<p>  validates :valid_card, :inclusion => {:in => [true], :message => &lsquo;Invalid Credit Card&rsquo;}
  validates :amount, :presence => true, :numericality => { :greater_than => 0 }</p>

<p>  def process_payment(creditcard)</p>

<pre><code>ActiveMerchant::Billing::Base.mode = auth['mode'].to_sym
self.status = PROCESSING
response = gateway.purchase(amount * 100, creditcard)

if response.success?
  self.transaction_number = response.subscription_id
  self.status = SUCCESS
else
  self.status = FAILED
end
return self
</code></pre>

<p>  rescue Exception => e</p>

<pre><code>self.status = FAILED
return self
</code></pre>

<p>  end</p>

<p>  def success?</p>

<pre><code>self.status == SUCCESS
</code></pre>

<p>  end</p>

<p>  private
  def gateway</p>

<pre><code>ActiveMerchant::Billing::AuthorizeNetGateway.new(
  :login    =&gt; auth['login'],
  :password =&gt; auth['key'])
</code></pre>

<p>  end</p>

<p>  def auth</p>

<pre><code>@@auth ||= YAML.load_file("#{Rails.root}/config/authorize_net.yml")[Rails.env]
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>

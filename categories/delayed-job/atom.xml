<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: delayed-job | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/delayed-job/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-03-05T15:42:30+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monitor Delayed Job in rails]]></title>
    <link href="http://funonrails.com/2011/03/monitor-delayed-job-in-rails/"/>
    <updated>2011-03-01T01:22:00+05:30</updated>
    <id>http://funonrails.com/2011/03/monitor-delayed-job-in-rails</id>
    <content type="html"><![CDATA[<h2>Delayed Job &amp; Monit configuration</h2>

<p>We were struggling through how to monit delayed_job from past few months because monit doesn&rsquo;t work seamlessly with delayed_job start/stop commands and finally we got able to monit delayed_job.</p>

<p>Here is our old configuration that wasn&rsquo;t working anyhow-</p>

<p>```
check process delayed_job with pidfile /home/sandip/shared/pids/delayed_job.pid</p>

<pre><code>stop program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; RAILS_ENV=production script/delayed_job stop'"
start program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; RAILS_ENV=production script/delayed_job start'"
if totalmem &gt; 100.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```
After doing google &amp; looking at stackoverflow, we found different solutions to work with but none of them found useful to me. :(</p>

<p>After reading google group someone (not remembering exactly) directed to write a init script for delayed_job server and that perfectly worked for me and my headache of self moniting delayed_job ended up ;)</p>

<h4>Delayed Job init script</h4>

<p><em>/etc/init.d/delayed_job</em>
```</p>

<h1>! /bin/sh</h1>

<p>set_path=&ldquo;cd /home/sandip/current&rdquo;</p>

<p>case &ldquo;$1&rdquo; in</p>

<pre><code>start)
echo -n "Starting delayed_job: "
su - root -c "$set_path; RAILS_ENV=production script/delayed_job start" &gt;&gt; /var/log/delayed_job.log 2&gt;&amp;1
echo "done."
;;
stop)
echo -n "Stopping delayed_job: "
su - root -c "$set_path; RAILS_ENV=production script/delayed_job stop" &gt;&gt; /var/log/delayed_job.log 2&gt;&amp;1
echo "done."
;;
*)
echo "Usage: $N {start|stop}" &gt;&amp;2
exit 1
;;
</code></pre>

<p>esac</p>

<p>exit 0
```</p>

<p>finally here is the working monit delayed_job configuration</p>

<p>```
check process delayed_job with pidfile /home/sandip/shared/pids/delayed_job.pid</p>

<pre><code>stop program = "/etc/init.d/delayed_job stop"
start program = "/etc/init.d/delayed_job start"
if totalmem &gt; 100.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```</p>

<h4>Thinking Sphinx monit configuration</h4>

<p>```
check process sphinx with pidfile /home/sandip/shared/pids/searchd.pid</p>

<pre><code>stop program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/rake RAILS_ENV=production ts:stop'"
start program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/rake RAILS_ENV=production ts:start'"
if totalmem &gt; 85.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```</p>

<h4>Adhearsion (ahn) monit confiuration</h4>

<p>```
check process ahn with pidfile /home/josh/shared/pids/ahnctl.pid</p>

<pre><code>stop program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/ahnctl stop adhearsion'"
start program = "/bin/bash -c 'cd /home/sandip/current &amp;&amp; /usr/bin/ahnctl start adhearsion'"
if totalmem &gt; 100.0 MB for 3 cycles then restart
if cpu usage &gt; 95% for 3 cycles then restart
</code></pre>

<p>```</p>

<h4>Nginx monit configuration</h4>

<p>```
check process nginx with pidfile /opt/nginx/logs/nginx.pid</p>

<pre><code>start program = "/opt/nginx/sbin/nginx"
stop  program = "/opt/nginx/sbin/nginx -s stop"
if cpu is greater than 70% for 3 cycles then alert
if cpu &gt; 80% for 5 cycles then restart
if 10 restarts within 10 cycles then timeout
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DelayedJOb's (DJ) fancy methods]]></title>
    <link href="http://funonrails.com/2010/10/delayed-jobs-fancy-methods/"/>
    <updated>2010-10-06T19:39:00+05:30</updated>
    <id>http://funonrails.com/2010/10/delayed-jobs-fancy-methods</id>
    <content type="html"><![CDATA[<p>Delayed Job provides <code>send_later</code> and <code>send_at</code> as <em>instance</em> as well as <em>class</em>  methods. It also gives us <code>handle_asynchronously</code> as <em>class</em> method to be written inside class.
```ruby
module Delayed
  module MessageSending</p>

<pre><code>def send_later(method, *args) 
  Delayed::Job.enqueue Delayed::PerformableMethod.new(self, method.to_sy m, args) 
end 

def send_at(time, method, *args) 
  Delayed::Job.enqueue(Delayed::PerformableMethod.new(self, method.to_sy m, args), 0, time) 
end 

module ClassMethods 
  def handle_asynchronously(method) 
    aliased_method, punctuation = method.to_s.sub(/([?!=])$/, ''), $1 
    with_method, without_method = "#{aliased_method}_with_send_later#{pu nctuation}", "#{aliased_method}_without_send_later#{punctuation}" 
    define_method(with_method) do |*args| 
      send_later(without_method, *args) 
    end 
    alias_method_chain method, :send_later 
  end 
end
</code></pre>

<p>  end
end
```</p>

<h2>Usage of <em>send_later</em>, <em>send_at</em> and <em>handle_asynchronously</em></h2>

<p>```ruby</p>

<h1>instance method</h1>

<p>user.send_later(:deliver_welcome)</p>

<h1>class_method</h1>

<p>Notifier.send_later(:deliver_welcome, user)</p>

<p>Notifier.send_at(15.minutes.from_now, :deliver_welcome, user)</p>

<h1>Inside User class write below line after deliver_welcome method</h1>

<p>handle_asynchronously :deliver_welcome
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution to DelayedJob(DJ) gem server start problem]]></title>
    <link href="http://funonrails.com/2010/10/solution-to-delayed-job-gem-server-start-problem/"/>
    <updated>2010-10-05T16:15:00+05:30</updated>
    <id>http://funonrails.com/2010/10/solution-to-delayed-job-gem-server-start-problem</id>
    <content type="html"><![CDATA[<p>Solution to DelayedJob(DJ) gem server start problem</p>

<p>I had installed delayed_job gem 2.0.3, daemons gem but after staring DJ server it shows daemon started but actually process gets killed automatically.</p>

<p>I performed steps given by Kevin on google group and it worked like charm</p>

<p>Here are the steps:</p>

<h2>1 Add github to gem sources</h2>

<p><code>
sudo gem sources -a http://gems.github.com
</code></p>

<h2>2 Install alexvollmer-daemon-spawn</h2>

<p><code>
sudo gem install alexvollmer-daemon-spawn
</code></p>

<h2>3 Move the old daemons delayed job script out of the way</h2>

<p><code>
mv script/delayed_job script/delayed_job.daemons
</code></p>

<h2>4 Copy below gist to <em>script/delayed_job</em>:</h2>

<script src="https://gist.github.com/akmathur/104314.js"></script>


<p>Try it out again making sure it writes to the tmp/pids directory ok.</p>

<p>My line looks like this:
<code>
RAILS_ENV=production script/delayed_job start
</code>
then to check (besides running &lsquo;ps&rsquo;), you can run this:
<code>
RAILS_ENV=production script/delayed_job status
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed Job changing job parameters in Rails]]></title>
    <link href="http://funonrails.com/2010/01/delayed-job-changing-job-parameters-in-rails/"/>
    <updated>2010-01-13T19:59:00+05:30</updated>
    <id>http://funonrails.com/2010/01/delayed-job-changing-job-parameters-in-rails</id>
    <content type="html"><![CDATA[<p>Delayed job variables initialization written on at collectiveidea / delayed_job doesn&rsquo;t work.
```ruby</p>

<h1>config/initializers/delayed_job_config.rb</h1>

<p>Delayed::Worker.destroy_failed_jobs = false
Delayed::Worker.sleep_delay = 60
Delayed::Worker.max_attempts = 3
Delayed::Worker.max_run_time = 5.minutes
<code>
Here is the correct way of doing it as mentioned on tobi / delayed_job
</code>ruby</p>

<h1>config/initializers/delayed_job_config.rb</h1>

<p>Delayed::Job.destroy_failed_jobs = false
silence_warnings do
  Delayed::Job.const_set(&ldquo;MAX_ATTEMPTS&rdquo;, 3)
  Delayed::Job.const_set(&ldquo;MAX_RUN_TIME&rdquo;, 5.minutes)
end
```</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx | Fun On Rails]]></title>
  <link href="funonrails.com/categories/nginx/atom.xml" rel="self"/>
  <link href="funonrails.com/"/>
  <updated>2014-02-24T16:29:31+05:30</updated>
  <id>funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails 3.1.1 haml sass jquery coffee-rails devise twitter-bootstrap railroady heroku]]></title>
    <link href="funonrails.com/2011/11/rails-311-haml-sass-jquery-coffee-rails/"/>
    <updated>2011-11-22T00:07:00+05:30</updated>
    <id>funonrails.com/2011/11/rails-311-haml-sass-jquery-coffee-rails</id>
    <content type="html"><![CDATA[<p>Install RVM first</p>

<p><code>
bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvminstaller)
</code></p>

<p>rvm list known
```</p>

<h1>MRI Rubies</h1>

<p>[ruby-]1.8.6-head
[ruby-]1.8.7[-p352]
[ruby-]1.9.3-head
ruby-head</p>

<h1>JRuby</h1>

<p>jruby-1.2.0
jruby-head</p>

<h1>Rubinius</h1>

<p>rbx-1.0.1
rbx-2.0.0pre</p>

<h1>Ruby Enterprise Edition</h1>

<p>ree-1.8.6
ree-1.8.7-head
```</p>

<p>Install ruby 1.9.3
```
rvm install 1.9.3-head
rvm gemset create rails311
rvm use 1.9.3-head@rails311 &mdash;default</p>

<p>gem install rails -v3.1.1 &mdash;no-rdoc &mdash;no-ri</p>

<p>gem install heroku
gem install rb-readline
```</p>

<p>Create new rails project
<code>
rails new cdc -m http://railswizard.org/b22092a4358bbebb3a46.rb -J -T
</code></p>

<p>Above command will create rails app, bundle install, and Heroku Deployment
<code>
http://railsblank.heroku.com/ (production)
</code></p>

<p>Local System nginx-passenger setup
<code>
gem install passenger
rvmsudo passenger-install-nginx-module
</code>
If you find pcre download error then make sure you libpcre-dev pkg installed on your system otherwise install it and re-run
<code>
sudo apt-get install libpcre3-dev
</code></p>

<p>Nginx Configuration
```
http {
  passenger_root /home/sandip/.rvm/gems/ruby-1.9.3-head@rails311/gems/passenger-3.0.9;
  passenger_ruby /home/sandip/.rvm/wrappers/ruby-1.9.3-head@rails311/ruby;</p>

<p>  server {</p>

<pre><code>listen 80;
server_name railsblank.local;
root /home/sandip/railsblank/public;
rails_env development;
passenger_enabled on;
</code></pre>

<p>}
```</p>

<p>git source code can be found here
<code>
git clone git://github.com/sandipransing/rails_blank.git
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up nginx maximum upload size]]></title>
    <link href="funonrails.com/2011/03/setting-up-nginx-maximum-upload-size/"/>
    <updated>2011-03-31T15:56:00+05:30</updated>
    <id>funonrails.com/2011/03/setting-up-nginx-maximum-upload-size</id>
    <content type="html"><![CDATA[<p>Edit nginx configuration and look for <code>http</code> block inside it.</p>

<p>Then inside <code>htttp</code> block add following lines.</p>

<p>```
http {</p>

<pre><code>include conf/mime.types;
default_type application/octet-stream;
client_max_body_size 10m;
....
</code></pre>

<p>}
```</p>

<p>In above configuration <em>application/octet-stream</em> supports any kind of file upload.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx and thin installation and configuration]]></title>
    <link href="funonrails.com/2010/03/nginx-and-thin-installation/"/>
    <updated>2010-03-26T02:59:00+05:30</updated>
    <id>funonrails.com/2010/03/nginx-and-thin-installation</id>
    <content type="html"><![CDATA[<p>Install nginx server using following command</p>

<p><code>
apt-get install nginx
</code></p>

<p>Edit nginx configuration and add server block inside html block.&nbsp;</p>

<p>```
server {</p>

<pre><code>listen       80;
server_name  boost;

root /home/sandip/rails_app/public;

location / {

    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
    }

    if (-f $request_filename.html) {
        rewrite (.*) $1.html break;

    }

    if (!-f $request_filename) {
        proxy_pass http://thin;
        break;
    }
}

error_page   500 502 503 504  /50x.html;
location = /50x.html {

    root   html;

}
</code></pre>

<p>}
```</p>

<h2>Install thin server as gem</h2>

<p>```
sudo gem install thin
Building native extensions.  This could take a while&hellip;
Building native extensions.  This could take a while&hellip;</p>

<p>Successfully installed eventmachine-0.12.10
Successfully installed thin-1.2.7</p>

<p>2 gems installed
```</p>

<h2>Install thin service</h2>

<p><code>
sudo thin install
Installing thin service at /etc/init.d/thin ...
mkdir -p /etc/init.d
writing /etc/init.d/thin
chmod +x /etc/init.d/thin
mkdir -p /etc/thin
</code></p>

<h2>Configure thin to start at system boot</h2>

<p><code>
sudo /usr/sbin/update-rc.d -f thin defaults
</code></p>

<p>Then put your config files in /etc/thin</p>

<p>```
sudo /usr/sbin/update-rc.d -f thin defaults
update-rc.d: warning: thin stop runlevel arguments (0 1 6) do not match LSB Default-Stop values (S 0 1 6)
 Adding system startup for /etc/init.d/thin &hellip;</p>

<p>   /etc/rc0.d/K20thin &ndash;&gt; ../init.d/thin
   /etc/rc1.d/K20thin &ndash;&gt; ../init.d/thin
   /etc/rc6.d/K20thin &ndash;&gt; ../init.d/thin
   /etc/rc2.d/S20thin &ndash;&gt; ../init.d/thin
   /etc/rc3.d/S20thin &ndash;&gt; ../init.d/thin
   /etc/rc4.d/S20thin &ndash;&gt; ../init.d/thin
   /etc/rc5.d/S20thin &ndash;&gt; ../init.d/thin
```</p>

<p>Create thin configuration</p>

<p><code>
sudo thin config -C /etc/thin/&lt;config-name&gt;.yml -c &lt;rails-app-root-path&gt; --servers &lt;number-of-threads&gt; -e &lt;environment&gt;
&lt;/environment&gt;&lt;/number-of-threads&gt;&lt;/rails-app-root-path&gt;&lt;/config-name&gt;
</code></p>

<p>In my case,</p>

<p>```
sudo thin config -C /etc/thin/rails_app.yml -c /home/sandip/rails_app &mdash;servers 3 -e production</p>

<p>&gt;&gt; Wrote configuration to /etc/thin/rails_app.yml
```</p>

<p>thin configuration file will look like</p>

<p>Start/stop/restart Nginx &amp; thin server using command</p>

<p><code>
sudo service nginx start|stop|restart
sudo service thin start|stop|restart
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx passenger configuration for rails application]]></title>
    <link href="funonrails.com/2010/02/nginx-passenger-configuration-for-rails/"/>
    <updated>2010-02-15T21:43:00+05:30</updated>
    <id>funonrails.com/2010/02/nginx-passenger-configuration-for-rails</id>
    <content type="html"><![CDATA[<p>```</p>

<h1>user  nobody;</h1>

<p>user www-data;
worker_processes  2;</p>

<h1>error_log  logs/error.log;</h1>

<h1>error_log  logs/error.log  notice;</h1>

<h1>error_log  logs/error.log  info;</h1>

<h1>pid        logs/nginx.pid;</h1>

<p>events {</p>

<pre><code>worker_connections  1024;
</code></pre>

<p>}</p>

<p>http {</p>

<pre><code>passenger_root /var/lib/gems/1.8/gems/passenger-2.2.8;
passenger_ruby /usr/bin/ruby1.8;
passenger_max_pool_size 3;

include       mime.types;
</code></pre>

<p>default_type  application/octet-stream;</p>

<pre><code>#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';

#access_log  logs/access.log  main;

sendfile        on;
#tcp_nopush     on;

#keepalive_timeout  0;
keepalive_timeout  65;

#gzip  on;
</code></pre>

<p> server {</p>

<pre><code> listen 80;
 server_name localhost;

 root /home/josh/current/public;   # &lt;--- be sure to point to 'public'!
 passenger_enabled on;
 passenger_use_global_queue on;
</code></pre>

<p>   }</p>

<pre><code>server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  logs/host.access.log  main;

    location / {
        root   html;
        index  index.html index.htm;
    }
 #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
</code></pre>

<p>   }
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 steps to install nginx with passenger]]></title>
    <link href="funonrails.com/2009/09/4-steps-to-install-nginx-with-passenger/"/>
    <updated>2009-09-09T23:47:00+05:30</updated>
    <id>funonrails.com/2009/09/4-steps-to-install-nginx-with-passenger</id>
    <content type="html"><![CDATA[<h2>Install passenger program</h2>

<p><code>
sudo gem install passenger
</code></p>

<h2>Install nginx server with passenger enabled</h2>

<p><code>
passenger-install-nginx-module
</code></p>

<p>It will open <code>apt</code>, click <code>Enter</code> to contine then select option 1 for default install
then it will ask, <em>&ldquo;Where do you want to install Nginx to?&rdquo;</em>
<code>
Please specify a prefix directory [/opt/nginx]:
</code>
press enter then copy following block
<code>
server {
  listen 80;
  server_name www.yourhost.com;
  root /somewhere/public;   # &lt;— be sure to point to ‘public’!
  passenger_enabled on;
}
</code></p>

<h2>Make nginx Configuration</h2>

<p>```</p>

<h1>vi /opt/nginx/conf/nginx.conf</h1>

<h1>Make passenger_root and passenger_ruby path to configuration</h1>

<p>http {
  passenger_root /usr/local/lib/ruby/gems/1.8/gems/passenger-2.2.4;
  passenger_ruby /usr/local/bin/ruby;
  &hellip;
<code>
then add server configuration block inside http block
</code>
http {
  &hellip;</p>

<p>  server {</p>

<pre><code>listen 80;
server_name www.yourhost.com; //Make sure this dns entry inside /etc/hosts
root /carsonline/public;   # &lt;— be sure to point to ‘public’! //here carsonline is RAILS_ROOT
passenger_enabled on;
</code></pre>

<p>  }
  &hellip;
```
That&rsquo;s all, you are done !</p>

<h2>Launch Server</h2>

<p><code>
  /opt/nginx/sbin/nginx
</code></p>
]]></content>
  </entry>
  
</feed>

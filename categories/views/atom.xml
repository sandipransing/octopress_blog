<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: views | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/views/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-03-05T15:42:30+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[number to indian currency helper for rails with WebRupee]]></title>
    <link href="http://funonrails.com/2011/03/number-to-indian-currency-helper-for-rails/"/>
    <updated>2011-03-17T02:13:00+05:30</updated>
    <id>http://funonrails.com/2011/03/number-to-indian-currency-helper-for-rails</id>
    <content type="html"><![CDATA[<blockquote><p>rails has built in <code>number_to_currency</code> helper which takes options like unit, delimeter, seperator which displays foreign currency correctly but somehow it is not best suited for indian currency.</p></blockquote>

<p>Below is how we managed 2 years ago to display indian currency formatted properly with comma as seperator. personally i think it could be more better than what it is currently ;)</p>

<h2>Number to indian currency(rupees) helper</h2>

<p>```ruby
module ApplicationHelper
  def number_to_indian_currency(number)</p>

<pre><code>if number
  string = number.to_s.split('.')
  number = string[0].gsub(/(\d+)(\d{3})$/){ p = $2;"#{$1.reverse.gsub(/(\d{2})/,'\1,').reverse},#{p}"}
  number = number.gsub(/^,/, '') + '.' + string[1] if string[1]
  # remove leading comma
  number = number[1..-1] if number[0] == 44
end
"Rs.#{number}"
</code></pre>

<p>  end
```</p>

<h2>Sample Output for different combinations</h2>

<p>```ruby</p>

<blockquote><blockquote><p>helper.number_to_indian_currency(2000)
=> &ldquo;Rs.2,000&rdquo;
helper.number_to_indian_currency(2040)
=> &ldquo;Rs.2,040&rdquo;
helper.number_to_indian_currency(2040.50)
=> &ldquo;Rs.2,040.5&rdquo;
helper.number_to_indian_currency(2040.54)
=> &ldquo;Rs.2,040.54&rdquo;
helper.number_to_indian_currency(1222040.54)
=> &ldquo;Rs.12,22,040.54&rdquo;
```
After doing google today found from Piyush Ranjan&rsquo;s Blog that yes there are ways to optimize code.</p>

<h2>Optimized Version</h2>

<p>```ruby
module ApplicationHelper
  def number_to_indian_currency(number)</p>

<pre><code>"Rs.#{number.to_s.gsub(/(\d+?)(?=(\d\d)+(\d)(?!\d))(\.\d+)?/, "\\1,")}"
</code></pre>

<p>  end
end
```
Waw one line of code, Look at the beauty of regular expression :) Truely amazing !</p>

<h2>Integrating Webrupee symbol</h2>

<p>First include follwing stylesheet in your layout
<code>css
//public/stylesheets/font.css
@font-face {
  font-family: "WebRupee";
  font-style: normal;
  font-weight: normal;
  src: local("WebRupee"), url("http://cdn.webrupee.com/WebRupee.V2.0.ttf") format("truetype"), url("http://cdn.webrupee.com/WebRupee.V2.0.woff") format("woff"), url("http://cdn.webrupee.com/WebRupee.V2.0.svg") format("svg");
}
.WebRupee {
  font-family: 'WebRupee';
}
</code></p>

<h2>Improved Version of Helper</h2>

<p>```ruby
module ApplicationHelper
  def number_to_indian_currency(number, html=true)</p>

<pre><code>txt = html ? content_tag(:span, 'Rs.', :class =&gt; :WebRupee) : 'Rs.'
"#{txt} #{number.to_s.gsub(/(\d+?)(?=(\d\d)+(\d)(?!\d))(\.\d+)?/, "\\1,")}"
</code></pre>

<p>  end
end
```</p></blockquote></blockquote>

<h2>Usage</h2>

<p>```ruby</p>

<blockquote><blockquote><p>helper.number_to_indian_currency(400)
=> &ldquo;<span class="WebRupee">Rs.</span> 400&rdquo;
helper.number_to_indian_currency(5921, false)
=> &ldquo;Rs. 5,921&rdquo;
helper.number_to_indian_currency(9921)
=> &ldquo;<span class="WebRupee">Rs.</span> 9,921&rdquo;
```</p></blockquote></blockquote>

<p>This will show you rupees symbol on your webpages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Helper modules in rails]]></title>
    <link href="http://funonrails.com/2010/12/accessing-helper-modules-in-rails/"/>
    <updated>2010-12-06T15:51:00+05:30</updated>
    <id>http://funonrails.com/2010/12/accessing-helper-modules-in-rails</id>
    <content type="html"><![CDATA[<p>Methods defined in Helper modules can directly accessed in rails views because this is what they are pretended for but we often come across with situations where we wanted to use some helper methods in controllers, views, models and mailers and obvious we don&rsquo;t want to repeat same lines of code everywhere which also rail does not permit. forgotten DRY? Oh then how to do achieve same without violating rails principle.</p>

<p>Certainly there are ways to do this ..</p>

<h2>1. Helper methods all the time for views</h2>

<p><code>ruby
class ApplicationController &lt; ActionController::Base
  helper :all# include all helpers, all the time for views
end
</code></p>

<h2>2. Controller methods in views</h2>

<p>```ruby
class ApplicationController &lt; ActionController::Base</p>

<p>  helper_method :current_store
  #now controller_method can be accessed in views
  &hellip;
end
```</p>

<h2>3. Helper methods in controller</h2>

<p>```ruby
class ApplicationController &lt; ActionController::Base</p>

<p>  include ActionView::Helpers::ApplicationHelper
  &hellip;</p>

<p>end
```</p>

<h2>4. Helper methods in model</h2>

<p>```ruby
class Student &lt; ActiveRecord::Base</p>

<p>  include ActionView::Helpers::ApplicationHelper
  &hellip;</p>

<p>end
```</p>

<h2>5. Helper methods in mailers</h2>

<p>```ruby
class Notifier &lt; ActionMailer::Base</p>

<p>  add_template_helper(ApplicationHelper)
  &hellip;</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Render partial or view from another controller]]></title>
    <link href="http://funonrails.com/2009/05/render-partial-or-view-from-another/"/>
    <updated>2009-05-22T19:50:00+05:30</updated>
    <id>http://funonrails.com/2009/05/render-partial-or-view-from-another</id>
    <content type="html"><![CDATA[<p>To render view files from another controller&rsquo;s view files</p>

<h2>In rail 2.3</h2>

<p><code>
render "controller/action"
</code></p>

<h2>In rails 2.2 or below</h2>

<p><code>
render :template =&gt; 'controller/action'
</code></p>

<h2>To render partial from another controllerâ€™s views folder</h2>

<p><code>
render :partial =&gt; "controller/partial"
</code></p>
]]></content>
  </entry>
  
</feed>

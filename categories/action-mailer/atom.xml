<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: action-mailer | Fun On Rails]]></title>
  <link href="funonrails.com/categories/action-mailer/atom.xml" rel="self"/>
  <link href="funonrails.com/"/>
  <updated>2014-02-21T02:23:40+05:30</updated>
  <id>funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Email attachments in ruby & rails]]></title>
    <link href="funonrails.com/2010/08/email-attachments-in-ruby-rails/"/>
    <updated>2010-08-21T03:30:00+05:30</updated>
    <id>funonrails.com/2010/08/email-attachments-in-ruby-rails</id>
    <content type="html"><![CDATA[<p><strong>1. Add ActionMailer configuration in environment</strong></p>

<p>This configuration can be different for development and production.
```ruby</p>

<h1>Include your application configuration below</h1>

<h1>You can set two configurations sendmail as well as smtp</h1>

<h1>To use SMTP you need to provide your email account credentials</h1>

<h1>Sendmail is a unix package that needs to be installed and configured while</h1>

<h1>using sendmail settings</h1>

<h1>Chances of getting emails into recipient&rsquo;s inbox are 100% for smtp settings</h1>

<h1>whereas sendmail needs some other configurations to be done before using.</h1>

<p>ActionMailer::Base.delivery_method = :smtp
ActionMailer::Base.default_content_type = &ldquo;text/html&rdquo;
```</p>

<p><strong>2. Create Mailer Model and add method to deliver email</strong></p>

<p>```ruby
class EmailMailer &lt; ActionMailer::Base</p>

<p>  def email_with_attachments(email, files=[])</p>

<pre><code># content type also can be set in environment file as
# ActionMailer::Base.default_content_type = "text/html"
@headers = {content_type =&gt; 'text/html'} 
@sent_on = Time.now  
@recipients = email.recipients
@from = email.from
@cc = FEEDBACK_RECIPIENT
@subject = email.subject
@body = email.message

# attach files  
files.each do |file|  
  attachment "application/octet-stream" do |a|  
    a.body = file.read  
    a.filename = file.original_filename  
  end unless file.blank?  
end  
</code></pre>

<p>end
```</p>

<p><strong>3. Email Model</strong></p>

<p>```ruby</p>

<h1>This is the virtual model in rails which has no database table associated with it</h1>

<p>class Email &lt; ActiveRecord::Base
  # It uses has_no_table plugin to create virtual model
  # This can also be done using following lines of code
  #
  # def self.columns() @columns ||= []; end
  # def self.column(name, sql_type = nil, default = nil, null = true)
  #  columns &lt;&lt; ActiveRecord::ConnectionAdapters::Column.new(name.to_s, default, sql_type.to_s, null)
  # end
  #</p>

<p>  has_no_table
  #insert the names of the form fields here
  column :from, :string
  column :recipients, :string
  column :subject, :string
  column :message, :text
  column :call_id, :integer</p>

<p>  attr_accessor :is_subscribed</p>

<p>  #Validations goes here
  validates_presence_of :from, :message => &ldquo;You dont have Email ID, you cannot continue!&rdquo;, :unless => &ldquo;call_id.blank?&rdquo;
  validates_format_of :from, :with => /^([^@]+)@((?:[-a-z0-9]+.)+[a-z]{2,})$/i, :unless => &ldquo;from.blank?&rdquo;
  validates_presence_of :recipients
  validates_format_of :recipients, :with => /^([^@]+)@((?:[-a-z0-9]+.)+[a-z]{2,})$/i, :message => &ldquo;Invalid email format&rdquo;, :unless => &ldquo;recipients.blank?&rdquo;
  validates_presence_of :subject, :message
end
```</p>

<p><strong>4. Usage from console or controller</strong></p>

<p>```</p>

<h1>Here email is the valid object of email model</h1>

<h1>attachments is the area of files to be attached with email</h1>

<h1>In my case attachments are of kind of pdf files</h1>

<h1>you can specify type of attachment in your mailer method</h1>

<p>EmailMailer.deliver_email_with_attachements(email, attachments) if email.valid?
```</p>

<h4>Sending data stream as email attachments in rails</h4>

<p>In some cases, We need to dynamically generate files and you don&rsquo;t want to store them locally on file system instead you always like to email them from memory itself</p>

<p>Here is the way to do that:</p>

<p><strong>1. Mailer data stream as attachment method</strong></p>

<p>```ruby
class EmailMailer &lt; ActionMailer::Base</p>

<p>  def email_with_data_stream(email, data_stream=[])</p>

<pre><code>@headers = {}  
@sent_on = Time.now  
@recipients = email.recipients
@from = email.from
@subject = email.subject
@body = email.message

# attach files  
data_stream.each do |data|  

  attachment "application/octet-stream" do |a|  
    a.body = data[0]
    a.filename = data[1] 
  end unless data_stream.blank?  
end  
</code></pre>

<p>  end<br/>
end
```</p>

<p><strong>2. Lets take example of pdf renderer</strong>
```ruby</p>

<h1>Assume we have pdf object</h1>

<p>attachments = []
data = pdf.render</p>

<h1>Attach as many files you wanted. Be careful about email maximum size ;)</h1>

<p>attachments &lt;&lt; data
EmailMailer.deliver_email_with_data_stream(email, attachments)
```</p>
]]></content>
  </entry>
  
</feed>

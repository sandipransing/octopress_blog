<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: meta-programming | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/meta-programming/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-03-27T01:06:32+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic methods inside ruby classes]]></title>
    <link href="http://funonrails.com/2011/12/dynamic-methods-inside-ruby-classes/"/>
    <updated>2011-12-22T17:54:00+05:30</updated>
    <id>http://funonrails.com/2011/12/dynamic-methods-inside-ruby-classes</id>
    <content type="html"><![CDATA[<p>Ruby language is dynamic and robust. We can define methods inside ruby classes at runtime.</p>

<p>```ruby
class A
  define_method :a do</p>

<pre><code>puts "hello"
</code></pre>

<p>  end</p>

<p>  define_method :greeting do |message|</p>

<pre><code>puts message
</code></pre>

<p>  end
end</p>

<p>A.new.a #=> hello
A.new.greeting &lsquo;Ram ram&rsquo; #=> Ram ram
```</p>

<p>Can you imagine using dynamic methods below 24 lines of code is optimized to just 8 lines
To know more on below code <a href="http://www.funonrails.com/2011/12/multiple-resources-registrations-with">read</a></p>

<h3>Before code</h3>

<p>```ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  helper_method :current_staff, :current_employee, current_admin</p>

<p>  def authenticate_staff!(opts={})</p>

<pre><code>current_staff || not_authorized
</code></pre>

<p>  end</p>

<p>  def current_staff</p>

<pre><code>current_user if current_user.is_a? Staff
</code></pre>

<p>  end</p>

<p>  def authenticate_employee!(opts={})</p>

<pre><code>current_employee || not_authorized
</code></pre>

<p>  end</p>

<p>  def current_employee</p>

<pre><code>current_user if current_user.is_a? Employee
</code></pre>

<p>  end</p>

<p>  def authenticate_admin!(opts={})</p>

<pre><code>current_admin || not_authorized
</code></pre>

<p>  end</p>

<p>  def current_admin</p>

<pre><code>current_user if current_user.is_a? Admin
</code></pre>

<p>  end
end
```</p>

<h3>After code</h3>

<p>```ruby</p>

<h1>New Version using dynamic methods</h1>

<p>%w(Staff Employee Admin).each do |k|
  define_method &ldquo;current_#{k.underscore}&rdquo; do</p>

<pre><code>current_user if current_user.is_a?(k.constantize)
</code></pre>

<p>  end</p>

<p>  define_method &ldquo;authenticate_#{k.underscore}!&rdquo; do |opts={}|</p>

<pre><code>send("current_#{k.underscore}") || not_authorized
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alias methods in ruby]]></title>
    <link href="http://funonrails.com/2010/03/aliasmethod-in-ruby/"/>
    <updated>2010-03-31T17:46:00+05:30</updated>
    <id>http://funonrails.com/2010/03/aliasmethod-in-ruby</id>
    <content type="html"><![CDATA[<h2>Alias method in ruby</h2>

<p>Ruby classes provides a alias_method that can be used to reuse the existing methods.
Consider a situation where you need different methods which has same code and ONLY they have different names.</p>

<p>In this case alias_method uses suits best choice instead duplicating same code or writing common method that will get used in all methods, as i did before. Example, I have methods search, home, index all are doing same functionality.</p>

<h2>Old approach</h2>

<p>```ruby</p>

<h1>URL /</h1>

<p>def index
 list
end</p>

<h1>URL /search</h1>

<p>def search
 list
end</p>

<h1>URL /home</h1>

<p>def home
 list
end
private
def list</p>

<h1>code here</h1>

<p>end
```</p>

<h2>Correct approach in ruby</h2>

<p><code>
def index
 # code here
end
alias_method :home, :index
alias_method :search, :index
</code></p>

<h2>Attributes aliasing in ruby</h2>

<p>Same way one can easily rename existing class attribute names using alias_attribute method.</p>

<h2>alias_attribute(new_name, old_name)</h2>

<p><code>
alias_attrinute :username, :login
</code></p>

<h2>More practical use</h2>

<p>while deprecating attributes, methods in gems, plugins, extensions, libraries always use aliases in order to maintain backward compatibility.</p>

<p>Got easy ?? that&rsquo;s where ruby rocks !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic creation of variables in ruby]]></title>
    <link href="http://funonrails.com/2010/02/dynamic-creation-of-variables-in-ruby/"/>
    <updated>2010-02-16T16:12:00+05:30</updated>
    <id>http://funonrails.com/2010/02/dynamic-creation-of-variables-in-ruby</id>
    <content type="html"><![CDATA[<h2>1. To create local variables in ruby dynamically</h2>

<p>Using eval method in ruby
```ruby
eval(&ldquo;local=4&rdquo;)</p>

<h1>=> 4</h1>

<p>p local</p>

<h1>=> 4</h1>

<p>eval(&ldquo;local_#{1}=4&rdquo;)</p>

<h1>=> 4</h1>

<p>puts local_1</p>

<h1>=> 4</h1>

<p>```</p>

<h2>2. To create &amp; get instance variables dynamically in ruby</h2>

<p><code>instance_varaiable_set</code> &amp; <code>instance_varaiable_get</code> methods are provided and no need to do it using eval</p>

<p>```ruby
(0..3).each do |i|
  instance_variable_set(&ldquo;@instance_#{i}&rdquo;, i*i+1)
end</p>

<h1>=> 0..3</h1>

<p>@instance_0</p>

<h1>=> 1</h1>

<p>@instance_2</p>

<h1>=> 5</h1>

<p>```</p>

<h2>3. Dynamic constant variable creation in ruby</h2>

<p>```ruby
class Example
end</p>

<p>Example.const_set(&lsquo;A&rsquo;,200)</p>

<h1>=> 200</h1>

<p>Example::A</p>

<h1>=> 200</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eval method in ruby]]></title>
    <link href="http://funonrails.com/2010/02/eval-method-in-ruby/"/>
    <updated>2010-02-16T15:34:00+05:30</updated>
    <id>http://funonrails.com/2010/02/eval-method-in-ruby</id>
    <content type="html"><![CDATA[<p>Eval method in ruby executes string/expression passed as parameter.</p>

<p>Example:
```ruby
eval(&ldquo;5+3&rdquo;)</p>

<h1>=> 8</h1>

<p>eval(&ldquo;a=5&rdquo;)</p>

<h1>=> 5</h1>

<p>eval(&ldquo;b||=a&rdquo;)</p>

<h1>=> 5</h1>

<p>```
Its part of ruby meta-programming and not recommended approach unless there is no any alternative to do.</p>
]]></content>
  </entry>
  
</feed>

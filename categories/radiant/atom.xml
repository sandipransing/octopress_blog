<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: radiant | Fun On Rails]]></title>
  <link href="funonrails.com/categories/radiant/atom.xml" rel="self"/>
  <link href="funonrails.com/"/>
  <updated>2014-02-14T16:35:12+05:30</updated>
  <id>funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple sites hosting using radiant cms]]></title>
    <link href="funonrails.com/2010/08/multiple-sites-hosting-using-radiant/"/>
    <updated>2010-08-07T20:49:00+05:30</updated>
    <id>funonrails.com/2010/08/multiple-sites-hosting-using-radiant</id>
    <content type="html"><![CDATA[<div class='post'>
There are almost 4 to 5 simple steps you need to followed before<br />getting multiple sites working using radiant cms<br />1. Setup radiant cms <br />first Install radiant gem<br /><pre class="ruby" name="code">sudo gem install radiant</pre><br />set 'radiant' under path<br /><pre class="ruby" name="code">export PATH=$PATH:/var/lib/gems/1.8/gems/radiant-0.8.0/bin</pre><br />Now, we have done with radiant installation.<br />Let's create new project..<br /><pre class="ruby" name="code">$ radiant multisite -d mysql</pre><br /><pre class="ruby" name="code">$ cd multisite/</pre><br />Edit database.yml<br /><pre class="ruby" name="code">$ vi config/database.yml<br />development:<br />  adapter: mysql<br />  database: multisite_development<br />  username: root<br />  password: abcd<br />  host: localhost</pre><br />Migrations<br /><pre class="ruby" name="code">rake db:create</pre><br />Run the database bootstrap rake task:<br /><pre class="ruby" name="code">rake db:bootstrap<br />This task will destroy any data in the database. Are you sure you want</pre><pre class="ruby" name="code">to continue? [yn] yes<br />...<br />Create the admin user (press enter for defaults).<br />Name (Administrator): admin<br />Username (admin): admin<br />Password (radiant): <br />....<br />Select a database template:<br />1. Empty<br />2. Roasters (a coffee-themed blog or brochure)<br />3. Simple Blog<br />4. Styled Blog<br />[1-4]: 2<br />....</pre><br />Now we are ready to start<br /><pre class="ruby" name="code">script/server</pre><br />Open following URL in browser.<br /><pre class="ruby" name="code">http://localhost:3000</pre><br />You should see site homepage.&nbsp;To manage site goto admin panel.<br /><pre class="ruby" name="code"></pre><pre class="ruby" name="code">http://localhost:3000/admin</pre><br />Now Lets start with multiple sites management<br />1) Clone multi_site extension into vendor/extensions of your project.<br /><pre class="ruby" name="code">  cd vendor/extensions/<br />  git clone git://github.com/zapnap/radiant-multi-site-extension.git multi_site</pre><br />2) Run the extension migrations.<br /><pre class="ruby" name="code">  rake db:migrate:extensions</pre><br />3) Run the extension update task.<br /><pre class="ruby" name="code">  rake radiant:extensions:multi_site:update</pre><br />4) Restart your server<br />And we are done with multisite installation,&nbsp;Open following URL in browser.<br /><br />http://localhost:3000/admin/sites<br /><br />Add multiple sites as you wanted<br /><pre class="ruby" name="code"> Name        Domain pattern     Base domain name<br /><br />================================================<br /><br /> site 1      sandip             sandip<br /><br /> site 2      gautam             gautam<br /><br /> </pre>Don't forget to make dns entries in /etc/hosts.<br />vi /etc/hosts<br /><pre class="ruby" name="code"> <br />127.0.0.1 localhost<br />...<br />127.0.0.1 sandip<br />127.0.0.1 gautam<br /></pre>One more, by deault pages created for new sites added are not published.<br />Please be sure to make them published and modify contents to identify them<br /><br />Now you can view different sites.<br /><b>     http://sandip:3000<br />   http://gautam:3000<br /> </b><br /><br />Thats, All<br />Cheers !<br />$@ndip</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Vic</div>
<div class='content'>
Super Simple!  Great!</div>
</div>
<div class='comment'>
<div class='author'>gautamrege</div>
<div class='content'>
Great work!</div>
</div>
<div class='comment'>
<div class='author'>sandipransing</div>
<div class='content'>
@jim, Thanks for your suggestion.<br>I will make those changes.</div>
</div>
<div class='comment'>
<div class='author'>Jim Gay</div>
<div class='content'>
you can skip a few steps by doing &quot;script/extension install multi_site&quot;</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Cache control in radiant cms]]></title>
    <link href="funonrails.com/2010/03/page-cache-control-in-radiant-cms/"/>
    <updated>2010-03-04T00:43:00+05:30</updated>
    <id>funonrails.com/2010/03/page-cache-control-in-radiant-cms</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="Apple-style-span" style="font-family: Arial; font-size: small;"><span class="Apple-style-span" style="font-size: 13px;"><div><b>Radiant Caching</b></div><div><br /></div><div>Radiant cms is very powerful and customizable cms as of now which has&nbsp;inbuilt support for page caching.</div><div>Radiant caching mechanisam is somehow similar&nbsp;to action caching in rails.</div><div><br /></div><div><b>In latest radiant version i.e. &gt; 0.8 Responsecache has been replaced with Radiant::Cache.</b></div><div><br /></div><div>By default radiant cache gets automatically invalidated after every 5&nbsp;</div><div>minutes and that is configurable.</div><div><br /></div><div>The interval is easily configurable by adding following lines inside environment</div><div><br /></div><blockquote>if defined? ResponseCache == 'constant' &nbsp; &nbsp;</blockquote><blockquote>&nbsp;&nbsp; &nbsp;ResponseCache.defaults[:expire_time] = 4.hours</blockquote><blockquote>else</blockquote><blockquote>&nbsp;&nbsp; &nbsp;SiteController.cache_timeout = 4.hours</blockquote><blockquote>end</blockquote><div>There are situations where automatic cache inavalidation won't work</div><div>and we need to clear radiant cache on the fly.</div><div>There are two ways to do that to invalidate radiant cache immediately.</div><div><br /></div><div>1. <b>Navigate to the root of your Radiant project and delete the cache directory.</b></div><div><br /></div><blockquote>cd /home/deploy/radiant_site/tmp</blockquote><blockquote>rm -r cache</blockquote><div><br /></div><div>2.<b> Clearing the page cache from within your code</b></div><div>&nbsp;&nbsp; &nbsp;</div><blockquote>if defined? ResponseCache == 'constant'</blockquote><blockquote>&nbsp;&nbsp; &nbsp;ResponseCache.instance.clear</blockquote><blockquote>else</blockquote><blockquote>&nbsp;&nbsp; &nbsp;Radiant::Cache.clear</blockquote><blockquote>end</blockquote><div><br /></div><div>While building website using radiant cms, it happens that there are certain pages they are static and not going to change frequently that time configuring cache expiry time to long interval is going to be always beneficial and for pages which conatins dynamic content (displaying logged in user on homepage), we need to disable radiant cache for such pages. this can be done by using page_options extension.</div><div><br /></div><div><b>Installation for radiant version &nbsp;0.7</b></div><div>From your RADIANT_ROOT:</div><div><br /></div><blockquote>$ script/extension install page_options</blockquote><div><br /></div><div><b>Installation for radiant version &nbsp;0.8 and higher</b></div><blockquote>git clone git://github.com/sandipransing/radiant-page_options-extension.git vendor/extensions/page_options</blockquote><div><br /></div><div>Restart server</div><div><br /></div><div><b>Usage</b></div><div><br /></div><div>1. Goto /admin/pages</div><div>2. Edit any page</div><div>3. Click on more link and edit cache settings.</div><div><br /></div><div>For more information <a href="http://github.com/avonderluft/radiant-page_options-extension">visit</a></div><div><br /></div></span></span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding and creating radinat extensions]]></title>
    <link href="funonrails.com/2009/11/understanding-and-creating-radinat/"/>
    <updated>2009-11-10T13:52:00+05:30</updated>
    <id>funonrails.com/2009/11/understanding-and-creating-radinat</id>
    <content type="html"><![CDATA[<div class='post'>
Understanding and creating radinat extensions To start with, first of all lets know what is radiant and why to use it ? Radiant is a open source content management system designed that serves cms needs for small organisations Creating new radint application <pre class='ruby' name='code'><br /> radiant -d  mysql cms<br />    create<br />    create    CHANGELOG<br />    create    CONTRIBUTORS<br />    create    INSTALL<br />    create    LICENSE<br />    create    README<br />    create    config<br />    create    config/environments<br />    .....<br /></pre>Radiant supports extensions. It means one can add extra features to radiant based cms to add extra capabilities. Extension directory structure is almost similar to any standard rails application Radiant Extension Directory structure  <pre class='ruby' name='code'><br />       |-- app<br />              |-- controllers<br />              |-- helpers<br />              |-- models<br />              |-- views<br />       |-- db<br />              |-- migrate<br />              |-- seeds.rb<br />       |-- lib<br />              |-- spec<br />                 |-- controllers<br />                 |-- helpers<br />                 |-- models<br />                 |-- spec.opts<br />                 |-- spec_helper<br />                 |-- views<br /></pre>Creating radiant extension radiant has generators to create new radint extension script/generate extension ExtensionName Lets create session management extension for radint cms It will create directory structure for extension. <pre class='ruby' name='code'><br />script/generate extension session_management<br /></pre><pre class='ruby' name='code'><br />    create    vendor/extensions/session_management/app/controllers<br />    create    vendor/extensions/session_management/app/helpers<br />    create    vendor/extensions/session_management/app/models<br />    create    vendor/extensions/session_management/app/views<br />     create vendor/extensions/session_management/db/migrate<br />     create vendor/extensions/session_management/lib/tasks<br />     create vendor/extensions/session_management/README<br />     create vendor/extensions/session_management/session_management_extension.rb<br />     create<br />vendor/extensions/session_management/lib/tasks/session_management_extension_tasks.rake<br />     create vendor/extensions/session_management/spec/controllers<br />     create vendor/extensions/session_management/spec/models<br />     create vendor/extensions/session_management/spec/views<br />     create vendor/extensions/session_management/spec/helpers<br />     create vendor/extensions/session_management/features/support<br />     create vendor/extensions/session_management/features/step_definitions/admin<br />     create vendor/extensions/session_management/Rakefile<br />     create vendor/extensions/session_management/spec/spec_helper.rb<br />     create vendor/extensions/session_management/spec/spec.opts<br />     create vendor/extensions/session_management/cucumber.yml<br />     create vendor/extensions/session_management/features/support/env.rb<br />     create vendor/extensions/session_management/features/support/paths.rb<br /></pre>Edit session_management_extension.rb where extension version, description and website url can be added. <pre class='ruby' name='code'><br /># require_dependency 'application_controller'<br />class SessionManagementExtension < Radiant::Extension<br />  version "1.0"<br />  description "Describe your extension here"<br />  url "http://yourwebsite.com/session_management"<br />  # define_routes do |map|<br />  # map.namespace :admin, :member => { :remove => :get } do |admin|<br />  #     admin.resources :session_management<br />  # end<br />  # end<br />  def activate<br />    # admin.tabs.add "Session Management", "/admin/session_management", :after =><br />"Layouts", :visibility => [:all]<br />  end<br />  def deactivate<br />    # admin.tabs.remove "Session Management"<br />  end<br /></pre>In activate block, specify what are the library files , modules that needs to be activated while application starts. In my case, activate method looks like below.. <pre class='ruby' name='code'><br />  def activate<br />    # admin.tabs.add "Session Management", "/admin/session_management", :after =><br />"Layouts", :visibility => [:all]<br />   ApplicationController.send(:include, SessionManagementExt::ApplicationControllerExt)<br />  end<br /></pre>Generating models and controllers. <pre class='ruby' name='code'><br /> script/generate extension_model session_management session_info<br />session_id:string url:string ip:string<br /></pre>In above command first attribute is the extension name and next is model name and rest specifies attributes that needs to created. It will create <pre class='ruby' name='code'><br />     exists   app/models/<br />     exists   spec/models/<br />     create   app/models/session_info.rb<br />     create   spec/models/session_info_spec.rb<br />     exists   db/migrate<br />     create   db/migrate/20091110075042_create_session_infos.rb<br /></pre>Generating controller <pre class='ruby' name='code'><br />script/generate extension_controller session_management admin/session_managements<br /></pre>It will create an output <pre class='ruby' name='code'><br />create app/controllers/admin<br />     create app/helpers/admin<br />     create app/views/admin/session_managements<br />     create spec/controllers/admin<br />     create spec/helpers/admin<br />     create spec/views/admin/session_managements<br />     create spec/controllers/admin/session_managements_controller_spec.rb<br />     create spec/helpers/admin/session_managements_helper_spec.rb<br />     create app/controllers/admin/session_managements_controller.rb<br />     create app/helpers/admin/session_managements_helper.rb<br /></pre>Modify session managements controller for displaying sesssion infos tracked. We need before filter for every request that will capture session, ip and page url so, we need to override behaviour of application controller to add before_filter We have already added ApplicationControllerExt in activate of extension. <pre class='ruby' name='code'><br />   ApplicationController.send(:include, SessionManagementExt::ApplicationControllerExt)<br />Lets look into ApplicationControllerExt module.<br />module SessionManagementExt<br />  module ApplicationControllerExt<br />    def self.included(base)<br />     base.class_eval do<br />       before_filter :track_session<br />     end<br />    end<br />    def track_session<br />     #**"Hello from Session tracker !!!"**<br />     #TODO: location track<br />     # It can be delayed task<br />     #sudo gem install geoip_city -- --with-geoip-dir=/opt/GeoIP<br />     # require 'geoip_city'<br />     # g = GeoIPCity::Database.new('/opt/GeoIP/share/GeoIP/GeoLiteCity.dat')<br />     # res = g.look_up('201.231.22.125')<br />     # {:latitude=>-33.13330078125, :country_code3=>"ARG",<br />:longitude=>-64.3499984741211, :city=>"Río Cuarto", :country_name=>"Argentina",<br />:country_code=>"AR", :region=>"05"}<br />     SessionInfo.create( :ip => request.remote_ip, :page_url =><br />"http://#{request.env["HTTP_HOST"]}#{request.request_uri}", :session_id =><br />request.session.session_id )<br />    end<br />  end<br />end<br /></pre>That's all Creating rake task for extension module here is default genrated rake task for session management under vendor/extensions/session_management/lib/tasks/session_management_extension_tasks.rake It includes task to migrate database and update extension <pre class='ruby' name='code'><br />namespace :radiant do<br />  namespace :extensions do<br />    namespace :session_management do<br />     desc "Runs the migration of the Session Management extension"<br />     task :migrate => :environment do<br />       require 'radiant/extension_migrator'<br />       if ENV["VERSION"]<br />         SessionManagementExtension.migrator.migrate(ENV["VERSION"].to_i)<br />       else<br />         SessionManagementExtension.migrator.migrate<br />       end<br />     end<br />     desc "Copies public assets of the Session Management to the instance public/ directory."<br />     task :update => :environment do<br />       is_svn_or_dir = proc {|path| path =~ /\.svn/ || File.directory?(path) }<br />       puts "Copying assets from SessionManagementExtension"<br />       Dir[SessionManagementExtension.root + "/public/**/*"].reject(&is_svn_or_dir).each do<br />|file|<br />         path = file.sub(SessionManagementExtension.root, '')<br />         directory = File.dirname(path)<br />         mkdir_p RAILS_ROOT + directory, :verbose => false<br />         cp file, RAILS_ROOT + path, :verbose => false<br />       end<br />     end<br />    end<br />  end<br />end<br /></pre>Add as many custom tasks needed inside this file without changing default tasks.  Migrate all radiant extensions <pre class='ruby' name='code'><br />rake db:migrate:extensions<br /></pre></div>

]]></content>
  </entry>
  
</feed>

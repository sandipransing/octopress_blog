<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cms | Fun On Rails]]></title>
  <link href="http://funonrails.com/categories/cms/atom.xml" rel="self"/>
  <link href="http://funonrails.com/"/>
  <updated>2014-04-22T16:16:32+05:30</updated>
  <id>http://funonrails.com/</id>
  <author>
    <name><![CDATA[sandipransing]]></name>
    <email><![CDATA[sandip@funonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple sites hosting using radiant cms]]></title>
    <link href="http://funonrails.com/2010/08/multiple-sites-hosting-using-radiant/"/>
    <updated>2010-08-07T20:49:00+05:30</updated>
    <id>http://funonrails.com/2010/08/multiple-sites-hosting-using-radiant</id>
    <content type="html"><![CDATA[<p>This involves 4-5 simple in-order to get multiple sites working using radiant cms. Follow the below steps one by one.</p>

<h4>Setup radiant cms</h4>

<p>first Install radiant gem</p>

<p><code>
sudo gem install radiant
</code>
set &lsquo;radiant&rsquo; under path</p>

<p><code>
export PATH=$PATH:/var/lib/gems/1.8/gems/radiant-0.8.0/bin
</code></p>

<p>Now, As we are done with radiant installation lets create new project.</p>

<p><code>
$ radiant multisite -d mysql
</code></p>

<h4>Edit database config</h4>

<p><code>
$ cd multisite/
$ vi config/database.yml
development:
  adapter: mysql
  database: multisite_development
  username: root
  password: abcd
  host: localhost
</code></p>

<h4>Migrations</h4>

<p><code>
rake db:create
</code></p>

<h4>Run the database bootstrap rake task:</h4>

<p><code>
rake db:bootstrap
This task will destroy any data in the database. Are you sure you want
to continue? [yn] yes
...
Create the admin user (press enter for defaults).
Name (Administrator): admin
Username (admin): admin
Password (radiant):
....
Select a database template:
1. Empty
2. Roasters (a coffee-themed blog or brochure)
3. Simple Blog
4. Styled Blog
....
</code></p>

<h4>Now we are ready to start</h4>

<p><code>
ruby script/server
</code></p>

<p>Open following URL in browser:</p>

<p><code>http://localhost:3000</code></p>

<p>You should see site homepage. To manage site go to admin panel.
<code>http://localhost:3000/admin</code></p>

<p>Now Lets start with multiple sites management</p>

<p><strong>1) Clone multi_site extension into <code>vendor/extensions</code> of your project</strong>
<code>
  cd vendor/extensions/
  git clone git://github.com/zapnap/radiant-multi-site-extension.git multi_site
</code>
<strong>2) Run the extension migrations</strong>
<code>
  rake db:migrate:extensions
</code></p>

<p><strong>3) Run the extension update task</strong>
<code>
  rake radiant:extensions:multi_site:update
</code>
<strong>4) Restart your server</strong></p>

<p>This finishes our multisite installation. Open following URL in browser.</p>

<p><code>http://localhost:3000/admin/sites</code></p>

<p>Add multiple sites as you wanted
```
 Name        Domain pattern     Base domain name</p>

<p>================================================</p>

<p> site 1      sandip             sandip</p>

<p> site 2      gautam             gautam
```</p>

<p>Don&rsquo;t forget to make dns entries in <code>/etc/hosts</code></p>

<p>```</p>

<h1>/etc/hosts</h1>

<p>127.0.0.1 localhost
&hellip;
127.0.0.1 sandip
127.0.0.1 gautam
```
One more, by deault pages created for new sites added are not published.
Please be sure to make them published and modify contents to identify them</p>

<p>Now you can view different sites:</p>

<ol>
<li><a href="http://sandip:3000">http://sandip:3000</a></li>
<li><a href="http://gautam:3000">http://gautam:3000</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Cache control in radiant cms]]></title>
    <link href="http://funonrails.com/2010/03/page-cache-control-in-radiant-cms/"/>
    <updated>2010-03-04T00:43:00+05:30</updated>
    <id>http://funonrails.com/2010/03/page-cache-control-in-radiant-cms</id>
    <content type="html"><![CDATA[<h2>Radiant Caching</h2>

<p>Radiant cms is very powerful and customizable cms as of now which has inbuilt support for page caching.</p>

<p>Radiant caching mechanisam is somehow similar to action caching in rails.</p>

<p>In latest radiant version i.e. > 0.8 Responsecache has been replaced with Radiant::Cache.</p>

<p>By default radiant cache gets automatically invalidated after every 5 minutes and that is configurable.</p>

<p>The interval is easily configurable by adding following lines inside environment
<code>ruby
if defined? ResponseCache == 'constant'    
  ResponseCache.defaults[:expire_time] = 4.hours
else
  SiteController.cache_timeout = 4.hours
end
</code>
There are situations where automatic cache inavalidation won&rsquo;t work and we need to clear radiant cache on the fly.
There are two ways to do that to invalidate radiant cache immediately.</p>

<h2>1. Navigate to the root of your Radiant project and delete the cache directory</h2>

<p><code>
cd /home/deploy/radiant_site/tmp
rm -r cache
</code></p>

<h2>2. Clearing the page cache from within your code</h2>

<p><code>ruby
if defined? ResponseCache == 'constant'
  ResponseCache.instance.clear
else
  Radiant::Cache.clear
end
</code>
While building website using radiant cms, it happens that there are certain pages they are static and not going to change frequently that time configuring cache expiry time to long interval is going to be always beneficial and for pages which conatins dynamic content (displaying logged in user on homepage), we need to disable radiant cache for such pages. this can be done by using page_options extension.</p>

<h2>Installation for radiant version  0.7</h2>

<p>From your RADIANT_ROOT:</p>

<p><code>
ruby script/extension install page_options
</code></p>

<h2>Installation for radiant version  0.8 and higher</h2>

<p><code>
git clone git://github.com/sandipransing/radiant-page_options-extension.git vendor/extensions/page_options
</code></p>

<p>Restart server</p>

<h2>Usage</h2>

<ol>
<li>Goto /admin/pages</li>
<li>Edit any page</li>
<li>Click on more link and edit cache settings.</li>
</ol>


<p>For more information <a href="http://github.com/avonderluft/radiant-page_options-extension">visit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding and creating radinat extensions]]></title>
    <link href="http://funonrails.com/2009/11/understanding-and-creating-radinat/"/>
    <updated>2009-11-10T13:52:00+05:30</updated>
    <id>http://funonrails.com/2009/11/understanding-and-creating-radinat</id>
    <content type="html"><![CDATA[<h2>Understanding and creating radinat extensions</h2>

<p>To start with, first understand <em>what is radiant</em> and <em>why to use it ?</em></p>

<blockquote><p>Radiant is a open source content management system designed that serves cms needs for small organisations</p></blockquote>

<h2>Creating new radint application</h2>

<p><code>
radiant -d  mysql cms
  create
  create    CHANGELOG
  create    CONTRIBUTORS
  create    INSTALL
  create    LICENSE
  create    README
  create    config
  create    config/environments
  .....
</code>
Radiant supports extensions. It means one can add extra features to radiant based cms to add extra capabilities.
Extension directory structure is almost similar to any standard rails application</p>

<h2>Radiant Extension Directory structure</h2>

<p>```
|&mdash; app</p>

<pre><code>   |-- controllers
   |-- helpers
   |-- models
   |-- views
</code></pre>

<p>|&mdash; db</p>

<pre><code>   |-- migrate
   |-- seeds.rb
</code></pre>

<p>|&mdash; lib</p>

<pre><code>   |-- spec
      |-- controllers
      |-- helpers
      |-- models
      |-- spec.opts
      |-- spec_helper
      |-- views
</code></pre>

<p>```</p>

<h2>Creating radiant extension</h2>

<p>radiant has generators to create new radint extension
<code>
script/generate extension ExtensionName
</code>
Lets create session management extension for radint cms. It will create directory structure for extension.
<code>
script/generate extension session_management
  create vendor/extensions/session_management/app/controllers
  create vendor/extensions/session_management/app/helpers
  create vendor/extensions/session_management/app/models
  create vendor/extensions/session_management/app/views
  create vendor/extensions/session_management/db/migrate
  create vendor/extensions/session_management/lib/tasks
  create vendor/extensions/session_management/README
  create vendor/extensions/session_management/session_management_extension.rb
  create vendor/extensions/session_management/lib/tasks/session_management_extension_tasks.rake
  create vendor/extensions/session_management/spec/controllers
  create vendor/extensions/session_management/spec/models
  create vendor/extensions/session_management/spec/views
  create vendor/extensions/session_management/spec/helpers
  create vendor/extensions/session_management/features/support
  create vendor/extensions/session_management/features/step_definitions/admin
  create vendor/extensions/session_management/Rakefile
  create vendor/extensions/session_management/spec/spec_helper.rb
  create vendor/extensions/session_management/spec/spec.opts
  create vendor/extensions/session_management/cucumber.yml
  create vendor/extensions/session_management/features/support/env.rb
  create vendor/extensions/session_management/features/support/paths.rb
</code></p>

<p>Edit <code>session_management_extension.rb</code> where extension version, description, and website url can be added.
```ruby</p>

<h1>require_dependency &lsquo;application_controller&rsquo;</h1>

<p>class SessionManagementExtension &lt; Radiant::Extension
  version &ldquo;1.0&rdquo;
  description &ldquo;Describe your extension here&rdquo;
  url &ldquo;<a href="http://yourwebsite.com/session_management">http://yourwebsite.com/session_management</a>&rdquo;</p>

<p>  # define_routes do |map|
  # map.namespace :admin, :member => { :remove => :get } do |admin|
  #     admin.resources :session_management
  # end
  # end</p>

<p>  def activate</p>

<pre><code># admin.tabs.add "Session Management", "/admin/session_management", :after =&gt;
</code></pre>

<p>&ldquo;Layouts&rdquo;, :visibility => [:all]
  end</p>

<p>  def deactivate</p>

<pre><code># admin.tabs.remove "Session Management"
</code></pre>

<p>  end
end
```</p>

<p>In activate block, specify what are the library files , modules that needs to be activated while application starts. In my case, activate method looks like below..</p>

<p><code>ruby
def activate
  # admin.tabs.add "Session Management", "/admin/session_management", :after =&gt;
"Layouts", :visibility =&gt; [:all]
  ApplicationController.send(:include, SessionManagementExt::ApplicationControllerExt)
end
</code></p>

<h2>Generating models and controllers</h2>

<p><code>
script/generate extension_model session_management session_info
session_id:string url:string ip:string
</code>
In above command first attribute is the extension name and next is model name and rest specifies attributes that needs to created. It will create
```
exists   app/models/</p>

<pre><code> exists   spec/models/
 create   app/models/session_info.rb
 create   spec/models/session_info_spec.rb
 exists   db/migrate
 create   db/migrate/20091110075042_create_session_infos.rb
</code></pre>

<p>```</p>

<h2>Generating controller</h2>

<p><code>
script/generate extension_controller session_management admin/session_managements
</code></p>

<p>It will create an output</p>

<p>```
create app/controllers/admin</p>

<pre><code> create app/helpers/admin
 create app/views/admin/session_managements
 create spec/controllers/admin
 create spec/helpers/admin
 create spec/views/admin/session_managements
 create spec/controllers/admin/session_managements_controller_spec.rb
 create spec/helpers/admin/session_managements_helper_spec.rb
 create app/controllers/admin/session_managements_controller.rb
 create app/helpers/admin/session_managements_helper.rb
</code></pre>

<p>```
Modify session managements controller for displaying sesssion infos tracked.</p>

<p>We need before filter for every request that will capture <code>session</code>, <code>ip</code> and <code>page url</code>.
so we need to override behaviour of application controller to add before_filter</p>

<p>We have already added <code>ApplicationControllerExt</code> in activate of extension.
<code>
ApplicationController.send(:include, SessionManagementExt::ApplicationControllerExt)
</code>
Lets look into ApplicationControllerExt module.
```ruby
module SessionManagementExt
  module ApplicationControllerExt</p>

<pre><code>def self.included(base)
 base.class_eval do
   before_filter :track_session
 end
end
def track_session
 #**"Hello from Session tracker !!!"**
 #TODO: location track
 # It can be delayed task
 #sudo gem install geoip_city -- --with-geoip-dir=/opt/GeoIP
 # require 'geoip_city'
 # g = GeoIPCity::Database.new('/opt/GeoIP/share/GeoIP/GeoLiteCity.dat')
 # res = g.look_up('201.231.22.125')
 # {:latitude=&gt;-33.13330078125, :country_code3=&gt;"ARG",
</code></pre>

<p>:longitude=>-64.3499984741211, :city=>&ldquo;Río Cuarto&rdquo;, :country_name=>&ldquo;Argentina&rdquo;,
:country_code=>&ldquo;AR&rdquo;, :region=>&ldquo;05&rdquo;}</p>

<pre><code> SessionInfo.create( :ip =&gt; request.remote_ip, :page_url =&gt;
</code></pre>

<p>&ldquo;<a href="http://#">http://#</a>{request.env["HTTP_HOST&rdquo;]}#{request.request_uri}&ldquo;, :session_id =>
request.session.session_id )</p>

<pre><code>end
</code></pre>

<p>  end
end
<code>
That's all! Creating rake task for extension module here is default genrated rake task for session management under `vendor/extensions/session_management/lib/tasks/session_management_extension_tasks.rake`. It includes task to migrate database and update extension
</code>
namespace :radiant do
  namespace :extensions do</p>

<pre><code>namespace :session_management do
 desc "Runs the migration of the Session Management extension"
 task :migrate =&gt; :environment do
   require 'radiant/extension_migrator'
   if ENV["VERSION"]
     SessionManagementExtension.migrator.migrate(ENV["VERSION"].to_i)
   else
     SessionManagementExtension.migrator.migrate
   end
 end
 desc "Copies public assets of the Session Management to the instance public/ directory."
 task :update =&gt; :environment do
   is_svn_or_dir = proc {|path| path =~ /\.svn/ || File.directory?(path) }
   puts "Copying assets from SessionManagementExtension"
   Dir[SessionManagementExtension.root + "/public/**/*"].reject(&amp;is_svn_or_dir).each do
</code></pre>

<p>|file|</p>

<pre><code>     path = file.sub(SessionManagementExtension.root, '')
     directory = File.dirname(path)
     mkdir_p RAILS_ROOT + directory, :verbose =&gt; false
     cp file, RAILS_ROOT + path, :verbose =&gt; false
   end
 end
end
</code></pre>

<p>  end
end
<code>
Add as many custom tasks needed inside this file without changing default tasks.
Migrate all radiant extensions
</code>
rake db:migrate:extensions
```</p>
]]></content>
  </entry>
  
</feed>
